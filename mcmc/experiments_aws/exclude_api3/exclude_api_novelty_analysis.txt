data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/novel_1k_data_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 100


counter: 0
num skipped: 0
{'include': ['java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()'], 'exclude': ['java.nio.ByteBuffer.order(java.nio.ByteOrder)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.getInt()'), (False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()')): [10, -10.809668268077075], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()'), (False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()', 'DStop')): [4, -11.06456508859992], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()', 'java.lang.String.String(byte[],java.lang.String)', 'DStop')): [15, -15.03589966148138], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()'), (False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()', 'java.lang.String.String(byte[],java.lang.String)')): [3, -12.829919638112187], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()'), (False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()', 'java.lang.String.String(byte[],java.lang.String)')): [1, -18.158441791543737], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()'), (False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()', 'DStop')): [1, -14.448898881673813], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.Math.abs(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()'), (False, False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.Math.abs(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.nio.ByteBuffer.getLong()', 'DStop')): [6, -14.445252805948257], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.Math.abs(int)', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.getLong()'), (False, False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.Math.abs(int)', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.getLong()', 'DStop')): [10, -12.88043948635459]}

counter: 5
num skipped: 0
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'], 'exclude': ['java.util.Enumeration.hasMoreElements()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)')): [1, -1.1970330476760864], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DStop')): [32, -2.7826184928417206], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DStop', 'DStop')): [10, -5.787412240169942], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[],int,int)', 'java.io.OutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[],int,int)', 'java.io.OutputStream.write(byte[],int,int)', 'DStop', 'DStop')): [2, -5.964240737142973], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[],int,int)', 'DLoop'), (False, False, False, True, True, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DLoop', 'java.io.InputStream.read(byte[],int,int)', 'java.io.OutputStream.write(byte[],int,int)', 'DStop')): [5, -3.3781640231609344]}

counter: 10
num skipped: 0
{'include': ['java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()'], 'exclude': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getName()'), (False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()')): [2, -10.045860469341278], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()'), (False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'DStop')): [23, -1.8653324656188488], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.newInstance()'), (False, False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.newInstance()', 'DStop')): [2, -6.6733615677803755], (('DSubTree', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()'), (False, False, False, False), ('java.lang.Class<>.newInstance()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()', 'DStop')): [9, -5.384177267551422], (('DSubTree', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()'), (False, False, False, False, False), ('java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()', 'DStop')): [7, -6.4886611476540565], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()'), (False, False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.lang.Class<>.getName()', 'DStop')): [7, -3.3192817885428667]}

counter: 15
num skipped: 1
{'include': ['DBranch', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': ['java.lang.System.nanoTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'DStop', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DStop', 'DStop')): [50, -9.456528902053833]}

counter: 20
num skipped: 1
{'include': ['java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'exclude': ['java.util.List<java.lang.Object>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String)'), (False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [2, -6.9155367612838745], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.lang.String.trim()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.String.trim()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [1, -10.2300626039505], (('DSubTree', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [5, -7.7020169496536255], (('DSubTree', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False, False, False), ('java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop')): [30, -7.438207387924194], (('DSubTree', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop')): [4, -4.580491304397583], (('DSubTree', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.trim()'), (False, False, False, False, False, False), ('java.lang.String.split(java.lang.String)', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.trim()', 'DStop')): [8, -17.387357890605927]}

counter: 30
num skipped: 3
{'include': ['java.lang.String.valueOf(char)', 'java.util.regex.Pattern.quote(java.lang.String)'], 'exclude': ['java.io.InputStream.read(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(char)'), (False, False), ('java.lang.String.valueOf(char)', 'java.util.regex.Pattern.quote(java.lang.String)')): [9, -5.693003416061401], (('DSubTree', 'java.lang.String.valueOf(char)', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False, False), ('java.lang.String.valueOf(char)', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop')): [21, -8.515185985714197], (('DSubTree', 'java.lang.String.valueOf(char)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False, False, False), ('java.lang.String.valueOf(char)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop')): [20, -9.991690253838897]}

counter: 35
num skipped: 4
{'include': ['DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)'], 'exclude': ['java.io.DataInputStream.readInt()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DStop', 'java.text.NumberFormat.format(double)', 'DStop', 'DStop')): [37, -10.495392901590094], (('DSubTree', 'DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'java.text.NumberFormat.format(double)', 'DStop', 'DStop')): [5, -13.83532685157843], (('DSubTree', 'DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.Double.parseDouble(java.lang.String)', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'java.text.NumberFormat.format(double)', 'DStop', 'DStop')): [1, -15.29735781531781], (('DSubTree', 'DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.Double.parseDouble(java.lang.String)', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DBranch'), (False, True, True, False, False, False, False, False, False), ('DBranch', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.NumberFormat.format(double)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'java.text.NumberFormat.format(double)', 'DStop', 'DStop')): [7, -16.756122414954007]}

counter: 40
num skipped: 4
{'include': ['java.nio.channels.SocketChannel.open()', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'], 'exclude': ['java.io.IOException.IOException()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.channels.SocketChannel.open()'), (False, False), ('java.nio.channels.SocketChannel.open()', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)')): [50, -1.1690372750163078]}

counter: 45
num skipped: 5
{'include': ['java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'exclude': ['java.util.List<java.lang.Object>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String)'), (False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [9, -5.602597117424011], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop')): [41, -5.9038377702236176]}

counter: 50
num skipped: 5
{'include': ['java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.lang.Long.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [25, -2.9784390926361084], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.length()'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.length()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [14, -3.453772634267807], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.Integer.toString(int)'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.Integer.toString(int)', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [6, -4.984403803944588], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.split(java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [5, -7.63091653585434]}

counter: 55
num skipped: 5
{'include': ['DExcept', 'java.net.ServerSocket.close()'], 'exclude': ['java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.net.ServerSocket.close()', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.net.ServerSocket.close()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'DStop')): [50, -15.310763418674469]}

counter: 60
num skipped: 5
{'include': ['DExcept', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)'], 'exclude': ['java.lang.Class<>.isPrimitive()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'java.lang.Runnable.run()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'java.lang.Runnable.run()', 'DStop', 'DStop')): [5, -11.797019869089127], (('DSubTree', 'DExcept', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'DExcept'), (False, True, True, False), ('DExcept', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'java.lang.Runnable.run()', 'DStop')): [45, -11.126874390989542]}

counter: 65
num skipped: 5
{'include': ['DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': ['java.lang.Math.addExact(long,long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -11.29623095318675]}

counter: 70
num skipped: 6
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()'], 'exclude': ['$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()')): [24, -13.404648780822754], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()', 'java.lang.Math.max(int,int)'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()', 'java.lang.Math.max(int,int)', 'DStop')): [6, -14.485247269272804], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()', 'DStop')): [20, -12.138044737279415]}

counter: 75
num skipped: 7
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [37, -0.19426948772161268], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [13, -0.9510597328480728]}

counter: 80
num skipped: 9
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'], 'exclude': ['java.io.FileOutputStream.FileOutputStream(java.io.File)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()')): [30, -5.836132287979126], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()', 'DStop')): [18, -4.603994413977489], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.Writer.write(java.lang.String)'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.io.OutputStreamWriter.flush()')): [1, -2.178145457059145], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.io.OutputStreamWriter.flush()'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.io.OutputStreamWriter.flush()', 'DStop')): [1, -4.201995485811494]}
