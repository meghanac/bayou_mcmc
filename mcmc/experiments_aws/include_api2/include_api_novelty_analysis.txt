data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/novel_1k_data_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 100


counter: 0
num skipped: 0
{'include': ['java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [50, -4.912864643963985]}

counter: 5
num skipped: 0
{'include': ['java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.toString()'), (False, False), ('java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()')): [1, -12.079016923904419], (('DSubTree', 'java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()'), (False, False, False), ('java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()', 'DStop')): [49, -2.601066902279854]}

counter: 10
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [15, -5.963700741529465], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [1, -13.925595194101334], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)'), (False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getTimeInMillis()')): [8, -11.070408821105957], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()'), (False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()')): [5, -7.392957448959351], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()'), (False, False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [7, -9.108511313796043], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()', 'java.util.Date.getTime()'), (False, False, False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()', 'java.util.Date.getTime()', 'DStop')): [1, -15.111519277095795], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.getTimeInMillis()', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop')): [13, -16.283091247081757]}

counter: 15
num skipped: 0
{'include': ['java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)'), (False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()')): [1, -18.47125267982483], (('DSubTree', 'java.io.InputStream.close()'), (False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)')): [10, -16.22488260269165], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)')): [5, -13.666938304901123], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'DStop')): [2, -16.572790503501892], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [9, -14.08032751083374], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()', 'DStop')): [8, -23.845677103847265], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()', 'DStop')): [4, -23.203094713389874], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.printStackTrace()', 'java.lang.StringBuilder.toString()', 'DStop')): [1, -21.306951977312565], (('DSubTree', 'java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [10, -18.274541467428207]}

counter: 20
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [6, -13.267045259475708], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [44, -3.5156404748559]}

counter: 25
num skipped: 0
{'include': ['java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [3, -7.961854934692383], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Integer.Integer(int)'), (False, False, False), ('java.util.List.get(int)', 'java.lang.Integer.Integer(int)', 'java.util.List.set(int,java.lang.Object)')): [37, -8.8707355260849], (('DSubTree', 'java.util.List.get(int)', 'java.util.List.get(int)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [4, -7.877777695655823], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Double.Double(java.lang.String)', 'java.util.List.get(int)'), (False, False, False, False), ('java.util.List.get(int)', 'java.lang.Double.Double(java.lang.String)', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [6, -12.037632942199707]}

counter: 30
num skipped: 0
{'include': ['java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])')): [21, -4.207677841186523], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])', 'DStop')): [16, -3.1025436222553253], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)', 'DStop')): [3, -6.04236064851284], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)', 'DStop')): [4, -12.146014990285039], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)', 'java.io.Reader.read(char[])'), (False, False, False, False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)', 'java.io.Reader.read(char[])', 'DStop')): [6, -8.579882651567459]}

counter: 35
num skipped: 0
{'include': ['java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()')): [4, -13.975549221038818], (('DSubTree', 'java.util.List<java.lang.Integer>.iterator()'), (False, False), ('java.util.List<java.lang.Integer>.iterator()', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)')): [1, -11.967843055725098], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'DStop')): [45, -4.236785631626844]}

counter: 40
num skipped: 0
{'include': ['java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)')): [38, -7.381433725357056], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'DStop')): [1, -6.227413654327393], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'java.lang.Integer.valueOf(java.lang.String)'), (False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop')): [1, -11.915586024522781], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'java.lang.Integer.valueOf(java.lang.String)')): [8, -7.841974973678589], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)')): [2, -11.632678985595703]}

counter: 45
num skipped: 0
{'include': ['javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTextField.JTextField()'), (False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)')): [2, -10.379414796829224], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JButton.JButton(java.lang.String)')): [7, -4.750929310917854], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JButton.JButton(java.lang.String)'), (False, False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JButton.JButton(java.lang.String)', 'DStop')): [41, -5.160999368876219]}

counter: 50
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [5, -3.959254503250122], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [15, -5.620794743299484], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [17, -8.330899775028229], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [2, -5.229066073894501], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [11, -6.58494046702981]}

counter: 55
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [20, -3.2418500781059265], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()')): [3, -9.21047842502594], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.Buffer.limit()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.Buffer.limit()', 'java.nio.ByteBuffer.array()')): [2, -8.6074800491333], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'DStop')): [20, -2.181276176124811], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.array()')): [5, -6.933974954299629]}

counter: 60
num skipped: 0
{'include': ['java.awt.Color.darker()', 'java.awt.Color.getGreen()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.darker()'), (False, False), ('java.awt.Color.darker()', 'java.awt.Color.getGreen()')): [2, -17.350978061556816], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.Color.getRed()'), (False, False, False), ('java.awt.Color.darker()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()')): [37, -10.202333820983768], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()'), (False, False, False, False), ('java.awt.Color.darker()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'DStop')): [7, -2.473210720694624], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()'), (False, False, False, False, False), ('java.awt.Color.darker()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'DStop')): [4, -5.886723707430065]}
