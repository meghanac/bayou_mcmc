data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/novel_1k_data_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 100


counter: 5
num skipped: 1
{'include': ['java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'], 'exclude': ['java.net.URI.resolve(java.net.URI)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getName()'), (False, False), ('java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)')): [10, -5.134109675884247], (('DSubTree', 'java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'), (False, False, False), ('java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'DStop')): [31, -2.099594828672707], (('DSubTree', 'java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False, False), ('java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [2, -9.783072784543037], (('DSubTree', 'java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'), (False, False, False), ('java.io.File.getName()', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [7, -9.08914303779602]}

counter: 10
num skipped: 1
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.util.Date.Date(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.util.Date.Date(java.lang.String)', 'DStop', 'DStop')): [50, -5.321656823158264]}

counter: 15
num skipped: 1
{'include': ['DBranch', '$NOT$java.lang.String.matches(java.lang.String)'], 'exclude': ['java.net.InetAddress.isAnyLocalAddress()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [50, -10.501108169555664]}

counter: 20
num skipped: 2
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [22, -8.470696210861206], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [1, -11.132197715342045], (('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)')): [20, -7.726698875427246], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.io.File.File(java.lang.String)')): [4, -16.393925845623016], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTime()')): [3, -17.704161882400513]}

counter: 25
num skipped: 2
{'include': ['javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)'], 'exclude': ['java.awt.Shape.getBounds2D()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getWidth()'), (False, False), ('javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)')): [1, -1.7065714299678802], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()'), (False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)')): [7, -3.839388072490692], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)', 'DStop')): [25, -4.185020554810762], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)'), (False, False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)', 'DStop')): [1, -11.77769129211083], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [1, -16.463735561119393], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [15, -17.99870874476619]}

counter: 30
num skipped: 2
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [21, -0.05677243118407205], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [29, -0.5352527499144273]}

counter: 35
num skipped: 2
{'include': ['java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch'], 'exclude': ['java.awt.geom.Point2D.getY()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [1, -22.873022079467773], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [22, -23.488769832765684], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [27, -20.712377960560843]}

counter: 40
num skipped: 4
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.lang.StringBuffer.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop', 'DStop')): [31, -5.701927236514166], (('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'DStop')): [19, -4.504366010427475]}

counter: 50
num skipped: 5
{'include': ['java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.util.Calendar.getTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [18, -11.409209787845612], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [8, -13.339862763881683], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Calendar.get(int)'), (False, False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Calendar.get(int)', 'DStop')): [6, -12.226263880729675], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Calendar.get(int)'), (False, False, False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Calendar.get(int)', 'DStop')): [14, -18.101992428302765], (('DSubTree', 'java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Calendar.get(int)'), (False, False, False, False, False, False, False), ('java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.set(int,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Calendar.get(int)', 'DStop')): [4, -22.361780405044556]}

counter: 55
num skipped: 5
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': ['java.nio.Buffer.position(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)')): [11, -9.673624038696289], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False), ('java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Integer.parseInt(java.lang.String)')): [12, -9.18993067741394], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [9, -7.246948681771755], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)')): [5, -5.1043882966041565], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()')): [3, -3.7524630427360535], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)')): [2, -9.163965702056885], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.valueOf(char[])'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.valueOf(char[])', 'java.lang.StringBuilder.append(java.lang.Object)')): [8, -7.798522174358368]}
