data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 500


counter: 0
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'), (False, False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'DStop')): [8, -9.571736575104296], (('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()')): [42, -5.808530330657959]}

counter: 5
num skipped: 0
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [42, -8.35279631614685], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'DStop')): [8, -8.57160996645689]}

counter: 10
num skipped: 0
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'), (False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()', 'DStop')): [43, -21.253568019455997], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'DStop')): [7, -15.28113389013697]}

counter: 15
num skipped: 0
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [50, -7.788151264190674]}

counter: 20
num skipped: 0
{'include': ['java.lang.String.toLowerCase()', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toLowerCase()', 'java.lang.StringBuilder.substring(int,int)'), (False, False, False), ('java.lang.String.toLowerCase()', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.String.equals(java.lang.Object)')): [8, -10.820300295948982], (('DSubTree', 'java.lang.String.toLowerCase()'), (False, False), ('java.lang.String.toLowerCase()', 'java.lang.StringBuilder.substring(int,int)')): [1, -11.515742257237434], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)'), (False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.String.toLowerCase()')): [8, -9.59891152381897], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.toLowerCase()')): [3, -6.89162415266037], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.toLowerCase()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.toLowerCase()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'DStop')): [30, -11.723288595676422]}

counter: 25
num skipped: 0
{'include': ['java.io.FileInputStream.read(byte[])', 'java.io.FileOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileOutputStream.close()')): [20, -20.671761989593506], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()', 'java.io.FileOutputStream.close()')): [4, -9.42097595334053], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()', 'java.io.File.delete()'), (False, False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()', 'java.io.File.delete()', 'java.io.FileOutputStream.close()')): [26, -9.404114671051502]}

counter: 30
num skipped: 0
{'include': ['java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)')): [16, -12.670146822929382], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)'), (False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [31, -6.186264738440514], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [3, -7.390410335734487]}

counter: 35
num skipped: 0
{'include': ['java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False, False), ('java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'DStop')): [5, -25.547436636989005], (('DSubTree', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'), (False, False, False), ('java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop')): [24, -18.594786402740283], (('DSubTree', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False), ('java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()')): [21, -12.367431044578552]}

counter: 40
num skipped: 0
{'include': ['java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FilterInputStream.read(byte[])'), (False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [35, -13.230759620666504], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop')): [15, -11.53658802807331]}

counter: 45
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()'), (False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)')): [2, -13.141875386238098], (('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [36, -9.898973729461432], (('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [12, -8.999553367495537]}

counter: 50
num skipped: 0
{'include': ['java.lang.Long.Long(long)', 'java.lang.String.getBytes(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.Long(long)'), (False, False), ('java.lang.Long.Long(long)', 'java.lang.String.getBytes(java.lang.String)')): [16, -11.9976806640625], (('DSubTree', 'java.lang.Long.Long(long)', 'java.lang.String.getBytes(java.lang.String)'), (False, False, False), ('java.lang.Long.Long(long)', 'java.lang.String.getBytes(java.lang.String)', 'DStop')): [34, -5.848565898835659]}

counter: 55
num skipped: 0
{'include': ['java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.size()'), (False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)')): [6, -14.889223098754883], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.util.List<java.lang.String>.get(int)'), (False, False, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [5, -13.247336775064468], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.valueOf(java.lang.Object)'), (False, False, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.valueOf(java.lang.Object)', 'DStop')): [7, -12.984988905489445], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.valueOf(java.lang.Object)'), (False, False, False, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.valueOf(java.lang.Object)', 'DStop')): [32, -10.23362198472023]}

counter: 60
num skipped: 0
{'include': ['java.io.InputStream.available()', 'java.nio.Buffer.position(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.nio.Buffer.position(int)')): [2, -5.745474100112915], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.Buffer.position(int)', 'java.io.InputStream.read(byte[])'), (False, False, False, False), ('java.io.InputStream.available()', 'java.nio.Buffer.position(int)', 'java.io.InputStream.read(byte[])', 'DStop')): [48, -5.285581782460213]}

counter: 65
num skipped: 0
{'include': ['java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'), (False, False), ('java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])')): [3, -7.50690895318985], (('DSubTree', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False, False), ('java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop')): [3, -4.2109463810920715], (('DSubTree', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False, False, False), ('java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop')): [44, -7.272701483219862]}

counter: 70
num skipped: 0
{'include': ['java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.iterator()'), (False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)')): [29, -11.9215726852417], (('DSubTree', 'java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)', 'java.io.File.File(java.lang.String)')): [3, -16.131764769554138], (('DSubTree', 'java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()'), (False, False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)')): [6, -7.508426666259766], (('DSubTree', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DLoop', 'java.util.ArrayList.ArrayList()'), (False, False, True, True, False, False, False), ('java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DStop', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)')): [4, -14.894104043021798], (('DSubTree', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DLoop', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, True, True, False, False, False, False), ('java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DStop', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'DStop')): [2, -13.445384031976573], (('DSubTree', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DLoop', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.size()'), (False, False, True, True, False, False, False, False, False), ('java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.lang.String.trim()', 'DStop', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.size()', 'DStop')): [6, -15.327742498368025]}

counter: 75
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)')): [29, -7.4793175011873245], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [21, -2.2530988603830338]}
