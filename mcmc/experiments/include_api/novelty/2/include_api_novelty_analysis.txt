data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)')): [14, -11.149521946907043], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'DStop')): [9, -11.611880247481167], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'java.lang.String.String(java.lang.String)'), (False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'java.lang.String.String(java.lang.String)', 'DStop')): [25, -11.566479403525591], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'java.lang.String.String(java.lang.String)'), (False, False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'java.lang.String.String(java.lang.String)', 'DStop')): [2, -12.286021545529366]}

counter: 1
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)')): [25, -24.88707673549652], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'DStop')): [25, -21.649543037696276]}

counter: 2
num skipped: 0
{'include': ['java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'DStop')): [1, -11.98095577582717], (('DSubTree', 'java.util.Map.values()'), (False, False), ('java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)')): [42, -5.481700289994478], (('DSubTree', 'java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.Map.values()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.util.List.add(java.lang.Object)')): [7, -8.066078471951187]}

counter: 3
num skipped: 0
{'include': ['java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)'), (False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)')): [22, -9.321336088702083], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)'), (False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [7, -10.96197247505188], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)', 'java.lang.Integer.intValue()'), (False, False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)', 'java.lang.Integer.intValue()', 'DStop')): [1, -11.734138160943985], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)'), (False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.util.Arrays.copyOf(byte[],int)', 'java.lang.Integer.intValue()')): [20, -8.93528127670288]}

counter: 4
num skipped: 0
{'include': ['java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStream.write(byte[])'), (False, False), ('java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.close()')): [24, -18.169633388519287], (('DSubTree', 'java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.close()'), (False, False, False), ('java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.close()', 'DStop')): [4, -18.814737379550934], (('DSubTree', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.FileInputStream.close()'), (False, False, False, False), ('java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.FileInputStream.close()', 'DStop')): [4, -13.834981955587864], (('DSubTree', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()'), (False, False, False, False), ('java.io.OutputStream.write(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()', 'DStop')): [2, -12.620083445683122], (('DSubTree', 'java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()'), (False, False, False, False, False, False), ('java.io.OutputStream.write(byte[])', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()', 'DStop')): [4, -17.792866498231888], (('DSubTree', 'java.io.OutputStream.write(byte[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()'), (False, False, False, False, False, False), ('java.io.OutputStream.write(byte[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.FileInputStream.close()', 'DStop')): [12, -19.28135085105896]}

counter: 5
num skipped: 0
{'include': ['java.awt.Graphics2D.getDeviceConfiguration()', 'java.awt.Graphics.dispose()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.getDeviceConfiguration()'), (False, False), ('java.awt.Graphics2D.getDeviceConfiguration()', 'java.awt.Graphics.dispose()')): [2, -17.572890758514404], (('DSubTree', 'java.awt.Graphics.dispose()'), (False, False), ('java.awt.Graphics.dispose()', 'java.awt.Graphics2D.getDeviceConfiguration()')): [3, -17.617098331451416], (('DSubTree', 'java.awt.Graphics.dispose()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'), (False, False, False), ('java.awt.Graphics.dispose()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.Graphics2D.getDeviceConfiguration()')): [8, -16.760498523712158], (('DSubTree', 'java.awt.Graphics.dispose()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.Graphics2D.getDeviceConfiguration()'), (False, False, False, False), ('java.awt.Graphics.dispose()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.Graphics2D.getDeviceConfiguration()', 'DStop')): [23, -16.265324763953686], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.Graphics.dispose()'), (False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.Graphics.dispose()', 'java.awt.Graphics2D.getDeviceConfiguration()')): [14, -11.606373641639948]}

counter: 6
num skipped: 0
{'include': ['java.lang.Character.toString(char)', 'java.lang.String.toUpperCase()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Character.toString(char)'), (False, False), ('java.lang.Character.toString(char)', 'java.lang.String.toUpperCase()')): [6, -4.4908571019768715], (('DSubTree', 'java.lang.Character.toString(char)', 'java.lang.String.toUpperCase()'), (False, False, False), ('java.lang.Character.toString(char)', 'java.lang.String.toUpperCase()', 'DStop')): [44, -5.740073226392269]}

counter: 7
num skipped: 0
{'include': ['java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.createNewFile()'), (False, False), ('java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)')): [3, -6.48797345161438], (('DSubTree', 'java.io.File.createNewFile()', 'java.io.File.getPath()'), (False, False, False), ('java.io.File.createNewFile()', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)')): [5, -7.71526312828064], (('DSubTree', 'java.io.File.createNewFile()', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False, False), ('java.io.File.createNewFile()', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [12, -9.520127188879997], (('DSubTree', 'java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False, False, False, False), ('java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [20, -12.513131382875144], (('DSubTree', 'java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False, False, False, False, False), ('java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [7, -19.415814151987433], (('DSubTree', 'java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False, False, False, False, False, False), ('java.io.File.createNewFile()', 'java.util.List<java.io.File>.add(java.io.File)', 'java.util.Collections.sort(java.util.List)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.io.File.getPath()', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [3, -18.149672240018845]}

counter: 8
num skipped: 0
{'include': ['java.awt.Graphics.getClipBounds()', 'java.awt.Rectangle.getLocation()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.getClipBounds()'), (False, False), ('java.awt.Graphics.getClipBounds()', 'java.awt.Rectangle.getLocation()')): [20, -15.621051877737045], (('DSubTree', 'java.awt.Graphics.getClipBounds()', 'java.awt.Rectangle.getLocation()'), (False, False, False), ('java.awt.Graphics.getClipBounds()', 'java.awt.Rectangle.getLocation()', 'DStop')): [30, -16.799617609009147]}

counter: 9
num skipped: 0
{'include': ['java.util.HashSet.HashSet()', 'java.util.Collection.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet.HashSet()'), (False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.addAll(java.util.Collection)')): [2, -4.990271180868149], (('DSubTree', 'java.util.HashSet.HashSet()', 'java.util.Collection.addAll(java.util.Collection)'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.addAll(java.util.Collection)', 'DStop')): [48, -7.056364236399531]}

counter: 10
num skipped: 0
{'include': ['javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.table.TableColumnModel.getColumn(int)'), (False, False), ('javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)')): [18, -14.795157670974731], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'javax.swing.table.TableColumnModel.getColumn(int)')): [11, -13.913299560546875], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False, False), ('javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.lang.String.valueOf(int)')): [11, -16.602915167808533], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False, False), ('javax.swing.table.TableColumnModel.getColumn(int)', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'DStop')): [10, -10.830925092101097]}

counter: 11
num skipped: 0
{'include': ['java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.ByteBuffer.getInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.ByteBuffer.getInt(int)'), (False, False, False), ('java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.ByteBuffer.getInt(int)', 'DStop')): [50, -9.664165747584775]}

counter: 12
num skipped: 0
{'include': ['java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.charset.Charset.forName(java.lang.String)'), (False, False), ('java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)')): [28, -12.30284945294261], (('DSubTree', 'java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False, False), ('java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)')): [22, -14.82506375014782]}

counter: 13
num skipped: 0
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()')): [1, -17.317994117736816], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [6, -12.853085279464722], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [28, -13.041342090349644], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [15, -15.167813992244191]}

counter: 14
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'DStop')): [7, -4.143483519554138], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.length()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.length()', 'DStop')): [25, -8.508443623781204], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.length()', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.String.length()', 'java.io.Writer.write(java.lang.String)', 'DStop')): [2, -8.19424857199192], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.length()', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.String.length()', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()', 'DStop')): [16, -11.800812751054764]}

counter: 15
num skipped: 0
{'include': ['java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)')): [2, -22.64299762248993], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.util.Calendar.getTime()'), (False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.util.Calendar.getTime()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)')): [12, -22.140901550650597], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.util.Calendar.getTime()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.util.Calendar.getTime()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)', 'DStop')): [25, -24.00678598129889], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<Tau_T>.getName()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<Tau_T>.getName()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)', 'DStop')): [7, -23.249094355254783], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.io.StringWriter.StringWriter()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.io.StringWriter.StringWriter()', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)', 'DStop')): [4, -17.466747898608446]}

counter: 16
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.get(int)', 'java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()')): [4, -21.16778039932251], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()'), (False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()', 'DStop')): [2, -20.273258378729224], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])'), (False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()')): [2, -20.001802533864975], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()'), (False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()', 'DStop')): [16, -18.409465240314603], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()'), (False, False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()', 'DStop')): [3, -26.11207797937095], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()'), (False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()', 'DStop')): [6, -24.48827375099063], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()'), (False, False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.io.BufferedWriter.close()', 'DStop')): [17, -25.088191523682326]}

counter: 17
num skipped: 0
{'include': ['java.lang.Integer.intValue()', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.intValue()'), (False, False), ('java.lang.Integer.intValue()', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)')): [10, -16.992435455322266], (('DSubTree', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'), (False, False), ('java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Integer.intValue()')): [4, -14.808079242706299], (('DSubTree', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)'), (False, False, False), ('java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)', 'java.lang.Integer.intValue()')): [34, -10.905885577201843], (('DSubTree', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)', 'java.lang.Integer.intValue()'), (False, False, False, False), ('java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)', 'java.lang.Integer.intValue()', 'java.lang.Math.abs(int)')): [1, -12.727972716093063], (('DSubTree', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)', 'java.lang.Math.abs(int)'), (False, False, False, False), ('java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Math.abs(int)', 'java.lang.Math.abs(int)', 'java.lang.Integer.intValue()')): [1, -10.83358620107174]}

counter: 18
num skipped: 0
{'include': ['java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.parseLong(java.lang.String)'), (False, False), ('java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()')): [39, -3.052540901117027], (('DSubTree', 'java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()'), (False, False, False), ('java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()', 'DStop')): [7, -3.1919299960136414], (('DSubTree', 'java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()', 'java.util.Collections.emptyList()'), (False, False, False, False), ('java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()', 'java.util.Collections.emptyList()', 'DStop')): [4, -13.933423563838005]}

counter: 19
num skipped: 0
{'include': ['java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Float.parseFloat(java.lang.String)'), (False, False), ('java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)')): [18, -14.571937084197998], (('DSubTree', 'java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False), ('java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)', 'DStop')): [4, -13.460346460342407], (('DSubTree', 'java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)')): [1, -16.592472791671753], (('DSubTree', 'java.util.Calendar.getInstance()', 'java.lang.Float.parseFloat(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.getInstance()', 'java.lang.Float.parseFloat(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)')): [2, -17.476818323135376], (('DSubTree', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)')): [4, -17.51729826629162], (('DSubTree', 'java.util.Calendar.getInstance()', 'java.lang.Float.parseFloat(java.lang.String)'), (False, False, False), ('java.util.Calendar.getInstance()', 'java.lang.Float.parseFloat(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)')): [9, -7.711208268534392], (('DSubTree', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False), ('java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.Float.parseFloat(java.lang.String)')): [12, -4.750971332192421]}

counter: 20
num skipped: 0
{'include': ['java.util.regex.Matcher.group(int)', 'java.net.URI.getPath()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.net.URI.getPath()')): [1, -24.41425585746765], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.net.URI.getPath()'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.net.URI.getPath()', 'java.lang.StringBuilder.append(java.lang.Object)')): [5, -22.19279909133911], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.lang.StringBuilder.append(char)', 'java.net.URI.URI(java.lang.String)', 'java.net.URI.getPath()'), (False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.StringBuilder.append(char)', 'java.net.URI.URI(java.lang.String)', 'java.net.URI.getPath()', 'java.lang.StringBuilder.append(java.lang.Object)')): [44, -17.932152211666107]}

counter: 21
num skipped: 0
{'include': ['java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [4, -8.736783504486084], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [1, -9.189533472061157], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop')): [7, -5.270300507545471], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop')): [3, -9.62876333296299], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()')): [1, -14.090997457504272], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.booleanValue()'), (False, False, False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.booleanValue()', 'java.util.ArrayList<Tau_E>.ArrayList()')): [4, -19.86759662628174], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.booleanValue()'), (False, False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.booleanValue()', 'java.util.ArrayList<Tau_E>.ArrayList()')): [19, -9.092073872685432], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.booleanValue()')): [11, -1.7369256764650345]}

counter: 22
num skipped: 0
{'include': ['java.net.URL.toExternalForm()', 'java.util.regex.Matcher.matches()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.toExternalForm()'), (False, False), ('java.net.URL.toExternalForm()', 'java.util.regex.Matcher.matches()')): [4, -9.149756789207458], (('DSubTree', 'java.net.URL.toExternalForm()', 'java.util.regex.Matcher.matches()'), (False, False, False), ('java.net.URL.toExternalForm()', 'java.util.regex.Matcher.matches()', 'DStop')): [46, -10.669641338288784]}

counter: 23
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.text.DateFormat.format(java.util.Date)')): [5, -9.867359736934304], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [3, -12.25576464831829], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [14, -4.11601360142231], (('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.DateFormat.format(java.util.Date)')): [3, -6.224627643823624], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)')): [22, -6.245867013931274], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [3, -5.36738933250308]}

counter: 24
num skipped: 0
{'include': ['java.lang.String.length()', 'java.util.Arrays.copyOf(T[],int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.length()'), (False, False), ('java.lang.String.length()', 'java.util.Arrays.copyOf(T[],int)')): [38, -9.659089455381036], (('DSubTree', 'java.lang.String.length()', 'java.lang.String.toLowerCase()'), (False, False, False), ('java.lang.String.length()', 'java.lang.String.toLowerCase()', 'java.util.Arrays.copyOf(T[],int)')): [3, -10.188384030014277], (('DSubTree', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False), ('java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.equals(java.lang.Object)', 'java.util.Arrays.copyOf(T[],int)')): [2, -10.837950766086578], (('DSubTree', 'java.lang.String.length()', 'java.lang.String.charAt(int)'), (False, False, False), ('java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.util.Arrays.copyOf(T[],int)')): [1, -8.499260127544403], (('DSubTree', 'java.lang.String.length()', 'java.util.Arrays.copyOf(T[],int)'), (False, False, False), ('java.lang.String.length()', 'java.util.Arrays.copyOf(T[],int)', 'DStop')): [6, -5.4321444015949965]}

counter: 25
num skipped: 0
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [14, -6.472126364707947], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'DStop')): [19, -8.28503568470478], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.io.InputStream.close()'), (False, False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.io.InputStream.close()', 'DStop')): [4, -5.0123252514749765], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.lang.String.startsWith(java.lang.String)', 'DStop')): [13, -9.082196466624737]}

counter: 26
num skipped: 0
{'include': ['java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FilterInputStream.read(byte[])'), (False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [5, -16.765583038330078], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop')): [45, -13.444234311580658]}

counter: 27
num skipped: 0
{'include': ['java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Matcher.find()'), (False, False), ('java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)')): [7, -11.986425876617432], (('DSubTree', 'java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.List<java.lang.String>.clear()')): [4, -19.064156532287598], (('DSubTree', 'java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.regex.Matcher.find()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [14, -12.503415882587433], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.regex.Matcher.find()'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.regex.Matcher.find()', 'DStop')): [15, -12.80337993055582], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.regex.Matcher.find()')): [1, -10.369804382324219], (('DSubTree', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False), ('java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [9, -17.423372514545918]}

counter: 28
num skipped: 0
{'include': ['java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)')): [12, -6.5190427005290985], (('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)', 'DStop')): [4, -2.54898589104414], (('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [1, -7.391123354434967], (('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)', 'java.lang.Throwable.printStackTrace()')): [33, -6.080157518386841]}

counter: 29
num skipped: 0
{'include': ['java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [5, -9.452925622463226], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [1, -9.193392038345337], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [5, -9.816214799880981], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [4, -10.538065448403358], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'), (False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DStop')): [5, -14.404848899692297], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()'), (False, False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()', 'DStop')): [1, -14.495034459978342], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()'), (False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()', 'DStop')): [4, -11.305379233788699], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()'), (False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()', 'DStop')): [20, -10.655963020399213], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'), (False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()')): [5, -5.942730754613876]}

counter: 30
num skipped: 0
{'include': ['java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.equals(java.lang.Object)'), (False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [15, -6.377069473266602], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [1, -10.417800545692444], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [4, -11.78958423808217], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [1, -12.310824036598206], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [5, -8.855344876646996], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [4, -7.3421986773610115], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [3, -11.03499048948288], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [1, -11.598685085773468], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [3, -9.939531564712524], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [13, -6.689384371042252]}

counter: 31
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()'), (False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()')): [3, -17.606101512908936], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()'), (False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()', 'DStop')): [7, -19.4255333468318], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [10, -8.79245764366351], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [16, -12.415466373669915], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [7, -11.582722837629262], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getClickCount()')): [6, -12.351629458367825], (('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()')): [1, -13.318468570709229]}

counter: 32
num skipped: 0
{'include': ['java.sql.PreparedStatement.executeUpdate()', 'java.lang.String.valueOf(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.executeUpdate()'), (False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.lang.String.valueOf(java.lang.Object)')): [1, -12.601337909698486], (('DSubTree', 'java.lang.String.valueOf(java.lang.Object)'), (False, False), ('java.lang.String.valueOf(java.lang.Object)', 'java.sql.PreparedStatement.executeUpdate()')): [14, -12.671906471252441], (('DSubTree', 'java.lang.String.valueOf(java.lang.Object)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False), ('java.lang.String.valueOf(java.lang.Object)', 'java.sql.PreparedStatement.executeUpdate()', 'DStop')): [35, -9.401016641408205]}

counter: 33
num skipped: 0
{'include': ['java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'DStop')): [14, -10.113128965720534], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'DStop')): [3, -7.969715455546975], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [1, -11.373421788215637], (('DSubTree', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()'), (False, False, False), ('java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [1, -10.16703724861145], (('DSubTree', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'DStop')): [31, -9.972314762882888]}

counter: 34
num skipped: 0
{'include': ['java.lang.String.indexOf(int)', 'java.lang.CharSequence.length()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(int)'), (False, False), ('java.lang.String.indexOf(int)', 'java.lang.CharSequence.length()')): [50, -3.0221763849258423]}

counter: 35
num skipped: 0
{'include': ['java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Timestamp.Timestamp(long)'), (False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)')): [3, -10.22325885295868], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)'), (False, False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'DStop')): [1, -13.688204787671566], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)'), (False, False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)')): [46, -16.0600066781044]}

counter: 36
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.fillInStackTrace()'), (False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)')): [1, -12.888202667236328], (('DSubTree', 'java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'DStop')): [1, -13.371099174022675], (('DSubTree', 'java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Thread.currentThread()')): [48, -20.40979766845703]}

counter: 37
num skipped: 0
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [12, -12.558716110885143], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [38, -10.77713739220053]}

counter: 38
num skipped: 0
{'include': ['java.util.Random.nextBytes(byte[])', 'java.util.Random.nextInt()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.Random.Random()'), (False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [2, -14.96025276184082], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Random.Random()'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [2, -15.397973775863647], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [1, -16.885934352874756], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.util.Random.nextBytes(byte[])'), (False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.util.Random.nextBytes(byte[])', 'java.util.Random.nextInt()')): [1, -19.96625328063965], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.io.InputStream.read(byte[])'), (False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.io.InputStream.read(byte[])', 'java.util.Random.nextInt()')): [7, -21.197375655174255], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.io.InputStream.read(byte[])'), (False, False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.io.InputStream.read(byte[])', 'java.util.Random.nextInt()')): [2, -24.162981510162354], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()'), (False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [2, -22.377267003059387], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.util.Random.Random()'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.Math.min(int,int)', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [7, -15.319583415985107], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Random.Random()'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Random.Random()', 'java.util.Random.nextInt()')): [4, -16.495213508605957], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Random.Random()', 'java.util.Random.nextInt()'), (False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Random.Random()', 'java.util.Random.nextInt()', 'java.lang.Math.abs(int)')): [22, -18.197890758514404]}
