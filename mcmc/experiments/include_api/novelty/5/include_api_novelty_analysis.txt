data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 35


counter: 0
num skipped: 0
{'include': ['java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)')): [30, -13.70820689201355], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()')): [2, -13.089155077934265], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()')): [18, -12.81504511833191]}

counter: 1
num skipped: 0
{'include': ['java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)')): [10, -10.579298496246338], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [7, -10.919378940947354], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)')): [1, -6.396893881261349], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [32, -6.744672786444426]}

counter: 2
num skipped: 0
{'include': ['java.util.Date.Date()', 'java.util.Calendar.set(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date()'), (False, False), ('java.util.Date.Date()', 'java.util.Calendar.set(int,int)')): [9, -12.313931226730347], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.set(int,int)'), (False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [4, -13.716622412204742], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)'), (False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [20, -9.007334869354963], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.getTime()'), (False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)')): [5, -10.799790143966675], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)'), (False, False, False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [2, -9.820348510053009], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)'), (False, False, False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [1, -9.748200602829456], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)'), (False, False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getTime()', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [9, -4.689433086197823]}

counter: 3
num skipped: 0
{'include': ['java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.valueOf(java.lang.String)'), (False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)')): [23, -8.224869146943092], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [3, -8.539837166666985], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.doubleValue()'), (False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.util.List<java.lang.Double>.add(java.lang.Double)')): [10, -9.86121267080307], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [3, -11.123104813857935], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Number.doubleValue()', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.lang.Number.doubleValue()', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [11, -9.759206269402057]}

counter: 4
num skipped: 0
{'include': ['java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.readInt()'), (False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()')): [5, -22.243820190429688], (('DSubTree', 'java.io.ObjectInputStream.readObject()'), (False, False), ('java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()')): [15, -17.229121685028076], (('DSubTree', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()'), (False, False, False), ('java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()', 'DStop')): [9, -17.485573530197144], (('DSubTree', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()'), (False, False, False), ('java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()', 'java.util.List<java.lang.String>.get(int)')): [21, -16.709226608276367]}

counter: 5
num skipped: 0
{'include': ['java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.renameTo(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)'), (False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.renameTo(java.io.File)')): [1, -9.014528751373291], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.renameTo(java.io.File)')): [2, -15.386775732040405], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [6, -8.27565212547779], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getParentFile()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getParentFile()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [5, -11.091880202293396], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [1, -11.399389162659645], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.exists()', 'java.io.File.renameTo(java.io.File)')): [2, -8.953843414783478], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.exists()'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.exists()', 'java.io.File.renameTo(java.io.File)')): [14, -8.874658331274986], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.getName()', 'java.io.File.exists()'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.getName()', 'java.io.File.exists()', 'java.io.File.renameTo(java.io.File)')): [5, -8.776547256857157], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [1, -14.666784048080444], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [1, -12.98674476146698], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DStop')): [2, -15.427707001566887], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DStop')): [1, -9.989210844039917], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.renameTo(java.io.File)', 'DStop')): [4, -7.663137525320053], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.lang.String)', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DStop')): [3, -7.429834678769112], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.lang.String)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.getName()', 'java.io.File.File(java.lang.String)', 'java.io.File.renameTo(java.io.File)')): [2, -6.641944833099842]}

counter: 6
num skipped: 0
{'include': ['java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.getTime()'), (False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)')): [1, -17.56645965576172], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'DStop')): [16, -11.021298006176949], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.toString()'), (False, False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.toString()', 'DStop')): [7, -14.989405617117882], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.toString()')): [5, -16.328695848584175], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)')): [6, -14.17967577278614], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.get(int)')): [3, -15.536522455513477], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)')): [12, -10.144129633903503]}

counter: 7
num skipped: 0
{'include': ['java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(java.lang.String)'), (False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.append(char)')): [50, -13.063979983329773]}

counter: 8
num skipped: 0
{'include': ['java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [11, -9.731770277023315], (('DSubTree', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [8, -9.536292544900789], (('DSubTree', 'java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False, False), ('java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [31, -12.981981553137302]}

counter: 9
num skipped: 0
{'include': ['javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)')): [17, -8.716202974319458], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)')): [9, -7.49594756308943], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)'), (False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [16, -7.916598716750741], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'), (False, False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'DStop')): [8, -7.766343001741916]}

counter: 10
num skipped: 0
{'include': ['java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.getName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getName()'), (False, False), ('java.io.File.getName()', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [5, -10.32820937037468], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.getName()')): [7, -10.333213329315186], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.getName()'), (False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.getName()', 'DStop')): [6, -8.631125688552856], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.File.getName()'), (False, False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.File.getName()', 'DStop')): [3, -12.958156079053879], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.File.getName()'), (False, False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.File.getName()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [2, -16.234017476439476], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.io.File.getName()'), (False, False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.io.File.getName()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [24, -15.222064018249512], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.util.regex.Matcher.group()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.io.File.getName()'), (False, False, False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.util.regex.Matcher.group()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.io.File.getName()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [1, -21.55238699913025], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.util.regex.Matcher.group()', 'java.io.File.getName()'), (False, False, False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.util.regex.Matcher.group()', 'java.io.File.getName()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [2, -18.63711714744568]}

counter: 11
num skipped: 0
{'include': ['java.lang.Byte.valueOf(byte)', 'java.lang.Boolean.valueOf(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Byte.valueOf(byte)'), (False, False), ('java.lang.Byte.valueOf(byte)', 'java.lang.Boolean.valueOf(boolean)')): [7, -8.609316647052765], (('DSubTree', 'java.lang.Boolean.valueOf(boolean)'), (False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Byte.valueOf(byte)')): [1, -7.056781500577927], (('DSubTree', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Byte.valueOf(byte)'), (False, False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Byte.valueOf(byte)', 'DStop')): [42, -5.223520785570145]}

counter: 12
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.clear()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.clear()')): [1, -5.92173358798027], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.clear()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [4, -7.205489963293076], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()'), (False, False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [2, -5.8194151520729065], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [37, -9.27437087893486], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'javax.swing.text.JTextComponent.getText()'), (False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'javax.swing.text.JTextComponent.getText()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [6, -8.398904845118523]}

counter: 13
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()')): [26, -17.60327672958374], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()', 'java.lang.Math.min(double,double)'), (False, False, False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()', 'java.lang.Math.min(double,double)', 'DStop')): [1, -23.398548658005893], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()'), (False, False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()', 'DStop')): [23, -16.81671767262742]}

counter: 14
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'), (False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)')): [8, -13.584560871124268], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)')): [1, -9.133653819561005], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [4, -8.585774689912796], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [9, -15.63081843033433], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [13, -8.440454993396997], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [15, -14.041392771527171]}

counter: 15
num skipped: 0
{'include': ['java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getPath()'), (False, False), ('java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [36, -4.167381942272186], (('DSubTree', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False), ('java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [14, -3.5662512965500355]}

counter: 16
num skipped: 0
{'include': ['java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.OutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.OutputStream.close()')): [2, -7.347948849201202], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.OutputStream.close()'), (False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.OutputStream.close()', 'DStop')): [15, -8.249429047107697], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.lang.String.String(byte[],int,int)', 'java.io.OutputStream.close()'), (False, False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.lang.String.String(byte[],int,int)', 'java.io.OutputStream.close()', 'DStop')): [16, -12.040429443120956], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.lang.String.String(byte[],int,int)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.lang.String.String(byte[],int,int)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()', 'DStop')): [17, -9.526249766349792]}

counter: 17
num skipped: 0
{'include': ['java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()'), (False, False, False), ('java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()', 'DStop')): [20, -10.520638728514314], (('DSubTree', 'java.io.StringWriter.toString()'), (False, False), ('java.io.StringWriter.toString()', '$NOT$java.lang.String.isEmpty()')): [30, -4.177131652832031]}

counter: 18
num skipped: 0
{'include': ['java.net.URI.getPath()', 'java.util.regex.Matcher.group(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URI.getPath()'), (False, False), ('java.net.URI.getPath()', 'java.util.regex.Matcher.group(int)')): [1, -17.487736225128174], (('DSubTree', 'java.net.URI.getPath()', 'java.util.regex.Matcher.matches()'), (False, False, False), ('java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)')): [12, -10.934513494372368], (('DSubTree', 'java.net.URI.getPath()', 'java.lang.String.charAt(int)', 'java.util.regex.Matcher.matches()'), (False, False, False, False), ('java.net.URI.getPath()', 'java.lang.String.charAt(int)', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)')): [2, -13.423071086406708], (('DSubTree', 'java.net.URI.getPath()', 'java.lang.String.charAt(int)'), (False, False, False), ('java.net.URI.getPath()', 'java.lang.String.charAt(int)', 'java.util.regex.Matcher.group(int)')): [11, -13.166749507188797], (('DSubTree', 'java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)'), (False, False, False, False), ('java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DStop')): [12, -8.058147072792053], (('DSubTree', 'java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)'), (False, False, False, False, False, False), ('java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'DStop')): [10, -11.026017934083939], (('DSubTree', 'java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)'), (False, False, False, False, False), ('java.net.URI.getPath()', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'DStop')): [2, -8.330998186022043]}

counter: 19
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [3, -20.682021141052246], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [6, -16.313047170639038], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [16, -17.180583000183105], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [25, -19.014966309070587]}

counter: 20
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [16, -15.737035274505615], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.util.List<java.lang.Object>.add(java.lang.Object)')): [3, -20.73681616783142], (('DSubTree', 'java.awt.geom.RectangularShape.getX()'), (False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)')): [18, -7.2264968156814575], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [13, -8.427646488067694]}

counter: 21
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newInstance()', '$NOT$java.io.File.exists()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', '$NOT$java.io.File.exists()')): [7, -6.01163125038147], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', '$NOT$java.io.File.exists()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', '$NOT$java.io.File.exists()', 'DStop')): [27, -6.744454137980938], (('DSubTree', '$NOT$java.io.File.exists()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False, False), ('$NOT$java.io.File.exists()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'DStop')): [15, -5.973237693309784], (('DSubTree', '$NOT$java.io.File.exists()'), (False, False), ('$NOT$java.io.File.exists()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()')): [1, -2.966334018856287]}

counter: 22
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)')): [5, -25.444289207458496], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'DLoop', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int,int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'DLoop', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [5, -31.640713095664978], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int,int)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [1, -39.160599142313], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Integer>.get(int)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [27, -32.2240409180522], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'java.util.ArrayList.add(java.lang.Object)', 'DStop')): [6, -24.55289426445961], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'DStop')): [1, -19.652710899710655], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.Random.nextInt(int)', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [5, -23.94161555916071]}

counter: 23
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [48, -9.340687036514282], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [2, -9.815739840269089]}

counter: 24
num skipped: 0
{'include': ['java.util.Date.compareTo(java.util.Date)', 'java.lang.String.compareTo(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.compareTo(java.util.Date)', 'java.lang.String.compareTo(java.lang.String)'), (False, False, False), ('java.util.Date.compareTo(java.util.Date)', 'java.lang.String.compareTo(java.lang.String)', 'DStop')): [1, -9.006107953377068], (('DSubTree', 'java.util.Date.compareTo(java.util.Date)', 'java.lang.String.compareTo(java.lang.String)', 'java.sql.Connection.close()'), (False, False, False, False), ('java.util.Date.compareTo(java.util.Date)', 'java.lang.String.compareTo(java.lang.String)', 'java.sql.Connection.close()', 'DStop')): [49, -8.540949053596705]}

counter: 25
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.lang.Long.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.lang.Long.intValue()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.lang.Long.intValue()', 'DStop')): [50, -5.761553689837456]}

counter: 26
num skipped: 0
{'include': ['javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False), ('javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [4, -22.360562324523926], (('DSubTree', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False), ('javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'DStop')): [4, -18.043273347662762], (('DSubTree', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Thread.yield()'), (False, False, False, False), ('javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Thread.yield()', 'DStop')): [42, -16.850366711616516]}

counter: 27
num skipped: 0
{'include': ['$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.set(int,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.set(int,java.lang.String)')): [27, -7.562198638916016], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()'), (False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.set(int,java.lang.String)')): [3, -5.217893421649933], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.set(int,java.lang.String)'), (False, False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.set(int,java.lang.String)', 'DStop')): [20, -6.759149923920631]}

counter: 28
num skipped: 0
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.Runnable.run()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'), (False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.Runnable.run()')): [32, -5.409958720207214], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.Runnable.run()'), (False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.Runnable.run()', 'DStop')): [18, -2.2916190531104803]}

counter: 29
num skipped: 0
{'include': ['java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [6, -13.528260707855225], (('DSubTree', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [14, -14.558284759201342], (('DSubTree', 'java.util.List.get(int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.util.List.get(int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.util.List.set(int,java.lang.Object)')): [13, -9.843821488320827], (('DSubTree', 'java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False), ('java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.util.List.set(int,java.lang.Object)')): [2, -8.740974634885788], (('DSubTree', 'java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'javax.swing.table.TableColumnModel.getColumnCount()'), (False, False, False, False), ('java.util.List.get(int)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'javax.swing.table.TableColumnModel.getColumnCount()', 'java.util.List.set(int,java.lang.Object)')): [15, -10.753227658569813]}

counter: 30
num skipped: 0
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [10, -4.359863460063934], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'DStop')): [40, -5.8345319628715515]}

counter: 31
num skipped: 0
{'include': ['java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.currentTimeMillis()'), (False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)')): [8, -8.802218914031982], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'DStop')): [20, -9.671227436512709], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()'), (False, False, False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.matches()', 'DStop')): [3, -18.49435274489224], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'), (False, False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DStop')): [17, -14.699933350086212], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [2, -14.023581981658936]}

counter: 32
num skipped: 0
{'include': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [10, -11.19043779373169], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.net.URL.URL(java.lang.String)'), (False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.net.URL.URL(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [1, -15.065955400466919], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [2, -12.46014779806137], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.close()'), (False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.close()', 'DStop')): [4, -10.035655952990055], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.FileInputStream.close()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.FileInputStream.close()', 'DStop')): [33, -5.983574092388153]}

counter: 33
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [3, -19.002099128090777], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [12, -15.649841122329235], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.geom.Point2D.getX()', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.geom.Point2D.getX()', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [35, -9.730627765879035]}

counter: 34
num skipped: 0
{'include': ['java.awt.image.BufferedImage.setRGB(int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.setRGB(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.setRGB(int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [4, -18.688372135162354], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [19, -18.30433750152588], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [27, -10.878509402275085]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.7071428571428573, 'relevant_additions': 0.5666666666666667, 'meets_constraints': 1.0000000000000002, 'in_set': 0.08571428571428572, 'test_set_relevant_additions': 0.5561904761904761}
