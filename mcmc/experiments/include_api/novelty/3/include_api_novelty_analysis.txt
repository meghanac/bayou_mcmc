data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 61


counter: 0
num skipped: 0
{'include': ['java.util.Scanner.hasNextLine()', 'java.lang.String.isEmpty()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.isEmpty()')): [8, -19.457798957824707], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.isEmpty()'), (False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.isEmpty()', 'DStop')): [17, -14.802834928035736], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.isEmpty()'), (False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.isEmpty()', 'DStop')): [19, -18.12406697869301], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.isEmpty()')): [4, -16.25483065843582], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.isEmpty()'), (False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.isEmpty()', 'java.lang.String.String(byte[],java.lang.String)')): [2, -17.545890629291534]}

counter: 1
num skipped: 0
{'include': ['java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)')): [2, -24.830686569213867], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'DLoop', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'DLoop', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'DStop', 'DStop')): [1, -36.18652927875519], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(double)', 'DLoop', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'DLoop'), (False, False, False, False, False, True, True, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(double)', 'DLoop', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'DStop', 'DStop')): [17, -34.7075169980526], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(double)', 'DStop')): [1, -22.507898092269897], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.String.valueOf(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'DStop')): [1, -22.438364505767822], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.System.currentTimeMillis()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.System.currentTimeMillis()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'DStop')): [16, -22.039454460144043], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'DStop')): [6, -18.247074127197266], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'DStop')): [1, -14.26755142211914], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.toString()', 'DStop')): [2, -17.52737512998283], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [3, -18.843404477462173]}

counter: 2
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()')): [7, -15.963644027709961], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()')): [3, -14.214487910270691], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.File.toURI()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.File.toURI()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()')): [23, -14.821110010147095], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()')): [1, -17.98880322277546], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.toString()'), (False, False, False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.toString()', 'DStop')): [3, -19.710785694391234], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.toString()'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.toString()', 'DStop')): [12, -18.652670547366142], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.StringWriter()', 'java.io.StringWriter.toString()'), (False, False, False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.PrintWriter.flush()', 'java.io.StringWriter.StringWriter()', 'java.io.StringWriter.toString()', 'DStop')): [1, -21.13418574631214]}

counter: 3
num skipped: 0
{'include': ['java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()'), (False, False, False), ('java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()', 'DStop')): [5, -14.594473026692867], (('DSubTree', 'java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.getStackTrace()'), (False, False, False), ('java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.getStackTrace()', 'DStop')): [45, -12.104012582451105]}

counter: 4
num skipped: 0
{'include': ['java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(java.lang.String)'), (False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()')): [13, -7.8181590139865875], (('DSubTree', 'java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [37, -6.954602134646848]}

counter: 5
num skipped: 0
{'include': ['java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.SecureRandom()'), (False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()')): [31, -7.896604299545288], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'DStop')): [19, -7.593016066006385]}

counter: 6
num skipped: 0
{'include': ['javax.swing.JTree.setRootVisible(boolean)', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTree.setRootVisible(boolean)', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)'), (False, False, False), ('javax.swing.JTree.setRootVisible(boolean)', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)', 'DStop')): [1, -41.0079133445397], (('DSubTree', 'javax.swing.JTree.setRootVisible(boolean)', 'java.lang.Thread.join()', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)'), (False, False, False, False), ('javax.swing.JTree.setRootVisible(boolean)', 'java.lang.Thread.join()', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)', 'DStop')): [42, -29.529336243402213], (('DSubTree', 'javax.swing.JTree.setRootVisible(boolean)', 'java.lang.Thread.join()'), (False, False, False), ('javax.swing.JTree.setRootVisible(boolean)', 'java.lang.Thread.join()', 'javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)')): [7, -27.547961950302124]}

counter: 7
num skipped: 0
{'include': ['java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(long,long)'), (False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)')): [23, -8.111993074417114], (('DSubTree', 'java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)'), (False, False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)', 'DStop')): [27, -11.150659248232841]}

counter: 8
num skipped: 0
{'include': ['java.io.File.toURI()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.toURI()'), (False, False), ('java.io.File.toURI()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)')): [10, -23.566163063049316], (('DSubTree', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'), (False, False), ('java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.io.File.toURI()')): [5, -22.242579460144043], (('DSubTree', 'java.io.File.toURI()', 'java.lang.Class.forName(java.lang.String)'), (False, False, False), ('java.io.File.toURI()', 'java.lang.Class.forName(java.lang.String)', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)')): [8, -22.395613193511963], (('DSubTree', 'java.io.File.toURI()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Class.forName(java.lang.String)'), (False, False, False, False), ('java.io.File.toURI()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)')): [2, -20.318361163139343], (('DSubTree', 'java.io.File.toURI()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.io.File.getPath()'), (False, False, False, False, False), ('java.io.File.toURI()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.io.File.getPath()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)')): [25, -23.529572367668152]}

counter: 9
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [21, -10.169006586074829], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()')): [5, -11.04201364517212], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.Buffer.limit()')): [17, -10.126220524311066], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()', 'java.nio.ByteBuffer.allocate(int)')): [2, -9.862260788679123], (('DSubTree', 'java.nio.Buffer.limit()', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.Buffer.limit()', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [3, -14.31045150756836], (('DSubTree', 'java.nio.Buffer.limit()', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False, False), ('java.nio.Buffer.limit()', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [2, -11.476863354444504]}

counter: 10
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [5, -8.09138560295105], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.String.getBytes()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.array()')): [13, -9.699595272541046], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'DStop')): [8, -5.893809258937836], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()', 'DStop')): [24, -4.351248886436224]}

counter: 11
num skipped: 0
{'include': ['javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)')): [7, -7.7478474378585815], (('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [21, -9.343948796391487], (('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [1, -8.297357188537717], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False, False), ('java.lang.StringBuilder.append(java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop')): [21, -16.409665314480662]}

counter: 12
num skipped: 0
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.getTime()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.getTime()')): [1, -15.54278826713562], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.getTime()', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Date.getTime()', 'java.sql.Timestamp.Timestamp(long)', 'DStop')): [9, -17.00023517012596], (('DSubTree', 'java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False, False), ('java.util.Date.getTime()', 'java.util.Calendar.setTimeInMillis(long)', 'java.sql.Timestamp.Timestamp(long)', 'DStop')): [40, -17.417083889245987]}

counter: 13
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()')): [6, -9.359533071517944], (('DSubTree', 'java.lang.Throwable.fillInStackTrace()'), (False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)')): [8, -9.956494808197021], (('DSubTree', 'java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'DStop')): [33, -6.127108134329319], (('DSubTree', 'java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.Throwable.fillInStackTrace()', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.StringBuffer.toString()', 'DStop')): [3, -10.147901793941855]}

counter: 14
num skipped: 0
{'include': ['java.util.List.set(int,java.lang.Object)', 'java.util.List.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.set(int,java.lang.Object)', 'java.util.List.get(int)'), (False, False, False), ('java.util.List.set(int,java.lang.Object)', 'java.util.List.get(int)', 'DStop')): [4, -18.34996649157256], (('DSubTree', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [32, -18.038354374511982], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Number.intValue()', 'javax.swing.JComponent.getHeight()', 'java.util.List.set(int,java.lang.Object)'), (False, False, False, False, False), ('java.util.List.get(int)', 'java.lang.Number.intValue()', 'javax.swing.JComponent.getHeight()', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [2, -10.855983403278515], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Number.intValue()', 'java.util.List.set(int,java.lang.Object)'), (False, False, False, False), ('java.util.List.get(int)', 'java.lang.Number.intValue()', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [6, -11.274114447878674], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Number.intValue()'), (False, False, False), ('java.util.List.get(int)', 'java.lang.Number.intValue()', 'java.util.List.set(int,java.lang.Object)')): [6, -10.074475646018982]}

counter: 15
num skipped: 0
{'include': ['java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()')): [4, -7.142190933227539], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.size()'), (False, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.size()', 'java.util.ArrayList.iterator()')): [46, -5.131541967391968]}

counter: 16
num skipped: 0
{'include': ['javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [4, -7.628714323043823], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [5, -7.843410968780518], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [16, -13.683605432510376], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'), (False, False, False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'DStop')): [24, -11.987981669604778], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'), (False, False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'DStop')): [1, -10.238150000572205]}

counter: 17
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.toLowerCase(java.util.Locale)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.toLowerCase(java.util.Locale)')): [5, -4.81931209564209], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.toLowerCase(java.util.Locale)'), (False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.toLowerCase(java.util.Locale)', 'DStop')): [45, -4.980509616434574]}

counter: 18
num skipped: 0
{'include': ['java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)', 'java.awt.Shape.getBounds2D()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)'), (False, False), ('java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)', 'java.awt.Shape.getBounds2D()')): [15, -32.8608238697052], (('DSubTree', 'java.awt.Shape.getBounds2D()'), (False, False), ('java.awt.Shape.getBounds2D()', 'java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)')): [35, -24.007110357284546]}

counter: 19
num skipped: 0
{'include': ['java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.currentThread()'), (False, False), ('java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [5, -16.62638568878174], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DStop')): [1, -12.25130821019411], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [3, -9.970762142911553], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DStop')): [24, -5.837094753980637], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()', 'java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()'), (False, False, False, False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()', 'java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()', 'DStop')): [1, -14.01759197935462], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()', 'java.lang.System.currentTimeMillis()'), (False, False, False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()', 'java.lang.System.currentTimeMillis()', 'DStop')): [1, -13.051528236828744], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()'), (False, False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.currentTimeMillis()', 'DStop')): [15, -5.40101707726717]}

counter: 20
num skipped: 0
{'include': ['java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.getLong()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False), ('java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.getLong()')): [9, -22.12659215927124], (('DSubTree', 'java.nio.ByteBuffer.getLong()'), (False, False), ('java.nio.ByteBuffer.getLong()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)')): [10, -20.763143718242645], (('DSubTree', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.getLong()'), (False, False, False), ('java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.getLong()', 'DStop')): [31, -16.550493847520556]}

counter: 21
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [14, -9.581624329090118], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [36, -9.928365468978882]}

counter: 22
num skipped: 0
{'include': ['java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.BorderLayout.BorderLayout()'), (False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)')): [3, -14.188287019729614], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop')): [2, -13.941742135211825], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.util.concurrent.CountDownLatch.await()', 'DExcept'), (False, False, False, False, True, True, False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.util.concurrent.CountDownLatch.await()', 'DStop', 'DStop')): [9, -21.414424727554433], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DExcept', 'java.util.concurrent.CountDownLatch.await()', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, False, False, False, True, True, False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DExcept', 'java.util.concurrent.CountDownLatch.await()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [36, -21.204712357837707]}

counter: 23
num skipped: 0
{'include': ['java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getName()'), (False, False), ('java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)')): [24, -7.915313005447388], (('DSubTree', 'java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)'), (False, False, False), ('java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DStop')): [26, -7.869130875915289]}

counter: 24
num skipped: 0
{'include': ['java.util.Arrays.fill(int[],int)', 'java.lang.Math.min(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(int[],int)'), (False, False), ('java.util.Arrays.fill(int[],int)', 'java.lang.Math.min(int,int)')): [5, -5.658232688903809], (('DSubTree', 'java.util.Arrays.fill(int[],int)', 'java.lang.Math.min(int,int)'), (False, False, False), ('java.util.Arrays.fill(int[],int)', 'java.lang.Math.min(int,int)', 'DStop')): [45, -5.295704998075962]}

counter: 25
num skipped: 0
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [11, -14.715224504470825], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [19, -15.400793155189604], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [4, -12.733062224462628], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DBranch', 'java.io.StringWriter.toString()', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', '$NOT$java.util.Iterator<>.next()', 'java.io.StringWriter.toString()', 'java.io.StringWriter.toString()', 'DBranch'), (False, False, False, False, True, True, True, True, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DBranch', 'java.io.StringWriter.toString()', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', '$NOT$java.util.Iterator<>.next()', 'java.io.StringWriter.toString()', 'DStop', 'DStop', 'DStop')): [16, -32.941433341940865]}

counter: 26
num skipped: 0
{'include': ['java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.util.Collections.synchronizedMap(java.util.Map)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'), (False, False), ('java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.util.Collections.synchronizedMap(java.util.Map)')): [4, -11.21881628036499], (('DSubTree', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.util.Collections.synchronizedMap(java.util.Map)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False), ('java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.util.Collections.synchronizedMap(java.util.Map)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [46, -12.672171745449305]}

counter: 27
num skipped: 0
{'include': ['java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [3, -7.801963210105896], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [16, -5.07386414706707], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [31, -7.527809150516987]}

counter: 28
num skipped: 0
{'include': ['java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)'), (False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()')): [2, -11.259143397212029], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.find()'), (False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.start()')): [2, -10.931775942444801], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.start()'), (False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.start()', 'java.util.regex.Matcher.end()')): [2, -11.224234819412231], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()'), (False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.util.regex.Matcher.end()')): [8, -10.380545973777771], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)'), (False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)', 'java.util.regex.Matcher.end()')): [2, -17.2940516769886], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)'), (False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)', 'DStop')): [2, -12.331060446798801], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.Integer.toHexString(int)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.Integer.toHexString(int)', 'java.lang.String.substring(int,int)', 'DStop')): [19, -15.696618363261223], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)', 'java.lang.Integer.toHexString(int)'), (False, False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)', 'java.lang.Integer.toHexString(int)', 'DStop')): [6, -14.732027873396873], (('DSubTree', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)'), (False, False, False, False), ('java.lang.String.contains(java.lang.CharSequence)', 'java.util.regex.Matcher.start()', 'java.lang.String.substring(int,int)', 'java.lang.Integer.toHexString(int)')): [7, -17.89580139517784]}

counter: 29
num skipped: 0
{'include': ['java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'java.lang.Math.max(double,double)')): [50, -12.910265177488327]}

counter: 30
num skipped: 0
{'include': ['java.lang.String.toCharArray()', 'java.util.Arrays.asList(T[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toCharArray()'), (False, False), ('java.lang.String.toCharArray()', 'java.util.Arrays.asList(T[])')): [11, -7.539299249649048], (('DSubTree', 'java.lang.String.toCharArray()', 'java.util.Arrays.asList(T[])'), (False, False, False), ('java.lang.String.toCharArray()', 'java.util.Arrays.asList(T[])', 'DStop')): [14, -5.687321290373802], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.String.length()', 'java.util.Arrays.asList(T[])'), (False, False, False, False), ('java.lang.String.toCharArray()', 'java.lang.String.length()', 'java.util.Arrays.asList(T[])', 'DStop')): [3, -11.30793758481741], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False), ('java.lang.String.toCharArray()', 'java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.util.Arrays.asList(T[])', 'DStop')): [2, -12.973834544420242], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.Integer.toHexString(int)', 'java.util.Arrays.asList(T[])'), (False, False, False, False), ('java.lang.String.toCharArray()', 'java.lang.Integer.toHexString(int)', 'java.util.Arrays.asList(T[])', 'DStop')): [15, -11.753014199435711], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.String.String(byte[])', 'java.util.Arrays.asList(T[])'), (False, False, False, False), ('java.lang.String.toCharArray()', 'java.lang.String.String(byte[])', 'java.util.Arrays.asList(T[])', 'DStop')): [5, -7.676965346559882]}

counter: 31
num skipped: 0
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [1, -21.91276454925537], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [7, -16.60153480619192], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [5, -16.369428688660264], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'DLoop'), (False, False, False, True, True, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'DStop', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [3, -15.431290514301509], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop'), (False, False, False, True, True, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DStop', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [1, -16.177969031210523], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'DLoop', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False, True, True, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'DStop', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [33, -17.72937040650868]}

counter: 32
num skipped: 0
{'include': ['java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Enumeration.hasMoreElements()'), (False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()')): [11, -15.423783302307129], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'DStop')): [15, -14.156437158584595], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'DStop')): [4, -20.70991056645289], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)')): [16, -18.620145797729492], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Vector.size()'), (False, False, False, False), ('java.util.Enumeration.hasMoreElements()', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Vector.size()', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)')): [3, -23.391504406929016], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.lang.Integer.intValue()', 'java.util.Vector.size()'), (False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.lang.Integer.intValue()', 'java.util.Vector.size()', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)')): [1, -23.80507469177246]}

counter: 34
num skipped: 1
{'include': ['java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [3, -9.259672284126282], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [32, -7.218761920928955], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [15, -5.9581258893013]}

counter: 35
num skipped: 1
{'include': ['java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'), (False, False), ('java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Pattern.quote(java.lang.String)')): [9, -9.055341720581055], (('DSubTree', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'), (False, False, False), ('java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.regex.Pattern.quote(java.lang.String)')): [1, -8.195866584777832], (('DSubTree', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Pattern.quote(java.lang.String)'), (False, False, False), ('java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String,int)')): [40, -6.025576233863831]}

counter: 36
num skipped: 1
{'include': ['java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()')): [1, -7.328619003295898], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()'), (False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()', 'DStop')): [7, -7.758944105356932], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Throwable.toString()', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DStop')): [42, -8.759269554167986]}

counter: 37
num skipped: 1
{'include': ['java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)')): [7, -6.614376962184906], (('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)')): [1, -7.972872018814087], (('DSubTree', 'java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)'), (False, False, False, False), ('java.lang.System.getProperty(java.lang.String,java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.net.InetAddress.getByName(java.lang.String)', 'DStop')): [42, -7.217820309102535]}

counter: 38
num skipped: 1
{'include': ['java.lang.Integer.Integer(int)', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.Integer(int)'), (False, False), ('java.lang.Integer.Integer(int)', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)')): [18, -16.91376304626465], (('DSubTree', 'java.lang.Integer.Integer(int)', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.Integer.Integer(int)', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)', 'DStop')): [2, -20.928132497239858], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.io.InputStream.read(byte[])', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.Integer.Integer(int)', 'java.io.InputStream.read(byte[])', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)', 'DStop')): [11, -16.21051788609475], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)', 'DStop')): [14, -14.92480410716962], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()'), (False, False, False), ('java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'javax.swing.text.AbstractDocument.putProperty(java.lang.Object,java.lang.Object)')): [5, -12.995752450078726]}

counter: 39
num skipped: 1
{'include': ['java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.lang.String.trim()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.lang.String.trim()', 'java.util.Vector.size()')): [2, -21.967472195625305], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.lang.String.toUpperCase()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.lang.String.toUpperCase()', 'java.util.Vector.size()')): [1, -19.12856149673462], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.lang.String.toUpperCase()', 'java.util.Vector.size()'), (False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.lang.String.toUpperCase()', 'java.util.Vector.size()', 'DStop')): [1, -17.51584119349718], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'DStop')): [8, -15.26458191871643], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.lang.Integer.intValue()'), (False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.lang.Integer.intValue()', 'DStop')): [9, -15.402708664536476], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Vector.size()', 'java.lang.Integer.intValue()')): [2, -14.598313689231873], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.util.Vector.size()', 'java.lang.Integer.intValue()'), (False, False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.util.Vector.size()', 'java.lang.Integer.intValue()', 'DStop')): [20, -19.787903681397438], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.util.Vector.size()', 'java.lang.Long.Long(long)', 'java.lang.Integer.intValue()'), (False, False, False, False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.util.Vector.size()', 'java.lang.Long.Long(long)', 'java.lang.Integer.intValue()', 'DStop')): [7, -25.658822387456894]}

counter: 40
num skipped: 1
{'include': ['java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.FloatBuffer.put(float[])'), (False, False), ('java.nio.FloatBuffer.put(float[])', 'java.nio.ByteBuffer.asFloatBuffer()')): [29, -10.60318011045456], (('DSubTree', 'java.nio.FloatBuffer.put(float[])', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False, False), ('java.nio.FloatBuffer.put(float[])', 'java.nio.ByteBuffer.asFloatBuffer()', 'DStop')): [21, -9.526593117130687]}

counter: 41
num skipped: 1
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [10, -12.007630825042725], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [14, -11.87521520955488], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)', 'DStop')): [26, -20.05130187422037]}

counter: 42
num skipped: 1
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'), (False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()', 'DStop')): [1, -20.42147346731508], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)'), (False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()')): [1, -17.56485366821289], (('DSubTree', 'java.lang.Boolean.booleanValue()'), (False, False), ('java.lang.Boolean.booleanValue()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)')): [13, -15.015548467636108], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'DStop')): [35, -14.10938924520633]}

counter: 43
num skipped: 1
{'include': ['java.util.Arrays.asList(T[])', 'java.lang.String.toCharArray()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])'), (False, False), ('java.util.Arrays.asList(T[])', 'java.lang.String.toCharArray()')): [25, -3.190251588821411], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.lang.String.toCharArray()'), (False, False, False), ('java.util.Arrays.asList(T[])', 'java.lang.String.toCharArray()', 'DStop')): [25, -4.638535737991333]}

counter: 44
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [1, -9.057160377502441], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [19, -7.142316967248917], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [30, -2.4917054772377014]}

counter: 45
num skipped: 1
{'include': ['java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.toString()'), (False, False), ('java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)')): [32, -3.2562521253712475], (('DSubTree', 'java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)'), (False, False, False), ('java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)', 'DStop')): [18, -1.2930084951221943]}

counter: 46
num skipped: 1
{'include': ['java.util.List<T>.size()', 'java.util.List<T>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<T>.size()', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False), ('java.util.List<T>.size()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.List<T>.addAll(java.util.Collection)')): [50, -5.287536829710007]}

counter: 47
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder()'), (False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)')): [1, -8.338883817195892], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'DStop')): [35, -8.869595885276794], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.toString()', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.toString()', 'java.io.Writer.write(java.lang.String)', 'DStop')): [14, -7.4521128088235855]}

counter: 48
num skipped: 1
{'include': ['java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)'), (False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [11, -7.002625336870551], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'java.util.List<java.lang.String>.get(int)'), (False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [23, -5.429763734340668], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)'), (False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [16, -8.145933240652084]}

counter: 49
num skipped: 1
{'include': ['java.lang.Double.doubleValue()', 'java.lang.Math.round(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.doubleValue()'), (False, False), ('java.lang.Double.doubleValue()', 'java.lang.Math.round(double)')): [21, -10.610508918762207], (('DSubTree', 'java.lang.Double.doubleValue()', 'java.lang.Math.round(double)'), (False, False, False), ('java.lang.Double.doubleValue()', 'java.lang.Math.round(double)', 'DStop')): [29, -4.970239179208875]}

counter: 51
num skipped: 2
{'include': ['java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.ResultSet.getDate(java.lang.String)'), (False, False), ('java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getLong(java.lang.String)')): [42, -10.24975973367691], (('DSubTree', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getLong(java.lang.String)'), (False, False, False), ('java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getLong(java.lang.String)', 'DStop')): [8, -11.126231174916029]}

counter: 52
num skipped: 2
{'include': ['java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initVerify(java.security.PublicKey)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)'), (False, False), ('java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initVerify(java.security.PublicKey)')): [1, -36.31311893463135], (('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)'), (False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)')): [21, -26.121841818094254], (('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)')): [20, -27.429619789123535], (('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()'), (False, False, False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)')): [8, -28.05133616924286]}

counter: 53
num skipped: 2
{'include': ['java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)')): [7, -16.84413719177246], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)')): [9, -6.762623369693756], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [34, -8.873960614204407]}

counter: 54
num skipped: 2
{'include': ['java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)'), (False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.close()')): [6, -18.433815002441406], (('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.close()'), (False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.close()', 'DStop')): [44, -16.495199309458258]}

counter: 55
num skipped: 2
{'include': ['java.lang.Math.min(int,int)', 'java.util.Arrays.fill(int[],int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(int,int)'), (False, False), ('java.lang.Math.min(int,int)', 'java.util.Arrays.fill(int[],int)')): [11, -11.89548921585083], (('DSubTree', 'java.lang.Math.min(int,int)', 'java.util.Arrays.fill(int[],int)'), (False, False, False), ('java.lang.Math.min(int,int)', 'java.util.Arrays.fill(int[],int)', 'DStop')): [39, -3.0202003363519907]}

counter: 56
num skipped: 2
{'include': ['java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)'), (False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.intValue()')): [41, -16.87686914205551], (('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)'), (False, False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.intValue()')): [1, -14.914751052856445], (('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.intValue()'), (False, False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.intValue()', 'DStop')): [8, -12.364921319051064]}

counter: 57
num skipped: 2
{'include': ['java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.Vector<java.lang.String>.Vector<String>()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.Vector<java.lang.String>.Vector<String>()')): [19, -8.836852550506592], (('DSubTree', 'java.util.Vector<java.lang.String>.Vector<String>()'), (False, False), ('java.util.Vector<java.lang.String>.Vector<String>()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()')): [9, -10.094029903411865], (('DSubTree', 'java.util.Vector<java.lang.String>.Vector<String>()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False, False), ('java.util.Vector<java.lang.String>.Vector<String>()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'DStop')): [22, -4.4131732657551765]}

counter: 58
num skipped: 2
{'include': ['java.awt.image.BufferedImage.setRGB(int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.setRGB(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.setRGB(int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [10, -22.54694652557373], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [1, -20.512646675109863], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.abs(int)'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.abs(int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [7, -19.799859046936035], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Math.abs(int)'), (False, False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Math.abs(int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [2, -23.141128659248352], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [6, -19.303672790527344], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)')): [5, -15.478819847106934], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)'), (False, False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'DStop')): [1, -17.934522628667764], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getAbsolutePath()', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)'), (False, False, False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getAbsolutePath()', 'java.lang.Math.min(int,int)', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'DStop')): [1, -22.03976397262886], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getAbsolutePath()', 'java.awt.image.BufferedImage.setRGB(int,int,int)'), (False, False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getAbsolutePath()', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'DStop')): [17, -14.149503784254193]}

counter: 59
num skipped: 2
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()')): [12, -12.99295961856842], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [30, -8.437605261802673], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()')): [8, -7.192030906677246]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5792349726775959, 'relevant_additions': 0.49726775956284175, 'meets_constraints': 0.9508196721311483, 'in_set': 0.09836065573770493, 'test_set_relevant_additions': 0.46243169398907125}
