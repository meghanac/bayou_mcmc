data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 200


counter: 0
num skipped: 0
{'include': ['java.util.Calendar.get(int)', 'java.util.Iterator.hasNext()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.get(int)', 'java.lang.Class<Tau_T>.getName()'), (False, False, False), ('java.util.Calendar.get(int)', 'java.lang.Class<Tau_T>.getName()', 'java.util.Iterator.hasNext()')): [9, -17.752758979797363], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.TimeZone.getDefault()', 'java.lang.Class<Tau_T>.getName()'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.TimeZone.getDefault()', 'java.lang.Class<Tau_T>.getName()', 'java.util.Iterator.hasNext()')): [41, -16.441551566123962]}

counter: 1
num skipped: 0
{'include': ['javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)')): [4, -6.499688148498535], (('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [46, -7.30999643728137]}

counter: 2
num skipped: 0
{'include': ['java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.max(int,int)'), (False, False), ('java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()')): [22, -14.773414850234985], (('DSubTree', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()'), (False, False, False), ('java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(java.lang.String)')): [8, -14.85004985332489], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.length()'), (False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)')): [4, -17.326112270355225], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.StringBuilder.length()'), (False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)')): [7, -22.593380212783813], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)')): [1, -28.557808101177216], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)')): [3, -25.881492853164673], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.lang.Integer.intValue()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)')): [5, -31.458607137203217]}

counter: 3
num skipped: 0
{'include': ['java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()')): [2, -9.04286527633667], (('DSubTree', 'java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()', 'DStop')): [4, -6.98498997092247], (('DSubTree', 'java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'DStop')): [1, -7.767800971865654], (('DSubTree', 'java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'java.io.FileReader.FileReader(java.lang.String)')): [43, -5.590048208832741]}

counter: 4
num skipped: 0
{'include': ['java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.CountDownLatch.await()'), (False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)')): [1, -13.353342056274414], (('DSubTree', 'java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)', 'DStop')): [12, -12.665596708655357], (('DSubTree', 'java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int)', 'DStop')): [37, -15.533818252384663]}

counter: 5
num skipped: 0
{'include': ['java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()')): [12, -5.186558932065964], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.Iterator.next()', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.Iterator.next()', 'DStop', 'DStop')): [29, -8.295298236866074], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'DLoop'), (False, False, False, True, True, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.Iterator.next()', 'DStop')): [9, -5.985150029417127]}

counter: 6
num skipped: 0
{'include': ['java.lang.Integer.valueOf(java.lang.String)', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.valueOf(java.lang.String)'), (False, False), ('java.lang.Integer.valueOf(java.lang.String)', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)')): [2, -8.994391918182373], (('DSubTree', 'java.lang.Integer.valueOf(java.lang.String)', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.Integer.valueOf(java.lang.String)', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'DStop')): [48, -7.81975363381207]}

counter: 7
num skipped: 0
{'include': ['java.lang.Thread.sleep(long)', 'java.nio.channels.SocketChannel.open()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.sleep(long)', 'java.nio.channels.SocketChannel.open()'), (False, False, False), ('java.lang.Thread.sleep(long)', 'java.nio.channels.SocketChannel.open()', 'DStop')): [23, -15.294243569253013], (('DSubTree', 'java.lang.Thread.sleep(long)', 'java.io.File.isDirectory()', 'java.nio.channels.SocketChannel.open()'), (False, False, False, False), ('java.lang.Thread.sleep(long)', 'java.io.File.isDirectory()', 'java.nio.channels.SocketChannel.open()', 'DStop')): [8, -17.50286089978181], (('DSubTree', 'java.lang.Thread.sleep(long)', 'java.io.File.isDirectory()'), (False, False, False), ('java.lang.Thread.sleep(long)', 'java.io.File.isDirectory()', 'java.nio.channels.SocketChannel.open()')): [2, -17.540659427642822], (('DSubTree', 'java.lang.Thread.sleep(long)'), (False, False), ('java.lang.Thread.sleep(long)', 'java.nio.channels.SocketChannel.open()')): [17, -12.76445304788649]}

counter: 8
num skipped: 0
{'include': ['java.lang.Integer.Integer(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.Integer(java.lang.String)'), (False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)')): [15, -12.456547021865845], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)')): [1, -15.624472856521606], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.Integer(int)'), (False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.util.HashMap.get(java.lang.Object)')): [3, -13.922932267189026], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)'), (False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)', 'DStop')): [31, -8.375442532007582]}

counter: 9
num skipped: 0
{'include': ['java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)')): [4, -10.544830054044724], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)')): [9, -8.395621299743652], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [37, -10.694173529744148]}

counter: 10
num skipped: 0
{'include': ['java.util.Collections.emptyList()', 'java.util.Arrays.asList(java.lang.Object[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.emptyList()'), (False, False), ('java.util.Collections.emptyList()', 'java.util.Arrays.asList(java.lang.Object[])')): [5, -6.515955068171024], (('DSubTree', 'java.util.Collections.emptyList()', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False), ('java.util.Collections.emptyList()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Arrays.asList(java.lang.Object[])')): [4, -5.0893943309783936], (('DSubTree', 'java.util.Collections.emptyList()', 'java.util.Arrays.asList(java.lang.Object[])'), (False, False, False), ('java.util.Collections.emptyList()', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<Tau_E>.ArrayList()')): [2, -6.4131704568862915], (('DSubTree', 'java.util.Collections.emptyList()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Thread.sleep(long)', 'java.util.Arrays.asList(java.lang.Object[])'), (False, False, False, False, False), ('java.util.Collections.emptyList()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Thread.sleep(long)', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<Tau_E>.ArrayList()')): [39, -7.564927339553833]}

counter: 11
num skipped: 0
{'include': ['java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(long,long)'), (False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.min(double,double)')): [2, -5.316999301314354], (('DSubTree', 'java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)'), (False, False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)')): [29, -5.485525336116552], (('DSubTree', 'java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)'), (False, False, False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)', 'DStop')): [18, -6.269815891981125], (('DSubTree', 'java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)'), (False, False, False, False, False), ('java.lang.Math.min(long,long)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'DStop')): [1, -4.305275782942772]}

counter: 12
num skipped: 0
{'include': ['java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.util.logging.Logger.getLogger(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)'), (False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.util.logging.Logger.getLogger(java.lang.String)')): [47, -6.678990006446838], (('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.util.logging.Logger.getLogger(java.lang.String)'), (False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.util.logging.Logger.getLogger(java.lang.String)', 'DStop')): [3, -3.557231366634369]}

counter: 13
num skipped: 0
{'include': ['java.sql.Statement.close()', 'java.sql.Connection.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Statement.close()', 'java.sql.Connection.close()'), (False, False, False), ('java.sql.Statement.close()', 'java.sql.Connection.close()', 'DStop')): [12, -9.879089197143912], (('DSubTree', 'java.sql.Statement.close()'), (False, False), ('java.sql.Statement.close()', 'java.sql.Connection.close()')): [8, -3.8796637523919344], (('DSubTree', 'java.sql.Connection.close()'), (False, False), ('java.sql.Connection.close()', 'java.sql.Statement.close()')): [30, -5.289163663983345]}

counter: 14
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [8, -11.859729170799255], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [7, -10.87081265449524], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [35, -7.092344398377463]}

counter: 15
num skipped: 0
{'include': ['java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.append(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)'), (False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.append(java.lang.String)')): [4, -19.1928391456604], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)')): [1, -18.20993423461914], (('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [1, -17.213764034211636], (('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [8, -15.898343533277512], (('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'DStop')): [5, -21.606341449543834], (('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [6, -16.344271164387465], (('DSubTree', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [25, -10.736267928034067]}

counter: 16
num skipped: 0
{'include': ['javax.naming.InitialContext.InitialContext()', 'javax.naming.Context.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.naming.InitialContext.InitialContext()'), (False, False), ('javax.naming.InitialContext.InitialContext()', 'javax.naming.Context.close()')): [14, -13.840081214904785], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.util.Properties.Properties()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.util.Properties.Properties()', 'javax.naming.Context.close()')): [2, -12.969881296157837], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.util.Properties.Properties()', 'javax.naming.Context.close()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.util.Properties.Properties()', 'javax.naming.Context.close()', 'DStop')): [3, -14.631261496804655], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()', 'java.util.Properties.Properties()', 'javax.naming.Context.close()'), (False, False, False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()', 'java.util.Properties.Properties()', 'javax.naming.Context.close()', 'DStop')): [14, -20.726190586574376], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()', 'javax.naming.Context.close()'), (False, False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()', 'javax.naming.Context.close()', 'DStop')): [13, -13.809281330322847], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.util.Properties.Properties()', 'javax.naming.Context.close()')): [3, -11.75432538986206], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.valueOf(int)'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.valueOf(int)', 'javax.naming.Context.close()')): [1, -11.283437356352806]}

counter: 17
num skipped: 0
{'include': ['java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.isPrimitive()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)'), (False, False), ('java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.isPrimitive()')): [3, -20.64390802383423], (('DSubTree', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.isPrimitive()'), (False, False, False), ('java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.isPrimitive()', 'DStop')): [47, -17.398571014240588]}

counter: 18
num skipped: 0
{'include': ['java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.trim()'), (False, False), ('java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)')): [16, -5.662452697753906], (('DSubTree', 'java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False, False), ('java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.compile(java.lang.String,int)')): [32, -3.00831937789917], (('DSubTree', 'java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False, False, False), ('java.lang.String.trim()', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DStop')): [2, -4.858064889907837]}

counter: 19
num skipped: 0
{'include': ['java.net.ServerSocket.ServerSocket(int)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.ServerSocket.ServerSocket(int)'), (False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [19, -9.6787850856781], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.net.ServerSocket.ServerSocket(int)')): [1, -9.501147389411926], (('DSubTree', 'java.net.ServerSocket.ServerSocket(int)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [1, -6.261578619480133], (('DSubTree', 'java.net.ServerSocket.ServerSocket(int)', 'java.net.Socket.getOutputStream()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.net.Socket.getOutputStream()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [27, -7.540703949518502], (('DSubTree', 'java.net.ServerSocket.ServerSocket(int)', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.net.Socket.getOutputStream()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [2, -6.218894265592098]}

counter: 21
num skipped: 1
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [10, -5.58328652381897], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'DStop')): [16, -5.195681266486645], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.lang.String.endsWith(java.lang.String)')): [23, -6.147121846675873], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)')): [1, -8.807333946228027]}

counter: 22
num skipped: 1
{'include': ['java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [3, -3.9772170074284077], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [3, -3.6885877549648285], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [1, -7.811217043548822], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [39, -7.293378642760217], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False, False, False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)')): [4, -8.626891903579235]}

counter: 23
num skipped: 1
{'include': ['java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[])'), (False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])')): [11, -13.459522247314453], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.read(byte[],int,int)'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.io.InputStream.read(byte[],int,int)', 'java.lang.String.String(byte[])')): [11, -9.691455364227295], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.util.Arrays.copyOf(byte[],int)'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.util.Arrays.copyOf(byte[],int)', 'java.lang.String.String(byte[])')): [2, -11.246776342391968], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.String(byte[])')): [13, -8.89299738407135], (('DSubTree', 'java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.InputStream.read(byte[])', 'java.lang.String.String(byte[])', 'DStop')): [13, -7.046582460403442]}

counter: 24
num skipped: 1
{'include': ['java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.valueOf(java.lang.String)'), (False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)')): [31, -8.497480960562825], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)')): [1, -10.99334865808487], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [18, -8.990793508477509]}

counter: 25
num skipped: 1
{'include': ['java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.ClassLoader.getResource(java.lang.String)'), (False, False), ('java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)')): [1, -8.388692378997803], (('DSubTree', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False, False), ('java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'DStop')): [29, -5.804337680339813], (('DSubTree', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False), ('java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.lang.String.substring(int,int)', 'DStop')): [20, -15.380231752991676]}

counter: 26
num skipped: 1
{'include': ['java.util.EnumSet.noneOf(java.lang.Class)', 'java.util.Collections.unmodifiableSet(java.util.Set)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.EnumSet.noneOf(java.lang.Class)'), (False, False), ('java.util.EnumSet.noneOf(java.lang.Class)', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [1, -16.139245986938477], (('DSubTree', 'java.util.Collections.unmodifiableSet(java.util.Set)'), (False, False), ('java.util.Collections.unmodifiableSet(java.util.Set)', 'java.util.EnumSet.noneOf(java.lang.Class)')): [12, -12.761975288391113], (('DSubTree', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'java.util.EnumSet.noneOf(java.lang.Class)'), (False, False, False), ('java.util.Collections.unmodifiableSet(java.util.Set)', 'java.util.EnumSet.noneOf(java.lang.Class)', 'DStop')): [37, -3.9875533916056156]}

counter: 27
num skipped: 1
{'include': ['java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)')): [33, -5.128904789686203], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)', 'DStop')): [17, -4.261737760956748]}

counter: 28
num skipped: 1
{'include': ['java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String)'), (False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [3, -13.0632733553648], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()'), (False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()')): [7, -16.293462119996548], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()', 'DStop')): [24, -13.921725176274776], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop')): [4, -25.547845523804426], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.concurrent.CountDownLatch.await()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop')): [12, -18.611688178032637]}

counter: 29
num skipped: 1
{'include': ['java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)')): [3, -15.178896427154541], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.getAbsolutePath()'), (False, False, False), ('java.io.File.mkdir()', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.write(byte[],int,int)')): [1, -15.171364784240723], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.write(byte[],int,int)')): [3, -12.612696290016174], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()', 'DStop')): [27, -7.886444091796875], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.close()')): [1, -11.469600200653076], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()')): [2, -6.892616510391235], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.OutputStream.close()')): [9, -15.826873302459717], (('DSubTree', 'java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()', 'java.lang.Integer.parseInt(java.lang.String)')): [1, -19.9528226852417], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()'), (False, False, False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.close()', 'java.lang.Integer.parseInt(java.lang.String)')): [1, -24.206127405166626], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()', 'java.io.OutputStream.write(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [2, -20.01448267698288]}

counter: 30
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [2, -7.849087119102478], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [24, -7.83269727230072], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [24, -6.363280192017555]}

counter: 31
num skipped: 1
{'include': ['java.util.Collection<V>.clear()', 'java.util.Collection<V>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<V>.clear()'), (False, False), ('java.util.Collection<V>.clear()', 'java.util.Collection<V>.addAll(java.util.Collection)')): [7, -43.83258819580078], (('DSubTree', 'java.util.Collection<V>.clear()', 'java.util.Collection<V>.addAll(java.util.Collection)'), (False, False, False), ('java.util.Collection<V>.clear()', 'java.util.Collection<V>.addAll(java.util.Collection)', 'DStop')): [38, -44.209203077683924], (('DSubTree', 'java.util.Collection<V>.clear()', 'java.lang.StringBuilder.length()', 'java.util.Collection<V>.addAll(java.util.Collection)'), (False, False, False, False), ('java.util.Collection<V>.clear()', 'java.lang.StringBuilder.length()', 'java.util.Collection<V>.addAll(java.util.Collection)', 'DStop')): [2, -35.65261937235482], (('DSubTree', 'java.util.Collection<V>.clear()', 'java.lang.StringBuilder.length()'), (False, False, False), ('java.util.Collection<V>.clear()', 'java.lang.StringBuilder.length()', 'java.util.Collection<V>.addAll(java.util.Collection)')): [3, -29.124921798706055]}

counter: 32
num skipped: 1
{'include': ['java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.DecimalFormat.toPattern()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)'), (False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.DecimalFormat.toPattern()')): [6, -19.503780499100685], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.DecimalFormat.toPattern()'), (False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.text.DecimalFormat.toPattern()', 'DStop')): [5, -20.252199933573138], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.util.List.get(int)', 'java.text.DecimalFormat.toPattern()'), (False, False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.util.List.get(int)', 'java.text.DecimalFormat.toPattern()', 'DStop')): [8, -21.421993081690744], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.util.List.get(int)'), (False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.util.List.get(int)', 'java.text.DecimalFormat.toPattern()')): [6, -21.790606051683426], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'java.text.DecimalFormat.toPattern()')): [2, -24.549740314483643], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.Math.min(int,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.Math.min(int,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.equals(java.lang.Object)', 'java.text.DecimalFormat.toPattern()')): [3, -26.599875688552856], (('DSubTree', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False), ('java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.equals(java.lang.Object)', 'java.text.DecimalFormat.toPattern()')): [20, -24.961907505989075]}
