data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 167


counter: 1
num skipped: 1
{'include': ['javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()'), (False, False, False), ('javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()', 'DStop')): [13, -34.394988930784166], (('DSubTree', 'javax.swing.JTable.getColumnModel()'), (False, False), ('javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()')): [12, -31.324074745178223], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.JTable.getColumnModel()'), (False, False, False), ('javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.JTable.getColumnModel()', 'DStop')): [2, -21.439969707047567], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'javax.swing.JTable.getColumnModel()'), (False, False, False, False), ('javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'javax.swing.JTable.getColumnModel()', 'DStop')): [8, -20.019585657515563], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)'), (False, False, False), ('javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'javax.swing.JTable.getColumnModel()')): [6, -15.669887942261994], (('DSubTree', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'java.util.ArrayList.ArrayList()'), (False, False, False, False), ('javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'java.util.ArrayList.ArrayList()', 'javax.swing.JTable.getColumnModel()')): [9, -15.514379739743617]}

counter: 2
num skipped: 1
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()')): [7, -21.108704566955566], (('DSubTree', 'java.io.PrintWriter.flush()'), (False, False), ('java.io.PrintWriter.flush()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [32, -17.597609996795654], (('DSubTree', 'java.io.PrintWriter.flush()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False, False), ('java.io.PrintWriter.flush()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()')): [11, -17.155336041003466]}

counter: 3
num skipped: 1
{'include': ['java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.jar.Manifest.getMainAttributes()'), (False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)')): [8, -28.94147038459778], (('DSubTree', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'), (False, False), ('java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.util.jar.Manifest.getMainAttributes()')): [24, -31.98952341079712], (('DSubTree', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.util.jar.Manifest.getMainAttributes()'), (False, False, False), ('java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.util.jar.Manifest.getMainAttributes()', 'DStop')): [18, -33.298608797835186]}

counter: 4
num skipped: 1
{'include': ['java.awt.Toolkit.getDefaultToolkit()', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)')): [2, -28.095970153808594], (('DSubTree', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'), (False, False), ('java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()')): [12, -22.56229019165039], (('DSubTree', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False), ('java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()', 'DStop')): [36, -15.33960139658302]}

counter: 5
num skipped: 1
{'include': ['java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.currentThread()'), (False, False), ('java.lang.Thread.currentThread()', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [6, -9.611389875411987], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [1, -10.380240380764008], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DStop')): [12, -5.397161543369293], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.io.BufferedReader.readLine()', 'DExcept'), (False, False, False, False, True, True, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.io.BufferedReader.readLine()', 'DStop', 'DStop')): [18, -6.944702366134152], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DExcept', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, False, False, False, True, True, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.io.BufferedReader.readLine()', 'DStop')): [4, -6.200575063587166], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False, False), ('java.lang.Thread.currentThread()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.File.listFiles(java.io.FilenameFilter)')): [9, -14.703618824481964]}

counter: 6
num skipped: 1
{'include': ['java.awt.Color.darker()', 'java.awt.Color.getGreen()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.darker()', 'java.awt.Color.getGreen()'), (False, False, False), ('java.awt.Color.darker()', 'java.awt.Color.getGreen()', 'DStop')): [19, -24.563809446059167], (('DSubTree', 'java.awt.Color.getGreen()', 'java.awt.Color.darker()'), (False, False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.darker()', 'DStop')): [13, -23.022791707422584], (('DSubTree', 'java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Color.darker()'), (False, False, False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Color.darker()', 'DStop')): [4, -31.805997542338446], (('DSubTree', 'java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.awt.Color.darker()'), (False, False, False, False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)', 'java.text.DecimalFormat.DecimalFormat(java.lang.String)', 'java.awt.Color.darker()', 'DStop')): [14, -28.623610569164157]}

counter: 7
num skipped: 1
{'include': ['java.nio.Buffer.flip()', 'java.nio.Buffer.limit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.flip()'), (False, False), ('java.nio.Buffer.flip()', 'java.nio.Buffer.limit()')): [2, -7.559231281280518], (('DSubTree', 'java.nio.Buffer.flip()', 'java.nio.Buffer.limit()'), (False, False, False), ('java.nio.Buffer.flip()', 'java.nio.Buffer.limit()', 'DStop')): [40, -7.97101503610611], (('DSubTree', 'java.nio.Buffer.flip()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()'), (False, False, False, False), ('java.nio.Buffer.flip()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()', 'DStop')): [4, -11.573794487863779], (('DSubTree', 'java.nio.Buffer.flip()', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.Buffer.flip()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()')): [4, -3.330636739730835]}

counter: 8
num skipped: 1
{'include': ['java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.max(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getHeight()'), (False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.max(double,double)')): [40, -12.902655839920044], (('DSubTree', 'java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.max(double,double)'), (False, False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.max(double,double)', 'DStop')): [10, -10.80274104885757]}

counter: 9
num skipped: 1
{'include': ['java.lang.Class.isPrimitive()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.isPrimitive()'), (False, False), ('java.lang.Class.isPrimitive()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [4, -18.303546667099], (('DSubTree', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False), ('java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()')): [22, -17.898531436920166], (('DSubTree', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()'), (False, False, False), ('java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()', 'DStop')): [24, -11.06531669702963]}

counter: 10
num skipped: 1
{'include': ['java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(java.lang.String)'), (False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()')): [1, -6.147638067603111], (('DSubTree', 'java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [1, -9.014925874769688], (('DSubTree', 'java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [1, -17.47164048999548], (('DSubTree', 'java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False, False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [3, -12.482192683964968], (('DSubTree', 'java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False, False, False, False), ('java.lang.String.String(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()', 'java.io.OutputStream.write(byte[])', 'java.io.OutputStream.close()', 'java.io.OutputStream.close()', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [44, -14.916963275521994]}

counter: 11
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [1, -11.343783378601074], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'DStop')): [2, -8.869993835687637], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()', 'DStop')): [1, -9.844344809651375], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()'), (False, False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()', 'DStop')): [16, -12.707644924521446], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()', 'java.nio.ByteBuffer.array()'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()')): [5, -10.600531280040741], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.lang.System.currentTimeMillis()', 'java.nio.ByteBuffer.array()')): [25, -7.614316046237946]}

counter: 12
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [1, -12.173690795898438], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()')): [12, -11.065041303634644], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()')): [3, -11.945899963378906], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()', 'DStop')): [34, -8.225805070251226]}

counter: 13
num skipped: 1
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [28, -17.687387466430664], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [1, -17.468766413629055], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [2, -15.931494951248169], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [1, -15.49409707763698], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [3, -8.55090343952179], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [15, -8.787300074007362]}

counter: 14
num skipped: 1
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.FilterInputStream.close()')): [20, -12.074564576148987], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.FilterInputStream.close()'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.FilterInputStream.close()', 'DStop')): [30, -11.664229344576597]}

counter: 15
num skipped: 1
{'include': ['java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.contains(java.lang.Object)'), (False, False), ('java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [8, -1.9662559628486633], (('DSubTree', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False), ('java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [42, -2.0873491391539574]}

counter: 16
num skipped: 1
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [1, -16.461729258298874], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [24, -12.15755808353424], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [25, -11.945025438209996]}

counter: 17
num skipped: 1
{'include': ['java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.getInt()'), (False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)')): [17, -9.53343915939331], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)', 'DStop')): [31, -10.705739727243781], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position(int)'), (False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position(int)', 'DStop')): [2, -8.087544854031876]}

counter: 18
num skipped: 1
{'include': ['java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(java.lang.String)'), (False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.append(char)')): [2, -9.983723163604736], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(char)')): [12, -12.025343418121338], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(char)')): [1, -10.691746786236763], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(char)', 'java.lang.String.String(char[])'), (False, False, False, False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(char)', 'java.lang.String.String(char[])', 'DStop')): [35, -13.949553608894348]}

counter: 19
num skipped: 1
{'include': ['java.lang.Thread.interrupt()', 'java.util.concurrent.atomic.AtomicInteger.get()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.util.concurrent.atomic.AtomicInteger.get()')): [6, -13.315608024597168], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.util.concurrent.atomic.AtomicInteger.get()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.util.concurrent.atomic.AtomicInteger.get()', 'DStop')): [16, -11.735293660312891], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.concurrent.atomic.AtomicInteger.get()'), (False, False, False, False), ('java.lang.Thread.interrupt()', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.concurrent.atomic.AtomicInteger.get()', 'DStop')): [28, -8.545626057311893]}

counter: 20
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.isEmpty()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.lang.String.isEmpty()', 'DStop')): [1, -18.69029200077057], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'DStop')): [2, -14.988327234983444], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'DStop')): [6, -20.56597250699997], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.append(java.lang.String)')): [16, -19.793874621391296], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.io.File.getAbsolutePath()')): [9, -16.317160233855247], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()')): [2, -17.556713789701462], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.lang.StringBuilder.toString()')): [3, -15.624390095472336], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.io.BufferedReader.readLine()', 'java.io.Writer.write(java.lang.String)', 'DStop')): [11, -10.615223944187164]}

counter: 21
num skipped: 1
{'include': ['javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTextField.JTextField()'), (False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)')): [2, -8.639566898345947], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)'), (False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)', 'DStop')): [39, -9.240142710506916], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)', 'java.awt.Container.add(java.awt.Component)'), (False, False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JButton.JButton(java.lang.String)', 'java.awt.Container.add(java.awt.Component)', 'DStop')): [9, -4.315673921722919]}

counter: 22
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.sql.PreparedStatement.execute()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.sql.PreparedStatement.execute()')): [4, -20.662208318710327], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.sql.PreparedStatement.execute()'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DStop')): [12, -17.684129774570465], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DStop')): [1, -15.231252014636993], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False, False), ('java.sql.PreparedStatement.execute()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DStop')): [33, -11.15913337469101]}

counter: 23
num skipped: 1
{'include': ['java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.geom.RectangularShape.getX()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getX()'), (False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)')): [1, -15.310769081115723], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)')): [9, -17.404342651367188], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'DStop')): [8, -17.99954104423523], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [23, -14.275461113080382], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList.add(java.lang.Object)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [9, -14.269956789910793]}

counter: 24
num skipped: 1
{'include': ['java.io.File.delete()', '$NOT$java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.delete()'), (False, False), ('java.io.File.delete()', '$NOT$java.io.File.mkdir()')): [5, -14.293752193450928], (('DSubTree', 'java.io.File.delete()', '$NOT$java.io.File.mkdir()'), (False, False, False), ('java.io.File.delete()', '$NOT$java.io.File.mkdir()', 'DStop')): [7, -14.117527306079865], (('DSubTree', 'java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()'), (False, False, False, False), ('java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()', 'DStop')): [8, -7.62168624997139], (('DSubTree', 'java.io.File.delete()', 'java.io.File.getParentFile()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()'), (False, False, False, False, False), ('java.io.File.delete()', 'java.io.File.getParentFile()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()', 'DStop')): [1, -12.227199524641037], (('DSubTree', 'java.io.File.delete()', 'java.io.File.exists()'), (False, False, False), ('java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()')): [15, -5.505276918411255], (('DSubTree', 'java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()'), (False, False, False, False), ('java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()', 'java.io.File.getCanonicalPath()')): [10, -8.139749765396118], (('DSubTree', 'java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()'), (False, False, False, False), ('java.io.File.delete()', 'java.io.File.exists()', '$NOT$java.io.File.mkdir()', 'java.io.File.exists()')): [4, -6.2805774211883545]}

counter: 25
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [16, -8.794557571411133], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()')): [8, -7.078229397535324], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [26, -5.2435930371284485]}

counter: 26
num skipped: 1
{'include': ['java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)')): [11, -14.524085521697998], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(long)', 'DStop')): [1, -13.946271568536758], (('DSubTree', 'java.lang.String.valueOf(long)'), (False, False), ('java.lang.String.valueOf(long)', 'java.util.List<java.lang.Long>.size()')): [2, -11.78382158279419], (('DSubTree', 'java.lang.String.valueOf(long)', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.lang.String.valueOf(long)', 'java.util.List<java.lang.Long>.size()', 'DStop')): [31, -9.948202483355999], (('DSubTree', 'java.lang.String.valueOf(long)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Long>.size()'), (False, False, False, False), ('java.lang.String.valueOf(long)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Long>.size()', 'DStop')): [5, -10.72060891892761]}

counter: 27
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [50, -19.302631378173828]}

counter: 28
num skipped: 1
{'include': ['java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()'), (False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [9, -6.140731334686279], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [5, -11.08599004149437], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [17, -8.365884900093079], (('DSubTree', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [14, -8.926890313625336], (('DSubTree', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()'), (False, False, False, False, False, False), ('java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [1, -11.755589723587036], (('DSubTree', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False, False, False), ('java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [4, -15.252029478549957]}

counter: 29
num skipped: 1
{'include': ['java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getName()'), (False, False), ('java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)')): [33, -8.685702323913574], (('DSubTree', 'java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)'), (False, False, False), ('java.lang.Class<>.getName()', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DStop')): [17, -8.890277131693438]}

counter: 30
num skipped: 1
{'include': ['java.util.Random.nextLong()', 'java.security.SecureRandom.SecureRandom()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.SecureRandom()'), (False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()')): [20, -10.404172897338867], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'DStop')): [5, -11.984389331191778], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.lang.System.currentTimeMillis()', 'java.util.Random.nextLong()')): [25, -9.563034534454346]}

counter: 31
num skipped: 1
{'include': ['java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()')): [18, -8.637243032455444], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'DStop')): [30, -10.268245693761855], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.lang.Long.toString(long)', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.lang.Long.toString(long)', 'java.util.List<java.lang.Integer>.iterator()', 'DStop')): [2, -11.242206295020878]}

counter: 32
num skipped: 1
{'include': ['java.io.FileReader.FileReader(java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileReader.FileReader(java.lang.String)'), (False, False), ('java.io.FileReader.FileReader(java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)')): [32, -2.5936246812343597], (('DSubTree', 'java.io.FileReader.FileReader(java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False), ('java.io.FileReader.FileReader(java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'DStop')): [18, -3.745588555932045]}

counter: 33
num skipped: 1
{'include': ['java.util.Random.nextInt(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextInt(int)'), (False, False), ('java.util.Random.nextInt(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [15, -21.866533935070038], (('DSubTree', 'java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()'), (False, False, False), ('java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [4, -12.421727376291528], (('DSubTree', 'java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.List<>.get(int)')): [23, -18.25347964069806], (('DSubTree', 'java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.Random.nextInt(int)', 'java.util.TimeZone.getDefault()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.System.currentTimeMillis()')): [8, -11.31283656693995]}

counter: 34
num skipped: 1
{'include': ['$NOT$java.awt.GraphicsEnvironment.isHeadless()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.awt.GraphicsEnvironment.isHeadless()'), (False, False), ('$NOT$java.awt.GraphicsEnvironment.isHeadless()', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()')): [9, -35.15826416015625], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'), (False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', '$NOT$java.awt.GraphicsEnvironment.isHeadless()')): [4, -16.82252836227417], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', '$NOT$java.awt.GraphicsEnvironment.isHeadless()'), (False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', '$NOT$java.awt.GraphicsEnvironment.isHeadless()', 'DStop')): [37, -12.440021978924051]}

counter: 35
num skipped: 1
{'include': ['javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [33, -6.164537191390991], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'), (False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'DStop')): [3, -8.436514630913734], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'), (False, False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'DStop')): [6, -12.508426446467638], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.dispose()'), (False, False, False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.dispose()', 'DStop')): [2, -12.046815405599773], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False, False), ('javax.swing.JComponent.getHeight()', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [3, -9.864525556564331], (('DSubTree', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.max(int,int)'), (False, False, False), ('javax.swing.JComponent.getHeight()', 'java.lang.Math.max(int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [3, -10.53607439994812]}

counter: 36
num skipped: 1
{'include': ['java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])', 'DStop')): [37, -2.9878314286470413], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.Writer.write(char[])', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)')): [13, -8.603340294212103]}

counter: 37
num skipped: 1
{'include': ['java.util.Date.toString()', 'java.lang.Thread.yield()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.toString()'), (False, False), ('java.util.Date.toString()', 'java.lang.Thread.yield()')): [4, -21.240888595581055], (('DSubTree', 'java.lang.Thread.yield()'), (False, False), ('java.lang.Thread.yield()', 'java.util.Date.toString()')): [3, -15.53881025314331], (('DSubTree', 'java.lang.Thread.yield()', 'java.util.Date.Date()'), (False, False, False), ('java.lang.Thread.yield()', 'java.util.Date.Date()', 'java.util.Date.toString()')): [9, -13.12351781129837], (('DSubTree', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()'), (False, False, False, False), ('java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()')): [4, -17.07494020462036], (('DSubTree', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.getTime()'), (False, False, False, False, False), ('java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.getTime()', 'java.util.Date.toString()')): [2, -20.380658090114594], (('DSubTree', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()'), (False, False, False, False, False), ('java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()', 'DStop')): [20, -13.925646968185902], (('DSubTree', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()', 'java.lang.Thread.sleep(long)'), (False, False, False, False, False, False), ('java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()', 'java.lang.Thread.sleep(long)', 'DStop')): [2, -12.418188706040382], (('DSubTree', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()', 'java.lang.Thread.currentThread()'), (False, False, False, False, False, False), ('java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.util.Date.Date()', 'java.util.Date.toString()', 'java.lang.Thread.currentThread()', 'DStop')): [6, -14.34755479451269]}

counter: 38
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [2, -6.39007043838501], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [31, -3.3999673426151276], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [17, -4.752847135066986]}

counter: 39
num skipped: 1
{'include': ['javax.naming.InitialContext.InitialContext()', 'javax.naming.Context.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'javax.naming.Context.close()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'javax.naming.Context.close()', 'DStop')): [11, -18.23390588304028], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.util.Arrays.asList(T[])', 'javax.naming.Context.close()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.util.Arrays.asList(T[])', 'javax.naming.Context.close()', 'DStop')): [6, -15.647305046848487], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.util.Arrays.asList(T[])'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.util.Arrays.asList(T[])', 'javax.naming.Context.close()')): [33, -9.013141214847565]}

counter: 40
num skipped: 1
{'include': ['java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.toString()'), (False, False), ('java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)')): [3, -8.32146954536438], (('DSubTree', 'java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)'), (False, False, False), ('java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)', 'DStop')): [35, -4.187407337129116], (('DSubTree', 'java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False), ('java.lang.Long.toString()', 'java.lang.Long.parseLong(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [12, -9.239038974046707]}

counter: 41
num skipped: 1
{'include': ['java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [42, -11.017623012885451], (('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'java.util.List.set(int,java.lang.Object)')): [8, -6.1030590534210205]}

counter: 42
num skipped: 1
{'include': ['java.sql.Connection.setAutoCommit(boolean)', 'java.sql.PreparedStatement.setInt(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False), ('java.sql.Connection.setAutoCommit(boolean)', 'java.sql.PreparedStatement.setInt(int,int)')): [2, -27.25607919692993], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Connection.setAutoCommit(boolean)')): [17, -25.70444107055664], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Connection.setAutoCommit(boolean)', 'DStop')): [4, -20.569147912057815], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.Connection.setAutoCommit(boolean)')): [27, -21.35176692903042]}

counter: 43
num skipped: 1
{'include': ['java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Float.valueOf(float)'), (False, False), ('java.lang.Float.valueOf(float)', 'java.lang.Double.valueOf(double)')): [6, -7.702044725418091], (('DSubTree', 'java.lang.Double.valueOf(double)'), (False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)')): [1, -6.342838287353516], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)'), (False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)', 'DStop')): [4, -8.00456741079688], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [2, -7.363235540688038], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Float.valueOf(float)', 'java.lang.Integer.valueOf(int)', 'DStop')): [5, -5.125373855233192], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)', 'java.lang.Integer.valueOf(int)', 'DStop')): [3, -6.424131333827972], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)'), (False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)', 'DStop')): [21, -4.9742899388074875], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Integer.valueOf(int)', 'java.lang.Float.valueOf(float)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [8, -4.937918744981289]}

counter: 44
num skipped: 1
{'include': ['java.util.TimeZone.getDefault()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TimeZone.getDefault()'), (False, False), ('java.util.TimeZone.getDefault()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [38, -9.643066227436066], (('DSubTree', 'java.util.TimeZone.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.util.TimeZone.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [11, -9.401690244674683], (('DSubTree', 'java.util.TimeZone.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False, False), ('java.util.TimeZone.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [1, -8.887917280197144]}

counter: 45
num skipped: 1
{'include': ['java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.emptyList()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])'), (False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.emptyList()')): [2, -5.166049212217331], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.length()'), (False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.length()', 'java.util.Collections.emptyList()')): [1, -8.679005913436413], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()')): [5, -11.503782510757446], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()')): [5, -12.39579975605011], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [3, -12.652841481380165], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.getBytes()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.getBytes()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [2, -12.44859641417861], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.getBytes()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False, False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.lang.String.getBytes()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.emptyList()', 'java.util.Collections.singletonList(Tau_T)', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [32, -11.293544735759497]}

counter: 46
num skipped: 1
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [7, -12.374729871749878], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [43, -9.463675727602094]}

counter: 47
num skipped: 1
{'include': ['java.awt.Container.add(java.awt.Component)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.add(java.awt.Component)'), (False, False), ('java.awt.Container.add(java.awt.Component)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [14, -28.36546230316162], (('DSubTree', 'java.awt.Container.add(java.awt.Component)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('java.awt.Container.add(java.awt.Component)', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [16, -10.758409857749939], (('DSubTree', 'java.awt.Container.add(java.awt.Component)', 'java.awt.BorderLayout.BorderLayout()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False), ('java.awt.Container.add(java.awt.Component)', 'java.awt.BorderLayout.BorderLayout()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [20, -11.338871479034424]}

counter: 48
num skipped: 1
{'include': ['java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FilterInputStream.read(byte[])'), (False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [16, -15.258235931396484], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()')): [6, -15.414655804634094], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayOutputStream.close()')): [1, -15.10147076845169], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayOutputStream.close()')): [2, -17.590627565979958], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()')): [4, -16.113863945007324], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()')): [3, -20.827782690525055], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [5, -15.969073846936226], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [13, -19.258625596761703]}

counter: 49
num skipped: 1
{'include': ['java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.iterator()'), (False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.add(java.lang.Object)')): [1, -12.876487510278821], (('DSubTree', 'java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()'), (False, False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)')): [32, -3.6709395200014114], (('DSubTree', 'java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, False, False), ('java.util.ArrayList.iterator()', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.size()')): [17, -6.949427664279938]}

counter: 50
num skipped: 1
{'include': ['javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.tree.DefaultMutableTreeNode.getUserObject()'), (False, False), ('javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()')): [49, -27.733930833637714], (('DSubTree', 'javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()'), (False, False, False), ('javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()', 'DStop')): [1, -27.40723380749114]}

counter: 51
num skipped: 1
{'include': ['java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.close()'), (False, False), ('java.io.InputStream.close()', 'java.lang.StringBuilder.setLength(int)')): [2, -29.24594497680664], (('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.io.InputStream.close()')): [2, -22.446284294128418], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.io.InputStream.close()'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.io.InputStream.close()', 'java.lang.StringBuilder.append(java.lang.String)')): [1, -13.756037473678589], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.io.InputStream.close()'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.io.InputStream.close()', 'java.util.Map<java.lang.String,java.lang.String>.entrySet()')): [45, -10.856746852397919]}

counter: 52
num skipped: 1
{'include': ['java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()'), (False, False, False), ('java.lang.Long.parseLong(java.lang.String)', 'java.lang.Long.toString()', 'DStop')): [50, -1.7942292019724846]}

counter: 53
num skipped: 1
{'include': ['java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.Arrays.equals(byte[],byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.Arrays.equals(byte[],byte[])')): [2, -10.406965255737305], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [4, -6.052784014493227], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [33, -9.292950570583344], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [7, -11.085054948925972], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.delete()'), (False, False, False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.delete()', 'DStop')): [4, -9.16248520463705]}

counter: 54
num skipped: 1
{'include': ['java.awt.Toolkit.getDefaultToolkit()', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)')): [8, -20.442437648773193], (('DSubTree', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'), (False, False), ('java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()')): [39, -22.17428970336914], (('DSubTree', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False), ('java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()', 'DStop')): [3, -22.88950172625482]}
