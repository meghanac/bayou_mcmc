data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'DStop')): [6, -0.32147531284135766], (('DSubTree', 'java.net.Socket.getOutputStream()'), (False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)')): [18, -0.20201509911566973], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()'), (False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'DStop')): [1, -5.333741468552034], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.lang.StringBuilder.toString()', 'DStop')): [5, -9.025460172444582], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.util.Vector.Vector()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.util.Vector.Vector()', 'java.lang.StringBuilder.toString()', 'DStop')): [8, -8.565168142318726], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.util.Vector.Vector()', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.util.Vector.Vector()', 'java.lang.StringBuilder.toString()', 'DStop')): [12, -6.617431550170295]}

counter: 1
num skipped: 0
{'include': ['java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])')): [10, -1.1563763618469238], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])'), (False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])', 'DStop')): [4, -3.5242427587509155], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()'), (False, False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'DStop')): [21, -2.56168569996953], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])'), (False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()')): [6, -0.7104455054504797], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])'), (False, False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()')): [1, -2.757249563932419], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'java.io.InputStream.close()')): [3, -4.538377701304853], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'java.io.InputStream.close()'), (False, False, False, False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'java.io.InputStream.close()', 'DStop')): [4, -5.567565372213721], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.InputStream.close()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'DStop')): [1, -1.8645776310004294]}

counter: 2
num skipped: 0
{'include': ['java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.compareTo(java.math.BigInteger)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.valueOf(long)'), (False, False), ('java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.compareTo(java.math.BigInteger)')): [1, -1.2030986621975899], (('DSubTree', 'java.math.BigInteger.compareTo(java.math.BigInteger)'), (False, False), ('java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.valueOf(long)')): [28, -2.515758126974106], (('DSubTree', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.valueOf(long)'), (False, False, False), ('java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.valueOf(long)', 'DStop')): [21, -0.8304214894305915]}

counter: 3
num skipped: 0
{'include': ['java.util.HashSet.HashSet()', 'java.lang.Integer.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet.HashSet()', 'java.lang.Integer.intValue()'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.lang.Integer.intValue()', 'DStop')): [19, -1.7846019733697176], (('DSubTree', 'java.util.HashSet.HashSet()'), (False, False), ('java.util.HashSet.HashSet()', 'java.lang.Integer.intValue()')): [16, -2.3336547017097473], (('DSubTree', 'java.util.HashSet.HashSet()', 'java.lang.Integer.toString()'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.lang.Integer.toString()', 'java.lang.Integer.intValue()')): [3, -5.034742779564112], (('DSubTree', 'java.util.HashSet.HashSet()', 'java.util.Set.add(java.lang.Object)'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.util.Set.add(java.lang.Object)', 'java.lang.Integer.intValue()')): [9, -2.2135982923209667], (('DSubTree', 'java.util.HashSet.HashSet()', 'java.util.Set.add(java.lang.Object)', 'java.lang.Integer.intValue()'), (False, False, False, False), ('java.util.HashSet.HashSet()', 'java.util.Set.add(java.lang.Object)', 'java.lang.Integer.intValue()', 'DStop')): [3, -2.5342995449900627]}

counter: 4
num skipped: 0
{'include': ['java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)')): [6, -5.834231972694397], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [21, -1.3311693649739027], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.io.File.exists()', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.io.File.exists()', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [23, -2.1941160545684397]}

counter: 5
num skipped: 0
{'include': ['java.util.Date.getTime()', 'java.util.Collection.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.getTime()'), (False, False), ('java.util.Date.getTime()', 'java.util.Collection.iterator()')): [5, -1.938632870092988], (('DSubTree', 'java.util.Date.getTime()', 'java.lang.Long.Long(long)'), (False, False, False), ('java.util.Date.getTime()', 'java.lang.Long.Long(long)', 'java.util.Collection.iterator()')): [45, -2.8789359033107758]}

counter: 6
num skipped: 0
{'include': ['java.lang.System.currentTimeMillis()', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.currentTimeMillis()'), (False, False), ('java.lang.System.currentTimeMillis()', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()')): [8, -2.35203414876014], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.Math.min(int,int)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.Math.min(int,int)', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()')): [5, -5.665955126285553], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.Math.min(int,int)', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()'), (False, False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.Math.min(int,int)', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DStop')): [37, -2.9685482326895]}

counter: 7
num skipped: 0
{'include': ['java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position(int)'), (False, False), ('java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)')): [21, -2.2066218852996826], (('DSubTree', 'java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'), (False, False, False), ('java.nio.Buffer.position(int)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'DStop')): [29, -0.6035354789346457]}

counter: 8
num skipped: 0
{'include': ['java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)')): [3, -5.242211401462555], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)'), (False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.setClip(java.awt.Shape)')): [9, -7.924990631174296], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.clip(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)')): [9, -6.961793794500409], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)'), (False, False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)', 'DStop')): [1, -7.61858873302117], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)', 'DStop')): [2, -0.4865231530275196], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'), (False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)')): [1, -0.313274759799242], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)'), (False, False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'DStop')): [11, -4.2302532087342115], (('DSubTree', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics.setClip(java.awt.Shape)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)')): [14, -2.6805025016656145]}

counter: 9
num skipped: 0
{'include': ['javax.swing.JCheckBox.JCheckBox()', 'java.awt.Container.add(java.awt.Component)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JCheckBox.JCheckBox()'), (False, False), ('javax.swing.JCheckBox.JCheckBox()', 'java.awt.Container.add(java.awt.Component)')): [31, -3.529504045844078], (('DSubTree', 'javax.swing.JCheckBox.JCheckBox()', 'java.awt.Container.add(java.awt.Component)'), (False, False, False), ('javax.swing.JCheckBox.JCheckBox()', 'java.awt.Container.add(java.awt.Component)', 'DStop')): [19, -1.8369307073007803]}

counter: 10
num skipped: 0
{'include': ['java.io.Reader.read(char[])', 'java.lang.String.String(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.Reader.read(char[])'), (False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])')): [11, -0.7206145375967026], (('DSubTree', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])'), (False, False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DStop')): [39, -1.0517887636087835]}

counter: 11
num skipped: 0
{'include': ['java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)'), (False, False), ('java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)')): [1, -12.600536465644836], (('DSubTree', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)'), (False, False), ('java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)')): [39, -12.963935375213623], (('DSubTree', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)'), (False, False, False), ('java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)')): [10, -4.227126359939575]}

counter: 12
num skipped: 0
{'include': ['java.util.Arrays.sort(float[])', 'java.lang.Thread.join()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(float[])'), (False, False), ('java.util.Arrays.sort(float[])', 'java.lang.Thread.join()')): [20, -12.144450545310974], (('DSubTree', 'java.util.Arrays.sort(float[])', 'java.lang.Thread.join()'), (False, False, False), ('java.util.Arrays.sort(float[])', 'java.lang.Thread.join()', 'DStop')): [30, -6.2477838518098]}

counter: 13
num skipped: 0
{'include': ['java.lang.Float.floatValue()', 'java.lang.Double.Double(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Float.floatValue()'), (False, False), ('java.lang.Float.floatValue()', 'java.lang.Double.Double(double)')): [7, -3.955511901527643], (('DSubTree', 'java.lang.Float.floatValue()', 'java.lang.Double.Double(double)'), (False, False, False), ('java.lang.Float.floatValue()', 'java.lang.Double.Double(double)', 'DStop')): [43, -1.717439960630145]}

counter: 14
num skipped: 0
{'include': ['java.lang.String.String()', 'java.io.InputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String()', 'java.io.InputStream.close()'), (False, False, False), ('java.lang.String.String()', 'java.io.InputStream.close()', 'DStop')): [43, -3.7292765118181705], (('DSubTree', 'java.lang.String.String()'), (False, False), ('java.lang.String.String()', 'java.io.InputStream.close()')): [7, -1.1486084535717964]}

counter: 15
num skipped: 0
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.signum(float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.signum(float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.signum(float)', 'DStop')): [50, -0.21588977612555027]}

counter: 16
num skipped: 0
{'include': ['java.lang.Math.random()', 'java.awt.Color.getGreen()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.random()'), (False, False), ('java.lang.Math.random()', 'java.awt.Color.getGreen()')): [3, -15.293175138533115], (('DSubTree', 'java.lang.Math.random()', 'java.lang.String.length()'), (False, False, False), ('java.lang.Math.random()', 'java.lang.String.length()', 'java.awt.Color.getGreen()')): [5, -18.401555240154266], (('DSubTree', 'java.lang.Math.random()', 'java.lang.String.length()', 'java.awt.Color.getGreen()'), (False, False, False, False), ('java.lang.Math.random()', 'java.lang.String.length()', 'java.awt.Color.getGreen()', 'DStop')): [16, -11.234102189540863], (('DSubTree', 'java.lang.Math.random()', 'java.lang.String.length()', 'java.awt.Color.getGreen()'), (False, False, False, False), ('java.lang.Math.random()', 'java.lang.String.length()', 'java.awt.Color.getGreen()', 'java.lang.Math.min(int,int)')): [26, -10.105252150446177]}

counter: 17
num skipped: 0
{'include': ['java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.lang.String>.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.endsWith(java.lang.String)'), (False, False), ('java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.lang.String>.size()')): [18, -1.9085662961006165], (('DSubTree', 'java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.lang.String>.size()'), (False, False, False), ('java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.lang.String>.size()', 'DStop')): [32, -3.066531788557768]}

counter: 18
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [2, -13.308113098144531], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [48, -13.33870016457513]}

counter: 19
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()')): [5, -9.627664513885975], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.split(java.lang.String)', 'java.io.InputStream.available()')): [31, -8.925569653511047], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.split(java.lang.String)'), (False, False, False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.io.InputStream.available()')): [6, -9.664701960980892], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.toCharArray()'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.toCharArray()', 'java.io.InputStream.available()')): [8, -5.428726810961962]}

counter: 20
num skipped: 0
{'include': ['java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)'), (False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [11, -16.97695565223694], (('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [9, -14.278372116266837], (('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [27, -8.464763067661352], (('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [3, -1.6455493778921664]}

counter: 21
num skipped: 0
{'include': ['java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()'), (False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)')): [7, -0.347779406234622], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'DStop')): [14, -1.0544977673562244], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position(int)'), (False, False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position(int)', 'DStop')): [28, -1.5468344199471176], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position(int)')): [1, -1.4533668253570795]}

counter: 22
num skipped: 0
{'include': ['$NOT$java.io.File.exists()', 'java.util.regex.Pattern.quote(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.exists()'), (False, False), ('$NOT$java.io.File.exists()', 'java.util.regex.Pattern.quote(java.lang.String)')): [8, -2.008101999759674], (('DSubTree', '$NOT$java.io.File.exists()', 'java.util.regex.Pattern.quote(java.lang.String)'), (False, False, False), ('$NOT$java.io.File.exists()', 'java.util.regex.Pattern.quote(java.lang.String)', 'DStop')): [42, -2.106547527015209]}

counter: 23
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [2, -1.4625282734632492], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [12, -0.5683779418468475], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [24, -2.898117071017623], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)')): [12, -0.7813287787139416]}

counter: 24
num skipped: 0
{'include': ['java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.currentThread()'), (False, False), ('java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()')): [27, -1.6331990831531584], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()', 'DStop')): [23, -0.8569813463836908]}

counter: 25
num skipped: 0
{'include': ['java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)'), (False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()')): [3, -10.168786436319351], (('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()'), (False, False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'DStop')): [11, -4.366238166578114], (('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.lang.String.lastIndexOf(java.lang.String)'), (False, False, False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.lang.String.lastIndexOf(java.lang.String)', 'DStop')): [36, -12.178884085267782]}

counter: 26
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [1, -14.362932778894901], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [3, -13.41685352101922], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [7, -12.863036543130875], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DStop')): [8, -11.937302112579346], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'DStop')): [1, -14.553493052721024], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()'), (False, False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()', 'DStop')): [8, -11.771510727703571], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.net.URL.openStream()', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()'), (False, False, False, False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.net.URL.openStream()', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()', 'DStop')): [10, -13.042239431291819], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()'), (False, False, False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStream.close()', 'DStop')): [12, -10.685201227664948]}

counter: 27
num skipped: 0
{'include': ['java.net.URL.toExternalForm()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.toExternalForm()'), (False, False), ('java.net.URL.toExternalForm()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)')): [2, -5.014833748340607], (('DSubTree', 'java.net.URL.toExternalForm()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'), (False, False, False), ('java.net.URL.toExternalForm()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'DStop')): [48, -3.3506861076457426]}

counter: 28
num skipped: 0
{'include': ['java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.forName(java.lang.String)'), (False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)')): [8, -0.09654576975299278], (('DSubTree', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [36, -2.4279355704784393], (('DSubTree', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)', 'DStop')): [6, -0.5094801438972354]}

counter: 29
num skipped: 0
{'include': ['java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.append(int)'), (False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.setLength(int)')): [50, -1.6138017773628235]}

counter: 30
num skipped: 0
{'include': ['java.util.LinkedList.LinkedList()', 'java.util.Vector.Vector()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedList.LinkedList()'), (False, False), ('java.util.LinkedList.LinkedList()', 'java.util.Vector.Vector()')): [5, -0.9964648131281137], (('DSubTree', 'java.util.LinkedList.LinkedList()', 'java.util.Vector.Vector()'), (False, False, False), ('java.util.LinkedList.LinkedList()', 'java.util.Vector.Vector()', 'DStop')): [45, -0.37672770698554814]}

counter: 31
num skipped: 0
{'include': ['java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.Socket.getOutputStream()'), (False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)')): [36, -0.46234640304464847], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'DStop')): [14, -0.992950633604778]}

counter: 32
num skipped: 0
{'include': ['$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.Set<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [27, -1.540002410300076], (('DSubTree', '$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False), ('$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [23, -1.9615737641142914]}

counter: 33
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()')): [8, -3.591244339942932], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()', 'DStop')): [42, -2.4019802045077085]}

counter: 34
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [49, -1.5366276018321514], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [1, -0.5377980734920129]}

counter: 35
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.io.PrintWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.io.PrintWriter.flush()')): [3, -9.95669965352863], (('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'), (False, False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'java.io.PrintWriter.flush()')): [29, -7.248220772249624], (('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'java.io.PrintWriter.flush()'), (False, False, False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'java.io.PrintWriter.flush()', 'DStop')): [18, -4.668778522696812]}

counter: 36
num skipped: 0
{'include': ['java.io.Reader.read(char[])', 'java.lang.String.String(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.Reader.read(char[])'), (False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])')): [35, -9.754899621009827], (('DSubTree', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])'), (False, False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DStop')): [15, -5.1196590177714825]}

counter: 37
num skipped: 0
{'include': ['java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.close()'), (False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.close()', 'DStop')): [2, -7.679037155583501], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.close()'), (False, False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.close()', 'DStop')): [32, -6.428344756364822], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [16, -9.823391451500356]}

counter: 38
num skipped: 0
{'include': ['$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [2, -4.278731755679473], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [4, -4.671147285145707], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [5, -2.342627649189126], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [23, -2.0972389429805958], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [16, -1.5619778484065137]}

counter: 39
num skipped: 0
{'include': ['java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FlowLayout.FlowLayout()'), (False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)')): [21, -1.0840672552585602], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)'), (False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'javax.swing.JLabel.JLabel(java.lang.String)')): [3, -2.991155043244362], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)'), (False, False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'javax.swing.JLabel.JLabel(java.lang.String)')): [8, -5.973248178139329], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)')): [1, -2.211968061514199], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)'), (False, False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'DStop')): [4, -1.3247303366661072], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'java.awt.Color.Color(int,int,int)'), (False, False, False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'java.awt.Color.Color(int,int,int)', 'DStop')): [10, -4.895469218492508], (('DSubTree', 'java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'java.awt.Color.Color(int,int,int)'), (False, False, False, False), ('java.awt.FlowLayout.FlowLayout()', 'javax.swing.JPanel.JPanel(java.awt.LayoutManager)', 'java.awt.Color.Color(int,int,int)', 'DStop')): [3, -5.431735247373581]}

counter: 40
num skipped: 0
{'include': ['java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.getInt()'), (False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit()')): [26, -1.0123495585285127], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit()'), (False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.Buffer.limit()', 'DStop')): [24, -2.283050950150937]}

counter: 41
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [12, -0.05838114395737648], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [38, -0.10015178471803665]}

counter: 42
num skipped: 0
{'include': ['$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.Set<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [50, -0.7108951322734356]}

counter: 43
num skipped: 0
{'include': ['java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.jar.Manifest.getMainAttributes()'), (False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)')): [31, -0.9878929555416107], (('DSubTree', 'java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'), (False, False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'DStop')): [19, -2.2636193931102753]}

counter: 44
num skipped: 0
{'include': ['java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.sql.Statement.executeQuery(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<java.lang.String>.HashSet<String>()'), (False, False), ('java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.sql.Statement.executeQuery(java.lang.String)')): [7, -3.0103114834055305], (('DSubTree', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DStop', 'DStop')): [36, -6.013637084513903], (('DSubTree', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.lang.String.split(java.lang.String)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.lang.String.split(java.lang.String)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DStop', 'DStop')): [7, -10.816862399224192]}
