data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 35


counter: 0
num skipped: 0
{'include': ['$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [3, -0.12678093696013093], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)')): [4, -1.8592276698473142], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [7, -0.06384511238138657], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [18, -0.22885823957039975], (('DSubTree', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [18, -0.8913430776447058]}

counter: 1
num skipped: 0
{'include': ['java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'DStop')): [1, -6.824287504889071], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Long.valueOf(long)'), (False, False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Long.valueOf(long)', 'DStop')): [4, -8.633334611542523], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Long.valueOf(long)')): [2, -9.84992721118033], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Long.valueOf(long)')): [2, -6.856466606259346], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Long.valueOf(long)')): [8, -7.756573943421245], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Double.valueOf(double)', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Double.valueOf(double)', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Long.valueOf(long)')): [3, -8.963682278990746], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)'), (False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Long.valueOf(long)', 'java.lang.Boolean.valueOf(boolean)')): [6, -2.3489455292001367], (('DSubTree', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Long.valueOf(long)'), (False, False, False, False), ('java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Long.valueOf(long)', 'java.lang.Boolean.valueOf(boolean)')): [24, -1.941720888018608]}

counter: 2
num skipped: 0
{'include': ['javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.ArrayList.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'), (False, False), ('javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.ArrayList.add(java.lang.Object)')): [9, -32.08260917663574], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)')): [6, -23.46380376815796], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.Random.Random(long)'), (False, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.Random.Random(long)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)')): [5, -23.918643712997437], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'), (False, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'DStop')): [2, -19.207384313456714], (('DSubTree', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.ArrayList.add(java.lang.Object)'), (False, False, False), ('javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.ArrayList.add(java.lang.Object)', 'DStop')): [28, -16.638530005700886]}

counter: 3
num skipped: 0
{'include': ['java.io.InputStream.read()', 'java.util.Arrays.equals(byte[],byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read()'), (False, False), ('java.io.InputStream.read()', 'java.util.Arrays.equals(byte[],byte[])')): [5, -1.2149146050214767], (('DSubTree', 'java.io.InputStream.read()', 'java.io.InputStream.available()'), (False, False, False), ('java.io.InputStream.read()', 'java.io.InputStream.available()', 'java.util.Arrays.equals(byte[],byte[])')): [12, -0.4713655263185501], (('DSubTree', 'java.io.InputStream.read()', 'java.io.InputStream.available()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False), ('java.io.InputStream.read()', 'java.io.InputStream.available()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [33, -1.6416418366134167]}

counter: 4
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [43, -1.9856797754764557], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [7, -1.2330695316195488]}

counter: 5
num skipped: 0
{'include': ['java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', '$NOT$java.util.Arrays.equals(long[],long[])'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', '$NOT$java.util.Arrays.equals(long[],long[])', 'java.io.InputStreamReader.close()')): [3, -11.190826684236526], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()', '$NOT$java.util.Arrays.equals(long[],long[])')): [2, -8.15957748843357], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)'), (False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()')): [8, -1.3423466980457306], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()', 'java.io.InputStreamReader.close()')): [16, -0.9180205068551004], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()', 'DStop')): [21, -1.1235557170584798]}

counter: 6
num skipped: 0
{'include': ['java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'DStop')): [49, -1.7500353950308636], (('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)')): [1, -0.7065938711166382]}

counter: 7
num skipped: 0
{'include': ['javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JLabel.JLabel()'), (False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)')): [3, -1.0226493291556835], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)'), (False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.awt.Dimension.Dimension(int,int)')): [8, -4.216125503182411], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()'), (False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)')): [17, -2.2928821133682504], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'DStop')): [2, -6.434125628322363], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [5, -2.5736285124439746], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False, False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [3, -7.2184003088623285], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False, False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)')): [3, -6.455085013061762], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False, False, False, False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)')): [9, -2.1377796083688736]}

counter: 8
num skipped: 0
{'include': ['java.io.FileOutputStream.write(byte[])', 'java.io.ByteArrayOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileOutputStream.write(byte[])'), (False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.ByteArrayOutputStream.close()')): [5, -15.392567165195942], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.ByteArrayOutputStream.close()', 'DStop')): [19, -12.56759015377611], (('DSubTree', 'java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False), ('java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])', 'DStop')): [1, -11.683005310595036], (('DSubTree', 'java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()'), (False, False, False, False), ('java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'DStop')): [5, -12.872744783759117], (('DSubTree', 'java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False), ('java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()')): [5, -12.815112479031086], (('DSubTree', 'java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.close()'), (False, False, False), ('java.io.ByteArrayOutputStream.close()', 'java.io.FileOutputStream.close()', 'java.io.FileOutputStream.write(byte[])')): [1, -10.884860038757324], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()'), (False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.close()')): [5, -11.79458595532924], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'DStop')): [5, -13.210710101760924], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'DStop')): [2, -15.702139100176282], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()', 'DStop')): [1, -17.340791705995798], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()', 'DStop')): [1, -14.769315615296364]}

counter: 9
num skipped: 0
{'include': ['java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()'), (False, False, False), ('java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)')): [18, -2.6640021950006485], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet()'), (False, False), ('java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()')): [9, -0.7692754454910755], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()'), (False, False, False), ('java.util.HashSet<Tau_E>.HashSet()', 'java.sql.ResultSet.next()', 'DStop')): [23, -4.005559744662605]}

counter: 10
num skipped: 0
{'include': ['java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [5, -1.5726531147956848], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop')): [42, -1.5850753337144852], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Arrays.asList(T[])'), (False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Arrays.asList(T[])', 'DStop')): [3, -6.05228744354099]}

counter: 11
num skipped: 0
{'include': ['java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)')): [14, -5.594667371362448], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'), (False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'DStop')): [36, -2.2904993852134794]}

counter: 12
num skipped: 0
{'include': ['java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.setLength(int)')): [20, -3.297454297542572], (('DSubTree', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [30, -6.770725282141939]}

counter: 13
num skipped: 0
{'include': ['java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.HashMap()'), (False, False), ('java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()')): [24, -2.6668434143066406], (('DSubTree', 'java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False, False), ('java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.StringBuffer.StringBuffer(java.lang.String)')): [17, -10.406146340072155], (('DSubTree', 'java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False, False), ('java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.Throwable.toString()')): [7, -6.272285223007202], (('DSubTree', 'java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.Throwable.toString()'), (False, False, False, False), ('java.util.HashMap.HashMap()', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.Throwable.toString()', 'DStop')): [2, -5.1260130777955055]}

counter: 14
num skipped: 0
{'include': ['java.lang.String.intern()', 'java.lang.Exception.Exception(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.intern()'), (False, False), ('java.lang.String.intern()', 'java.lang.Exception.Exception(java.lang.String)')): [39, -1.1360605210065842], (('DSubTree', 'java.lang.String.intern()', 'java.lang.Exception.Exception(java.lang.String)'), (False, False, False), ('java.lang.String.intern()', 'java.lang.Exception.Exception(java.lang.String)', 'DStop')): [11, -3.2879249874677043]}

counter: 15
num skipped: 0
{'include': ['java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)')): [3, -10.430350184440613], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)'), (False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)')): [47, -7.569267988204956]}

counter: 16
num skipped: 0
{'include': ['java.awt.Component.getHeight()', 'java.awt.Component.getX()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getHeight()', 'java.awt.Component.getX()'), (False, False, False), ('java.awt.Component.getHeight()', 'java.awt.Component.getX()', 'java.awt.Component.getY()')): [19, -4.51027487963438], (('DSubTree', 'java.awt.Component.getHeight()', 'java.awt.Component.getWidth()', 'java.awt.Component.getX()'), (False, False, False, False), ('java.awt.Component.getHeight()', 'java.awt.Component.getWidth()', 'java.awt.Component.getX()', 'java.awt.Component.getY()')): [15, -4.778737455606461], (('DSubTree', 'java.awt.Component.getHeight()', 'java.awt.Component.getWidth()'), (False, False, False), ('java.awt.Component.getHeight()', 'java.awt.Component.getWidth()', 'java.awt.Component.getX()')): [16, -2.9816227331757545]}

counter: 17
num skipped: 0
{'include': ['java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.bind(java.net.SocketAddress)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.bind(java.net.SocketAddress)'), (False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.bind(java.net.SocketAddress)', 'DStop')): [19, -15.324996481984272], (('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)'), (False, False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)', 'DStop')): [4, -10.297596454096492], (('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)')): [27, -4.281613916158676]}

counter: 18
num skipped: 0
{'include': ['java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.security.MessageDigest.getInstance(java.lang.String)')): [3, -13.11119194328785], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.awt.Toolkit.getDefaultToolkit()', 'java.security.MessageDigest.getInstance(java.lang.String)')): [1, -12.197772979736328], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Toolkit.getDefaultToolkit()')): [2, -11.380625292658806], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.awt.Toolkit.getDefaultToolkit()')): [4, -7.441922789439559], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [8, -3.578765571117401], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [12, -8.74595467094332], (('DSubTree', 'java.lang.System.exit(int)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False, False, False), ('java.lang.System.exit(int)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [5, -8.706632833433105], (('DSubTree', 'java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False), ('java.lang.System.exit(int)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'DStop')): [14, -7.231078684329987], (('DSubTree', 'java.lang.System.exit(int)', 'java.io.FileReader.FileReader(java.lang.String)', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False, False), ('java.lang.System.exit(int)', 'java.io.FileReader.FileReader(java.lang.String)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'DStop')): [1, -9.088318848982453]}

counter: 19
num skipped: 0
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)')): [6, -0.3725559711456299], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)', 'DStop')): [44, -2.9897896498441696]}

counter: 20
num skipped: 0
{'include': ['java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.TimeUnit.toMillis(long)'), (False, False), ('java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)')): [50, -3.606278053135611]}

counter: 21
num skipped: 0
{'include': ['$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getConstructor(java.lang.Class[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False), ('$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getConstructor(java.lang.Class[])')): [27, -1.7125734686851501], (('DSubTree', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False, False), ('$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop')): [23, -1.1795195937156677]}

counter: 22
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [9, -7.0290174074471], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuilder.toString()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [16, -6.594276028685272], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuilder.toString()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuilder.toString()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DStop')): [25, -7.746985388919711]}

counter: 23
num skipped: 0
{'include': ['java.util.Properties.Properties()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Properties.Properties()'), (False, False), ('java.util.Properties.Properties()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)')): [39, -2.817462714505382], (('DSubTree', 'java.util.Properties.Properties()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'), (False, False, False), ('java.util.Properties.Properties()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'DStop')): [11, -0.7820331281982362]}

counter: 24
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.Math.min(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)'), (False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.Math.min(int,int)')): [10, -2.7887082025408745], (('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.Math.min(int,int)'), (False, False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.Math.min(int,int)', 'DStop')): [40, -1.3638946363062132]}

counter: 25
num skipped: 0
{'include': ['java.lang.String.valueOf(char[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(char[])'), (False, False), ('java.lang.String.valueOf(char[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)')): [34, -0.6750926547683775], (('DSubTree', 'java.lang.String.valueOf(char[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'), (False, False, False), ('java.lang.String.valueOf(char[])', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)', 'DStop')): [16, -0.6407357709322241]}

counter: 26
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False), ('java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)')): [48, -3.330580934882164], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop')): [2, -2.701047934999224]}

counter: 27
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])')): [32, -2.564694732427597], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'DStop')): [18, -2.875022607855499]}

counter: 28
num skipped: 0
{'include': ['java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)')): [9, -6.230356693267822], (('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.io.File.getParentFile()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.io.File.getParentFile()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)')): [37, -6.139379620552063], (('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.io.File.getParentFile()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.io.File.getParentFile()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [4, -6.75100964307785]}

counter: 29
num skipped: 0
{'include': ['java.lang.reflect.Method.getReturnType()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getReturnType()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.reflect.Method.getReturnType()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [45, -2.801689743217139], (('DSubTree', 'java.lang.reflect.Method.getReturnType()'), (False, False), ('java.lang.reflect.Method.getReturnType()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [5, -0.6295207291841507]}

counter: 30
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()')): [1, -2.0065215826034546], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()', 'DStop')): [1, -2.4657299909740686], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()', 'java.io.BufferedWriter.close()'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()', 'java.io.BufferedWriter.close()', 'DStop')): [1, -10.031632827594876], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()', 'java.io.BufferedWriter.close()')): [2, -9.656480804085732], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.Class<Tau_T>.getName()', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.io.BufferedWriter.close()')): [18, -13.630237221717834], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Class<Tau_T>.getName()'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.Class<Tau_T>.getName()', 'java.io.BufferedWriter.close()')): [7, -11.48274153470993], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Class<Tau_T>.getName()'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Class<Tau_T>.getName()', 'java.io.BufferedWriter.close()')): [20, -10.45789361000061]}

counter: 31
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)')): [27, -3.254380613565445], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'DStop')): [19, -1.3550018426030874], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.Buffer.flip()')): [1, -3.6475590642075986], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.Buffer.flip()'), (False, False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'java.nio.Buffer.flip()', 'DStop')): [3, -3.6280511915683746]}

counter: 32
num skipped: 0
{'include': ['java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getParameterTypes()'), (False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()')): [7, -18.046706676483154], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()'), (False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()', 'java.util.List<>.size()')): [1, -11.68121597962454], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()', 'java.util.List<>.size()')): [4, -16.615658044815063], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()', 'java.nio.charset.Charset.forName(java.lang.String)')): [9, -22.78113640472293], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuffer.toString()', 'java.lang.Integer.parseInt(java.lang.String)')): [10, -17.943059504032135], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()'), (False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()', 'java.lang.Integer.parseInt(java.lang.String)')): [2, -11.976710438728333], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.StringBuffer.toString()')): [2, -10.871878623962402], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.StringBuffer.toString()', 'DStop')): [5, -13.759106965269893], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.StringBuffer.toString()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [10, -13.596127869794145]}

counter: 33
num skipped: 0
{'include': ['java.util.Arrays.fill(int[],int)', 'java.util.List<java.lang.Integer>.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(int[],int)'), (False, False), ('java.util.Arrays.fill(int[],int)', 'java.util.List<java.lang.Integer>.size()')): [6, -4.891339169815183], (('DSubTree', 'java.util.List<java.lang.Integer>.size()'), (False, False), ('java.util.List<java.lang.Integer>.size()', 'java.util.Arrays.fill(int[],int)')): [19, -3.1257541179656982], (('DSubTree', 'java.util.List<java.lang.Integer>.size()', 'java.util.Arrays.fill(int[],int)'), (False, False, False), ('java.util.List<java.lang.Integer>.size()', 'java.util.Arrays.fill(int[],int)', 'DStop')): [25, -2.649644978286233]}

counter: 34
num skipped: 0
{'include': ['java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.max(int,int)'), (False, False), ('java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)')): [14, -4.533014786429703], (('DSubTree', 'java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)'), (False, False, False), ('java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)', 'DStop')): [36, -4.486550347879529]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.44809523809523816, 'relevant_additions': 0.4190476190476191, 'meets_constraints': 1.0000000000000002, 'in_set': 0.08571428571428572, 'test_set_relevant_additions': 0.3754761904761905}
