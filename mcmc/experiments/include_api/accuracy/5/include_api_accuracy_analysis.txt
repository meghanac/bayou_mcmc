data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [21, -0.426572322154243], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [29, -0.9462228013435379]}

counter: 1
num skipped: 0
{'include': ['java.lang.Math.abs(double)', 'java.lang.Double.compare(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(double)', 'java.lang.Double.compare(double,double)'), (False, False, False), ('java.lang.Math.abs(double)', 'java.lang.Double.compare(double,double)', 'DStop')): [32, -0.25837143923854455], (('DSubTree', 'java.lang.Math.abs(double)'), (False, False), ('java.lang.Math.abs(double)', 'java.lang.Double.compare(double,double)')): [18, -0.16587587678804994]}

counter: 2
num skipped: 0
{'include': ['java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()'), (False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)')): [31, -1.740668773651123], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'DStop')): [19, -1.4083931617205963]}

counter: 3
num skipped: 0
{'include': ['java.util.regex.Matcher.end()', 'java.lang.CharSequence.length()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Matcher.end()'), (False, False), ('java.util.regex.Matcher.end()', 'java.lang.CharSequence.length()')): [39, -15.502059936523438], (('DSubTree', 'java.util.regex.Matcher.end()', 'java.lang.CharSequence.length()'), (False, False, False), ('java.util.regex.Matcher.end()', 'java.lang.CharSequence.length()', 'DStop')): [11, -5.8309811213985085]}

counter: 4
num skipped: 0
{'include': ['java.util.List<T>.add(Tau_T)', 'java.util.List<T>.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<T>.add(Tau_T)'), (False, False), ('java.util.List<T>.add(Tau_T)', 'java.util.List<T>.size()')): [7, -0.02216152474284172], (('DSubTree', 'java.util.List<T>.add(Tau_T)', 'java.util.List<T>.size()'), (False, False, False), ('java.util.List<T>.add(Tau_T)', 'java.util.List<T>.size()', 'DStop')): [43, -0.8557841526926495]}

counter: 5
num skipped: 0
{'include': ['java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.readInt()'), (False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()')): [26, -2.228610038757324], (('DSubTree', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.defaultReadObject()'), (False, False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.defaultReadObject()', 'java.io.ObjectInputStream.readObject()')): [2, -4.42968562617898], (('DSubTree', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'), (False, False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()')): [22, -0.9860109711298719]}

counter: 6
num skipped: 0
{'include': ['java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()')): [5, -2.038023129105568], (('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()'), (False, False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [20, -2.5218308344483376], (('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [6, -0.673378873616457], (('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.util.Arrays.asList(T[])')): [19, -1.7794634327292442]}

counter: 7
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [4, -2.2735783886164427], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [17, -1.78322172164917], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [29, -0.8713721665553749]}

counter: 8
num skipped: 0
{'include': ['java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False), ('java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])')): [50, -0.850953608751297]}

counter: 9
num skipped: 0
{'include': ['java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<>.iterator()'), (False, False), ('java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()')): [2, -11.08887579292059], (('DSubTree', 'java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()'), (False, False, False), ('java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()', 'DStop')): [18, -11.023090915754437], (('DSubTree', 'java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False), ('java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop')): [22, -15.562873700167984], (('DSubTree', 'java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False), ('java.util.Collection<>.iterator()', '$NOT$java.util.Iterator<>.next()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Collections.sort(java.util.List)')): [8, -22.53606414794922]}

counter: 10
num skipped: 0
{'include': ['java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.getBytes()'), (False, False), ('java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()')): [9, -2.342997372150421], (('DSubTree', 'java.io.File.getAbsolutePath()'), (False, False), ('java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()')): [25, -1.4523576200008392], (('DSubTree', 'java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()'), (False, False, False), ('java.io.File.getAbsolutePath()', 'java.lang.String.getBytes()', 'DStop')): [16, -0.14087505033239722]}

counter: 11
num skipped: 0
{'include': ['java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'DStop')): [45, -3.601591554353945], (('DSubTree', 'java.nio.Buffer.position()'), (False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)')): [5, -5.4144774079322815]}

counter: 12
num skipped: 0
{'include': ['java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)'), (False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [38, -2.3276749551296234], (('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [12, -3.2301759889232926]}

counter: 13
num skipped: 0
{'include': ['java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readInt()'), (False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()')): [15, -1.5652742357269744], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [35, -1.1678521809153608]}

counter: 14
num skipped: 0
{'include': ['java.awt.Component.getParent()', 'java.awt.Component.getWidth()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getParent()'), (False, False), ('java.awt.Component.getParent()', 'java.awt.Component.getWidth()')): [3, -2.54521681368351], (('DSubTree', 'java.awt.Component.getParent()', 'java.awt.Component.getWidth()'), (False, False, False), ('java.awt.Component.getParent()', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()')): [10, -1.8391480296850204], (('DSubTree', 'java.awt.Component.getParent()', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()'), (False, False, False, False), ('java.awt.Component.getParent()', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'DStop')): [37, -0.905846782377921]}

counter: 15
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getBlue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)'), (False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getBlue()')): [10, -8.256200712174177], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getBlue()'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getBlue()', 'DStop')): [14, -9.362819477915764], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()', 'java.awt.Color.getBlue()')): [2, -8.71603637188673], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()', 'java.awt.Color.getBlue()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()', 'java.awt.Color.getBlue()', 'java.awt.Color.getGreen()')): [15, -7.144977331161499], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()', 'java.awt.Color.getBlue()', 'java.awt.Color.getRed()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.awt.Color.getRed()', 'java.awt.Color.getBlue()', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()')): [9, -2.362863438203931]}

counter: 16
num skipped: 0
{'include': ['java.util.ArrayList.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.ArrayList(java.util.Collection)'), (False, False), ('java.util.ArrayList.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [6, -0.2846670150756836], (('DSubTree', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'), (False, False, False), ('java.util.ArrayList.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)', 'DStop')): [44, -2.41415979154408]}

counter: 17
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()')): [12, -8.17387956008315], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'DStop')): [38, -1.1703729154542089]}

counter: 18
num skipped: 0
{'include': ['java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)')): [38, -2.1407781839370728], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'), (False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)', 'DStop')): [12, -0.45172862941399217]}

counter: 19
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [5, -10.410274982452393], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.PrintWriter.flush()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.PrintWriter.flush()', 'DStop')): [4, -15.353023092990043], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.PrintWriter.flush()', 'DStop')): [23, -15.668216790159931], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [18, -6.075673708692193]}

counter: 20
num skipped: 0
{'include': ['java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)'), (False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)')): [20, -7.770292684435844], (('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'), (False, False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setComposite(java.awt.Composite)')): [30, -5.339982192963362]}

counter: 21
num skipped: 0
{'include': ['java.util.Random.Random()', 'java.util.Collections.reverse(java.util.List)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.Random()'), (False, False), ('java.util.Random.Random()', 'java.util.Collections.reverse(java.util.List)')): [2, -5.112410470843315], (('DSubTree', 'java.util.Random.Random()', 'java.util.Random.nextInt(int)'), (False, False, False), ('java.util.Random.Random()', 'java.util.Random.nextInt(int)', 'java.util.Collections.reverse(java.util.List)')): [7, -7.719562649726868], (('DSubTree', 'java.util.Random.Random()', 'java.util.Random.nextInt(int)', 'java.util.Collections.reverse(java.util.List)'), (False, False, False, False), ('java.util.Random.Random()', 'java.util.Random.nextInt(int)', 'java.util.Collections.reverse(java.util.List)', 'DStop')): [41, -2.9380206866189837]}

counter: 22
num skipped: 0
{'include': ['java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)', 'DStop')): [38, -0.779402457177639], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)')): [12, -2.302591238170862]}

counter: 23
num skipped: 0
{'include': ['$NOT$java.io.File.mkdir()', 'java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.mkdir()'), (False, False), ('$NOT$java.io.File.mkdir()', 'java.io.File.deleteOnExit()')): [2, -9.112123489379883], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.mkdir()')): [16, -1.8357237875461578], (('DSubTree', 'java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.mkdir()')): [9, -3.572482466697693], (('DSubTree', 'java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.mkdir()'), (False, False, False, False), ('java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.mkdir()', 'java.io.File.deleteOnExit()')): [14, -4.834485504892655], (('DSubTree', 'java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.deleteOnExit()', '$NOT$java.io.File.mkdir()'), (False, False, False, False, False), ('java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.deleteOnExit()', '$NOT$java.io.File.mkdir()', 'java.io.File.deleteOnExit()')): [3, -6.615219045430422], (('DSubTree', 'java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.mkdir()'), (False, False, False, False), ('java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.mkdir()', 'DStop')): [6, -3.4313142374157906]}

counter: 24
num skipped: 0
{'include': ['java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'), (False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'DStop')): [48, -2.1965801840415224], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)')): [2, -0.8670937120914459]}

counter: 25
num skipped: 0
{'include': ['java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Properties.getProperty(java.lang.String)'), (False, False), ('java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)')): [9, -0.20438165217638016], (('DSubTree', 'java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'DStop')): [15, -0.7833997085690498], (('DSubTree', 'java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Long.parseLong(java.lang.String)'), (False, False, False, False), ('java.util.Properties.getProperty(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Long.parseLong(java.lang.String)', 'DStop')): [26, -1.6977091860026121]}

counter: 26
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [4, -1.0828373432159424], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [25, -1.3890632544644177], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.size()')): [2, -5.071878552436829], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [14, -1.0927147911861539], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.size()')): [5, -2.1882961192168295]}

counter: 27
num skipped: 0
{'include': ['java.io.FileInputStream.read(byte[])', 'java.nio.charset.Charset.forName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'java.nio.charset.Charset.forName(java.lang.String)')): [29, -4.276592865586281], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.nio.charset.Charset.forName(java.lang.String)'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.nio.charset.Charset.forName(java.lang.String)', 'DStop')): [21, -4.580571932718158]}

counter: 28
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()')): [1, -5.8829123973846436], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()', 'DStop')): [49, -2.132067182697938]}

counter: 29
num skipped: 0
{'include': ['java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()'), (False, False), ('java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)')): [3, -2.8044143319129944], (('DSubTree', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'DStop')): [29, -2.9785784990526736], (('DSubTree', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()')): [4, -8.2255919277668], (('DSubTree', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()'), (False, False, False, False), ('java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'DStop')): [9, -4.7498750397062395], (('DSubTree', 'java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False), ('java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [5, -3.0884507335722446]}

counter: 30
num skipped: 0
{'include': ['java.util.concurrent.CountDownLatch.await()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.CountDownLatch.await()'), (False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [20, -2.8455971032381058], (('DSubTree', 'java.util.concurrent.CountDownLatch.await()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [27, -2.5243188817985356], (('DSubTree', 'java.util.concurrent.CountDownLatch.await()', 'java.io.StringWriter.StringWriter()'), (False, False, False), ('java.util.concurrent.CountDownLatch.await()', 'java.io.StringWriter.StringWriter()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [3, -10.228944525122643]}

counter: 31
num skipped: 0
{'include': ['java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.compare(double,double)'), (False, False), ('java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)')): [4, -8.564375780522823], (('DSubTree', 'java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)'), (False, False, False), ('java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)', 'DStop')): [46, -3.976394803263247]}

counter: 32
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'DStop')): [40, -2.7234035255387425], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)')): [10, -1.8044959157705307]}

counter: 33
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [27, -10.03261947631836], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.lang.System.currentTimeMillis()', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [2, -8.178788512945175], (('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.File(java.io.File,java.lang.String)')): [2, -8.383224248886108], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Class<Tau_T>.getName()')): [2, -13.415931463241577], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.File(java.lang.String)'), (False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.File.File(java.lang.String)', 'java.lang.Class<Tau_T>.getName()')): [1, -13.581502119079232], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Class<Tau_T>.getName()', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Class<Tau_T>.getName()', 'java.io.File.File(java.lang.String)', 'java.lang.Class<Tau_T>.getName()')): [16, -13.268260970711708]}

counter: 34
num skipped: 0
{'include': ['java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)'), (False, False), ('java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()')): [29, -0.610263703896635], (('DSubTree', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'), (False, False, False), ('java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()', 'DStop')): [21, -1.7608797401189804]}

counter: 35
num skipped: 0
{'include': ['java.util.Set<T>.add(Tau_T)', 'java.util.Collections.unmodifiableSet(java.util.Set)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Set<T>.add(Tau_T)'), (False, False), ('java.util.Set<T>.add(Tau_T)', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [9, -6.133071020245552], (('DSubTree', 'java.util.Set<T>.add(Tau_T)', 'java.util.Collections.unmodifiableSet(java.util.Set)'), (False, False, False), ('java.util.Set<T>.add(Tau_T)', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'DStop')): [41, -4.578147708554752]}

counter: 36
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)')): [10, -0.7697183191776276], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [25, -1.2655321406200528], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [10, -4.275037040002644], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.size()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.get(int)')): [5, -1.7121774032711983]}

counter: 37
num skipped: 0
{'include': ['java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)'), (False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [5, -1.8961890637874603], (('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [6, -1.0628743509296328], (('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [39, -2.955713033443317]}

counter: 38
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [13, -0.13509749621152878], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [37, -1.1187893397873268]}

counter: 39
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Float>.ArrayList<Float>()', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Float>.ArrayList<Float>()'), (False, False), ('java.util.ArrayList<java.lang.Float>.ArrayList<Float>()', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()')): [7, -7.875715218484402], (('DSubTree', 'java.util.ArrayList<java.lang.Float>.ArrayList<Float>()', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'), (False, False, False), ('java.util.ArrayList<java.lang.Float>.ArrayList<Float>()', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'DStop')): [1, -8.433709170669317], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.ArrayList<java.lang.Float>.ArrayList<Float>()'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.ArrayList<java.lang.Float>.ArrayList<Float>()', 'DStop')): [24, -7.906362496316433], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.ArrayList<java.lang.Float>.ArrayList<Float>()')): [18, -0.47405716497451067]}

counter: 40
num skipped: 0
{'include': ['java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.append(char[],int,int)'), (False, False), ('java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])')): [5, -6.54274845123291], (('DSubTree', 'java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])'), (False, False, False), ('java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])', 'DStop')): [3, -8.39016985692433], (('DSubTree', 'java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])'), (False, False, False), ('java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])', 'java.lang.String.startsWith(java.lang.String)')): [19, -10.318842887878418], (('DSubTree', 'java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])'), (False, False, False), ('java.lang.StringBuffer.append(char[],int,int)', 'java.lang.StringBuffer.append(char[])', 'java.nio.ByteBuffer.allocate(int)')): [23, -4.281709432601929]}

counter: 41
num skipped: 0
{'include': ['java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.SecureRandom()'), (False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()')): [22, -0.2360485289245844], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'DStop')): [5, -0.6278816686244681], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.lang.Long.toString(long)'), (False, False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.lang.Long.toString(long)', 'DStop')): [2, -2.8499121047498193], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.lang.Long.toString(long)')): [5, -0.9192999869119376], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.math.BigInteger.valueOf(long)')): [12, -3.0341430148109794], (('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.math.BigInteger.valueOf(long)'), (False, False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'java.math.BigInteger.valueOf(long)', 'DStop')): [4, -0.17782364366576076]}

counter: 42
num skipped: 0
{'include': ['java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()'), (False, False, False), ('java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.close()')): [1, -6.383489102125168], (('DSubTree', 'java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.close()'), (False, False, False, False), ('java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()', 'java.io.OutputStream.close()', 'DStop')): [8, -3.694709476083517], (('DSubTree', 'java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()'), (False, False, False, False, False), ('java.lang.String.getBytes()', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()', 'DStop')): [33, -10.577890653163195], (('DSubTree', 'java.lang.String.getBytes()', 'java.net.URL.openStream()', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()'), (False, False, False, False, False, False), ('java.lang.String.getBytes()', 'java.net.URL.openStream()', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()', 'DStop')): [7, -10.419393956661224], (('DSubTree', 'java.lang.String.getBytes()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()'), (False, False, False, False, False, False), ('java.lang.String.getBytes()', 'java.lang.String.startsWith(java.lang.String)', 'java.io.File.getAbsolutePath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.OutputStream.close()', 'DStop')): [1, -13.489378608763218]}

counter: 43
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [18, -2.6762050243560225], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [32, -0.8485790777340299]}

counter: 44
num skipped: 0
{'include': ['java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()'), (False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)')): [36, -1.065213918685231], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'DStop')): [14, -0.6059502880088985]}

counter: 45
num skipped: 0
{'include': ['java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.darker()'), (False, False), ('java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)')): [25, -1.225059324176982], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)'), (False, False, False), ('java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)', 'DStop')): [14, -0.7139399239677005], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False), ('java.awt.Color.darker()', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.BasicStroke.BasicStroke(float)')): [3, -2.9581886383675737], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False, False), ('java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.BasicStroke.BasicStroke(float)')): [2, -4.589868137612939], (('DSubTree', 'java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False, False), ('java.awt.Color.darker()', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [6, -1.4851578187663108]}

counter: 46
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.getStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException()'), (False, False), ('java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.getStackTrace()')): [41, -5.55477274954319], (('DSubTree', 'java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.getStackTrace()'), (False, False, False), ('java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.getStackTrace()', 'DStop')): [9, -3.5160717833787203]}

counter: 47
num skipped: 0
{'include': ['java.math.BigInteger.toString()', 'java.math.BigInteger.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.toString()'), (False, False), ('java.math.BigInteger.toString()', 'java.math.BigInteger.intValue()')): [2, -10.742293119430542], (('DSubTree', 'java.math.BigInteger.intValue()'), (False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()')): [1, -7.860785096883774], (('DSubTree', 'java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()'), (False, False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [37, -1.5572965443134308], (('DSubTree', 'java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop')): [2, -1.5606563710607588], (('DSubTree', 'java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()'), (False, False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'DStop')): [2, -2.767372228205204], (('DSubTree', 'java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.lang.String.length()'), (False, False, False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.lang.String.length()', 'DStop')): [5, -4.269262123620138], (('DSubTree', 'java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.lang.String.length()', 'java.lang.Long.parseLong(java.lang.String)'), (False, False, False, False, False), ('java.math.BigInteger.intValue()', 'java.math.BigInteger.toString()', 'java.lang.String.length()', 'java.lang.Long.parseLong(java.lang.String)', 'DStop')): [1, -2.277322646230459]}

counter: 48
num skipped: 0
{'include': ['java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeByte(int)'), (False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [16, -4.1538369208574295], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'DStop')): [34, -1.3949595293379389]}
