data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 52


counter: 0
num skipped: 0
{'include': ['java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeByte(int)'), (False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [19, -0.8381029404699802], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'DStop')): [21, -1.9973032511770725], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)'), (False, False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DStop')): [1, -3.660953030514065], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)')): [9, -2.9364704564213753]}

counter: 1
num skipped: 0
{'include': ['java.lang.String.isEmpty()', 'java.lang.System.nanoTime()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.isEmpty()'), (False, False), ('java.lang.String.isEmpty()', 'java.lang.System.nanoTime()')): [23, -1.3219179771840572], (('DSubTree', 'java.lang.String.isEmpty()', 'java.lang.System.nanoTime()'), (False, False, False), ('java.lang.String.isEmpty()', 'java.lang.System.nanoTime()', 'DStop')): [27, -3.682156030088663]}

counter: 2
num skipped: 0
{'include': ['java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.Double(java.lang.String)'), (False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()')): [18, -1.0621943422593176], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()'), (False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'DStop')): [32, -0.3254714971408248]}

counter: 3
num skipped: 0
{'include': ['java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.get(int)'), (False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()')): [20, -2.2408447265625], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [30, -3.130398035980761]}

counter: 4
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace()'), (False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [4, -3.9735479950904846], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [23, -4.45572504401207], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [22, -4.5152557753026485], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [1, -3.49341762624681]}

counter: 5
num skipped: 0
{'include': ['java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.TimeUnit.toMillis(long)'), (False, False), ('java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)')): [1, -4.842871613276657], (('DSubTree', 'java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)'), (False, False, False), ('java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)', 'DStop')): [20, -0.27936278545530513], (('DSubTree', 'java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)', 'java.lang.Math.min(long,long)'), (False, False, False, False), ('java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.Math.min(long,long)', 'java.lang.Math.min(long,long)', 'DStop')): [29, -2.672542060376145]}

counter: 6
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [15, -5.58330774307251], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.OutputStream.close()')): [5, -8.314181298017502], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.StringWriter.toString()')): [8, -8.73977780342102], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.StringWriter.toString()')): [1, -10.353177905082703], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.StringWriter.toString()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.StringWriter.toString()', 'DStop')): [21, -12.0341157913208]}

counter: 7
num skipped: 0
{'include': ['java.awt.GraphicsEnvironment.getScreenDevices()', 'java.awt.Rectangle.Rectangle()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.GraphicsEnvironment.getScreenDevices()'), (False, False), ('java.awt.GraphicsEnvironment.getScreenDevices()', 'java.awt.Rectangle.Rectangle()')): [4, -17.346489906311035], (('DSubTree', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'java.awt.Rectangle.Rectangle()'), (False, False, False), ('java.awt.GraphicsEnvironment.getScreenDevices()', 'java.awt.Rectangle.Rectangle()', 'DStop')): [30, -11.25483014434576], (('DSubTree', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'java.lang.Math.min(double,double)'), (False, False, False), ('java.awt.GraphicsEnvironment.getScreenDevices()', 'java.lang.Math.min(double,double)', 'java.awt.Rectangle.Rectangle()')): [11, -13.985228478908539], (('DSubTree', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'java.lang.Math.min(double,double)', 'java.lang.Math.min(double,double)'), (False, False, False, False), ('java.awt.GraphicsEnvironment.getScreenDevices()', 'java.lang.Math.min(double,double)', 'java.lang.Math.min(double,double)', 'java.awt.Rectangle.Rectangle()')): [5, -15.08352911658585]}

counter: 8
num skipped: 0
{'include': ['java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.charAt(int)'), (False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [21, -3.1085571460425854], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [29, -0.8853878155350685]}

counter: 9
num skipped: 0
{'include': ['java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readLong()'), (False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()')): [1, -0.014708819799125195], (('DSubTree', 'java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()'), (False, False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()', 'DStop')): [49, -0.6968095786287449]}

counter: 10
num skipped: 0
{'include': ['java.lang.StringBuffer.length()', 'java.io.StringReader.StringReader(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.length()'), (False, False), ('java.lang.StringBuffer.length()', 'java.io.StringReader.StringReader(java.lang.String)')): [8, -2.720419943332672], (('DSubTree', 'java.lang.StringBuffer.length()', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.length()', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [42, -5.4095765352249146]}

counter: 11
num skipped: 0
{'include': ['java.io.File.getCanonicalPath()', 'java.io.FileWriter.FileWriter(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.File.getCanonicalPath()')): [9, -7.261245834641159], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.File.getCanonicalPath()'), (False, False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.File.getCanonicalPath()', 'DStop')): [41, -5.247979032690637]}

counter: 12
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()')): [29, -3.9317884892225266], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStream.available()', 'DStop')): [21, -1.0457856017164886]}

counter: 13
num skipped: 0
{'include': ['java.awt.geom.Point2D.getX()', 'java.lang.Math.max(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.Point2D.getX()'), (False, False), ('java.awt.geom.Point2D.getX()', 'java.lang.Math.max(double,double)')): [12, -2.5456013791263103], (('DSubTree', 'java.awt.geom.Point2D.getX()', 'java.lang.Math.max(double,double)'), (False, False, False), ('java.awt.geom.Point2D.getX()', 'java.lang.Math.max(double,double)', 'DStop')): [33, -2.143928712233901], (('DSubTree', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()'), (False, False, False), ('java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()', 'java.lang.Math.max(double,double)')): [5, -2.516579508781433]}

counter: 14
num skipped: 0
{'include': ['java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)')): [43, -2.2962315417826176], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)', 'DStop')): [7, -1.5174448937177658]}

counter: 15
num skipped: 0
{'include': ['java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.forName(java.lang.String)'), (False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)')): [40, -1.6025672755204141], (('DSubTree', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)', 'DStop')): [10, -0.9649655790999532]}

counter: 16
num skipped: 0
{'include': ['java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.toArray(T[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.emptyList()'), (False, False), ('java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.toArray(T[])')): [3, -9.372143337270245], (('DSubTree', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False), ('java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [47, -2.447812005877495]}

counter: 17
num skipped: 0
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)')): [13, -0.363818034529686], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setOpaque(boolean)', 'DStop')): [37, -2.2061973474919796]}

counter: 18
num skipped: 0
{'include': ['java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)'), (False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [11, -0.31484011374413967], (('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [39, -1.6346886474639177]}

counter: 19
num skipped: 0
{'include': ['java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.size()'), (False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)')): [45, -1.9449039623141289], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DStop')): [5, -2.205196477472782]}

counter: 20
num skipped: 0
{'include': ['java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.StringWriter()'), (False, False), ('java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)')): [24, -4.768357515335083], (('DSubTree', 'java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)'), (False, False, False), ('java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)', 'DStop')): [1, -0.9793666005134583], (('DSubTree', 'java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)'), (False, False, False, False), ('java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'DStop')): [6, -2.51673665153794], (('DSubTree', 'java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)'), (False, False, False, False, False), ('java.io.StringWriter.StringWriter()', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'DStop')): [19, -3.229687098413706]}

counter: 21
num skipped: 0
{'include': ['java.lang.String.isEmpty()', 'java.lang.System.nanoTime()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.isEmpty()'), (False, False), ('java.lang.String.isEmpty()', 'java.lang.System.nanoTime()')): [27, -2.3277808665297925], (('DSubTree', 'java.lang.String.isEmpty()', 'java.lang.System.nanoTime()'), (False, False, False), ('java.lang.String.isEmpty()', 'java.lang.System.nanoTime()', 'DStop')): [11, -7.344003873877227], (('DSubTree', 'java.lang.System.nanoTime()', 'java.lang.String.isEmpty()'), (False, False, False), ('java.lang.System.nanoTime()', 'java.lang.String.isEmpty()', 'DStop')): [10, -3.010439277626574], (('DSubTree', 'java.lang.System.nanoTime()'), (False, False), ('java.lang.System.nanoTime()', 'java.lang.String.isEmpty()')): [2, -0.7982066944241524]}

counter: 22
num skipped: 0
{'include': ['$NOT$java.lang.String.isEmpty()', 'java.util.Collections.unmodifiableList(java.util.List)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.isEmpty()'), (False, False), ('$NOT$java.lang.String.isEmpty()', 'java.util.Collections.unmodifiableList(java.util.List)')): [15, -0.910650908946991], (('DSubTree', '$NOT$java.lang.String.isEmpty()', 'java.util.Collections.unmodifiableList(java.util.List)'), (False, False, False), ('$NOT$java.lang.String.isEmpty()', 'java.util.Collections.unmodifiableList(java.util.List)', 'DStop')): [35, -0.15734801010694355]}

counter: 23
num skipped: 0
{'include': ['java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)'), (False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [17, -3.4321020245552063], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop')): [33, -2.2141107458010083]}

counter: 24
num skipped: 0
{'include': ['java.util.Arrays.asList(java.lang.Object[])', 'java.io.BufferedReader.readLine()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])'), (False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.io.BufferedReader.readLine()')): [8, -3.58184552192688], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.io.BufferedReader.readLine()'), (False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.io.BufferedReader.readLine()', 'DStop')): [42, -2.8984255233663134]}

counter: 25
num skipped: 0
{'include': ['java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.setLocation(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.setLocation(int,int)')): [1, -3.9312979876995087], (('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.setLocation(int,int)'), (False, False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.setLocation(int,int)', 'DStop')): [49, -1.392204187810421]}

counter: 26
num skipped: 0
{'include': ['java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()'), (False, False, False), ('java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()', 'DStop')): [33, -0.8442624397575855], (('DSubTree', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()')): [17, -1.3843706207408104]}

counter: 27
num skipped: 0
{'include': ['java.util.List<java.lang.Integer>.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.get(int)'), (False, False), ('java.util.List<java.lang.Integer>.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [9, -2.2258288264274597], (('DSubTree', 'java.util.List<java.lang.Integer>.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.List<java.lang.Integer>.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [29, -1.4404904614202678], (('DSubTree', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False), ('java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.Integer>.get(int)')): [12, -2.4646718502044678]}

counter: 28
num skipped: 0
{'include': ['java.lang.Throwable.toString()', 'java.sql.ResultSet.getString(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.toString()'), (False, False), ('java.lang.Throwable.toString()', 'java.sql.ResultSet.getString(java.lang.String)')): [3, -9.932171436958015], (('DSubTree', 'java.sql.ResultSet.getString(java.lang.String)'), (False, False), ('java.sql.ResultSet.getString(java.lang.String)', 'java.lang.Throwable.toString()')): [1, -9.408512592315674], (('DSubTree', 'java.sql.ResultSet.getString(java.lang.String)', 'java.lang.Throwable.toString()'), (False, False, False), ('java.sql.ResultSet.getString(java.lang.String)', 'java.lang.Throwable.toString()', 'DStop')): [46, -3.2320910556300078]}

counter: 29
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace()'), (False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [18, -0.3038486987352371], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [4, -8.086918413639069], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [6, -8.744446497410536], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [21, -5.894330582523253], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [1, -4.546533533371985]}

counter: 30
num skipped: 0
{'include': ['$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [1, -2.560445100069046], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [3, -0.08730094996280968], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [6, -3.2471104668220505], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', 'DStop')): [5, -2.562505706151569], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [1, -1.6249366793344961], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)')): [13, -1.9581332188245142], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)')): [1, -0.06967582702054642], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [2, -1.7117610243731178], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [8, -2.988419252447443], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [6, -2.0296399593312344], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [4, -3.066856180317359]}

counter: 31
num skipped: 0
{'include': ['java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)')): [2, -7.1596993883140385], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)', 'DStop')): [48, -3.8659066492691636]}

counter: 32
num skipped: 0
{'include': ['java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [37, -2.9505760646425188], (('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [9, -8.582173004047945], (('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False, False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [1, -11.205215619440423], (('DSubTree', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False, False, False), ('java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [3, -5.915857613552362]}

counter: 33
num skipped: 0
{'include': ['java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)'), (False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [38, -0.9208427220582962], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)')): [12, -1.7910234406590462]}

counter: 34
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()')): [19, -8.336157444864511], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()', 'DStop')): [31, -5.168332512490451]}

counter: 35
num skipped: 0
{'include': ['java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)'), (False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()')): [7, -2.919450191780925], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()'), (False, False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [14, -0.5157286571338773], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [29, -3.640662554651499]}

counter: 36
num skipped: 0
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.OutputStream.write(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.OutputStream.write(byte[])')): [7, -6.943903267383575], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.OutputStream.write(byte[])')): [43, -6.948284318204969]}

counter: 37
num skipped: 0
{'include': ['java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)')): [5, -0.614417539909482], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'DStop')): [34, -2.0333268865942955], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'DStop')): [4, -3.04494671151042], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'java.util.Collections.reverse(java.util.List)')): [5, -1.6815607473254204], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.List<E>.add(Tau_E)'), (False, False, False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.List<E>.add(Tau_E)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.List<E>.add(Tau_E)', 'java.util.Collections.reverse(java.util.List)')): [2, -10.049343499355018]}

counter: 38
num skipped: 0
{'include': ['java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()'), (False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)')): [3, -3.3422714468943013], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'DStop')): [6, -1.2035439969040453], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)')): [12, -1.3373579340986907], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)')): [4, -7.155645901337266], (('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [25, -5.3892307775095105]}

counter: 39
num skipped: 0
{'include': ['java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)'), (False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [4, -11.127636939287186], (('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)'), (False, False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [18, -11.587124735116959], (('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [15, -7.608632414252497], (('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [4, -8.43787878996227], (('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False, False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [5, -8.113711838144809], (('DSubTree', 'java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False, False, False, False), ('java.awt.Graphics2D.setRenderingHints(java.util.Map)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [4, -8.795613597147167]}

counter: 40
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.List.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.List.get(int)'), (False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.List.get(int)', 'DStop')): [9, -2.9917171485722065], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'DStop')): [1, -7.566969112958759], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.util.List.get(int)'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.util.List.get(int)', 'DStop')): [9, -2.345860131084919], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.util.List.get(int)')): [11, -4.195924311876297], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.List.get(int)', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.List.get(int)', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.util.List.get(int)')): [1, -5.352826105430722], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.lang.String.equals(java.lang.Object)')): [1, -3.7348011136054993], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)')): [1, -9.234813541173935], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.util.ArrayList.ArrayList()', 'java.util.List.get(int)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.String.equals(java.lang.Object)')): [17, -10.53143098950386]}

counter: 41
num skipped: 0
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StackTraceElement.getClassName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StackTraceElement.getClassName()'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StackTraceElement.getClassName()', 'DStop')): [10, -7.577941581606865], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StackTraceElement.getClassName()')): [22, -5.380484580993652], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Throwable.getStackTrace()'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()')): [2, -4.783056676387787], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()', 'DStop')): [16, -5.742487918585539]}

counter: 42
num skipped: 0
{'include': ['java.nio.Buffer.limit(int)', 'java.nio.Buffer.position()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.limit(int)'), (False, False), ('java.nio.Buffer.limit(int)', 'java.nio.Buffer.position()')): [8, -0.05534810945391655], (('DSubTree', 'java.nio.Buffer.limit(int)', 'java.nio.Buffer.position()'), (False, False, False), ('java.nio.Buffer.limit(int)', 'java.nio.Buffer.position()', 'DStop')): [42, -0.33107714354991913]}

counter: 43
num skipped: 0
{'include': ['java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.getThreadFactory()'), (False, False), ('java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)')): [18, -3.982392219826579], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'DStop')): [32, -0.8236105567769982]}

counter: 44
num skipped: 0
{'include': ['java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.size()'), (False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)')): [16, -5.581137418746948], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DStop')): [16, -2.476493921596557], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.get(int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.get(int)', 'DStop', 'DStop')): [1, -8.127939434256405], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'DLoop'), (False, False, False, True, True, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.get(int)', 'DStop')): [14, -8.765574339777231], (('DSubTree', 'java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'DLoop'), (False, False, False, True, True, False), ('java.util.List<java.lang.String>.size()', 'java.lang.String.endsWith(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.get(int)', 'java.util.List<java.lang.String>.get(int)')): [3, -4.352796023711562]}

counter: 45
num skipped: 0
{'include': ['java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.jar.Manifest.getMainAttributes()'), (False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)')): [1, -0.012553323991596699], (('DSubTree', 'java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'), (False, False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)')): [7, -6.794713258743286], (('DSubTree', 'java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'), (False, False, False, False), ('java.util.jar.Manifest.getMainAttributes()', 'java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'DStop')): [42, -2.2521429549960885]}

counter: 46
num skipped: 0
{'include': ['java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()', 'DStop')): [39, -4.155560883693397], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()')): [11, -1.5088668465614319]}

counter: 47
num skipped: 0
{'include': ['java.io.Reader.read(char[])', 'java.lang.String.String(char[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.Reader.read(char[])'), (False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])')): [49, -3.6040402052458376], (('DSubTree', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])'), (False, False, False), ('java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DStop')): [1, -0.0471595567651093]}

counter: 48
num skipped: 0
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -10.724093331955373], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.util.HashMap.HashMap()', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.util.HashMap.HashMap()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -19.81342349946499], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -17.049518689513206], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -10.071887139230967], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [13, -8.163931677117944], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop')): [33, -3.217719700653106]}

counter: 49
num skipped: 0
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)')): [21, -0.29590795561671257], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'DStop')): [14, -0.44702839106321335], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'DStop')): [13, -1.691151974722743], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()')): [2, -0.21901632841490937]}

counter: 50
num skipped: 0
{'include': ['java.awt.Point.Point(int,int)', 'java.lang.Math.atan(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Point.Point(int,int)'), (False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.atan(double)')): [18, -3.4835887155495584], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.lang.Math.atan(double)'), (False, False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.atan(double)', 'DStop')): [32, -2.72054651833605]}

counter: 51
num skipped: 0
{'include': ['java.io.FileOutputStream.FileOutputStream(java.io.File)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False), ('java.io.FileOutputStream.FileOutputStream(java.io.File)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [1, -10.525812176987529], (('DSubTree', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [4, -6.629925549030304], (('DSubTree', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False, False), ('java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'DStop')): [40, -5.617377551709069], (('DSubTree', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Throwable.getMessage()'), (False, False, False, False, False), ('java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Throwable.getMessage()', 'DStop')): [5, -7.604828993760748]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.27564102564102555, 'relevant_additions': 0.23717948717948711, 'meets_constraints': 1.0000000000000009, 'in_set': 0.13461538461538464, 'test_set_relevant_additions': 0.21554487179487175}
