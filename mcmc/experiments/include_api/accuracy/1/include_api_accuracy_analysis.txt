data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.max(int,int)'), (False, False), ('java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)')): [3, -2.3685777876526117], (('DSubTree', 'java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)'), (False, False, False), ('java.lang.Math.max(int,int)', 'java.lang.Math.exp(double)', 'DStop')): [47, -3.6219157818704844]}

counter: 1
num skipped: 0
{'include': ['java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()'), (False, False, False), ('java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()', 'DStop')): [6, -16.369736161606852], (('DSubTree', 'java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()', 'java.util.Iterator<>.hasNext()'), (False, False, False, False), ('java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()', 'java.util.Iterator<>.hasNext()', 'DStop')): [7, -13.37330093071796], (('DSubTree', 'java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()'), (False, False, False), ('java.util.Map<,>.entrySet()', 'java.util.Iterator<>.hasNext()', 'java.util.Iterator<>.hasNext()')): [5, -12.127034425735474], (('DSubTree', 'java.util.Map<,>.entrySet()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.Map<,>.entrySet()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.Iterator<>.hasNext()')): [32, -6.732801258563995]}

counter: 2
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [11, -1.4135697185993195], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)')): [20, -0.6574198007583618], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [3, -2.2996921883895993], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [16, -0.35104263946413994]}

counter: 3
num skipped: 0
{'include': ['javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)')): [22, -3.1915131509304047], (('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'DStop')): [28, -2.680994331806687]}

counter: 4
num skipped: 0
{'include': ['java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.Double(java.lang.String)'), (False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()')): [12, -0.1836185958236456], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()'), (False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'DStop')): [29, -1.4615439204499125], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)'), (False, False, False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)', 'DStop')): [1, -12.743531117332168], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [4, -4.5905124712735415], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [2, -7.166251517832279], (('DSubTree', 'java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False, False), ('java.lang.Double.Double(java.lang.String)', 'java.lang.Double.doubleValue()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [2, -8.938916082959622]}

counter: 5
num skipped: 0
{'include': ['javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)'), (False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()')): [23, -0.16231980174779892], (('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()'), (False, False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()', 'DStop')): [27, -0.42788124512298964]}

counter: 6
num skipped: 0
{'include': ['java.util.Arrays.asList(T[])', 'java.sql.Connection.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])'), (False, False), ('java.util.Arrays.asList(T[])', 'java.sql.Connection.close()')): [34, -4.745836853981018], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.sql.Connection.close()'), (False, False, False), ('java.util.Arrays.asList(T[])', 'java.sql.Connection.close()', 'DStop')): [16, -2.264960702455028]}

counter: 7
num skipped: 0
{'include': ['java.util.Vector.size()', 'java.util.Vector.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Vector.size()'), (False, False), ('java.util.Vector.size()', 'java.util.Vector.iterator()')): [1, -5.590754300355911], (('DSubTree', 'java.util.Vector.size()', 'java.util.Vector.Vector()'), (False, False, False), ('java.util.Vector.size()', 'java.util.Vector.Vector()', 'java.util.Vector.iterator()')): [2, -7.502134010195732], (('DSubTree', 'java.util.Vector.size()', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)'), (False, False, False, False), ('java.util.Vector.size()', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)', 'java.util.Vector.iterator()')): [35, -4.381552655715495], (('DSubTree', 'java.util.Vector.size()', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)', 'java.util.Vector.iterator()'), (False, False, False, False, False), ('java.util.Vector.size()', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)', 'java.util.Vector.iterator()', 'DStop')): [12, -4.577110707759857]}

counter: 8
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [9, -10.965380787849426], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [13, -7.318643881939352], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [23, -8.036175574408844], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [5, -11.03567868936807]}

counter: 9
num skipped: 0
{'include': ['java.util.Vector.size()', 'java.util.Vector.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Vector.size()'), (False, False), ('java.util.Vector.size()', 'java.util.Vector.iterator()')): [22, -3.8878679503686726], (('DSubTree', 'java.util.Vector.size()', 'java.util.Vector.iterator()'), (False, False, False), ('java.util.Vector.size()', 'java.util.Vector.iterator()', 'DStop')): [18, -4.130657412664732], (('DSubTree', 'java.util.Vector.size()', 'java.util.Vector.size()'), (False, False, False), ('java.util.Vector.size()', 'java.util.Vector.size()', 'java.util.Vector.iterator()')): [10, -2.3938429910194827]}

counter: 10
num skipped: 0
{'include': ['javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)'), (False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()')): [8, -5.86357569694519], (('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()'), (False, False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.close()', 'DStop')): [21, -2.5190718658267315], (('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.lookup(java.lang.String)', 'javax.naming.Context.close()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'javax.naming.Context.lookup(java.lang.String)', 'javax.naming.Context.close()', 'DStop')): [21, -3.3194515071727437]}

counter: 11
num skipped: 0
{'include': ['java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()'), (False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)')): [49, -1.707811570726335], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'DStop')): [1, -1.6553062058519572]}

counter: 12
num skipped: 0
{'include': ['java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.length()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.CharSequence.charAt(int)'), (False, False), ('java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.length()')): [15, -7.548214942216873], (('DSubTree', 'java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.length()'), (False, False, False), ('java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.length()', 'DStop')): [11, -6.210112914443016], (('DSubTree', 'java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.length()'), (False, False, False, False), ('java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.length()', 'DStop')): [4, -8.024695914238691], (('DSubTree', 'java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.length()'), (False, False, False, False), ('java.lang.CharSequence.charAt(int)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.substring(int,int)')): [20, -5.594150364398956]}

counter: 13
num skipped: 0
{'include': ['java.lang.String.valueOf(boolean)', 'java.lang.Boolean.parseBoolean(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(boolean)'), (False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [15, -0.9327722128364258], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop')): [35, -1.216038421378471]}

counter: 14
num skipped: 0
{'include': ['java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.copyOf(int[],int)'), (False, False), ('java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])')): [23, -0.9291694574058056], (('DSubTree', 'java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])'), (False, False, False), ('java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])', 'DStop')): [27, -0.9284521323861554]}

counter: 15
num skipped: 0
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)'), (False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)')): [17, -0.7564724795520306], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)', 'DStop')): [18, -2.5296254716813564], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.InputStream.close()'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.InputStream.close()', 'DStop')): [11, -5.607935801148415], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.InputStream.close()')): [4, -2.9866950288414955]}

counter: 16
num skipped: 0
{'include': ['java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.forName(java.lang.String)'), (False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)')): [27, -0.2801964805985335], (('DSubTree', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False, False), ('java.lang.Class.forName(java.lang.String)', 'java.lang.Class.getDeclaredField(java.lang.String)', 'DStop')): [23, -1.2128947628079914]}

counter: 17
num skipped: 0
{'include': ['java.awt.Color.getRed()', 'java.awt.Color.Color(int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.getRed()'), (False, False), ('java.awt.Color.getRed()', 'java.awt.Color.Color(int,int,int)')): [7, -2.7581052780151367], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()'), (False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)')): [7, -1.290859654545784], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)'), (False, False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.Color(int,int,int)', 'DStop')): [8, -2.367473085585516], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)'), (False, False, False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'DStop')): [14, -1.2160224067047238], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.BasicStroke.BasicStroke(float)'), (False, False, False, False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.BasicStroke.BasicStroke(float)', 'DStop')): [3, -6.14233948366018], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [1, -5.432118614378851], (('DSubTree', 'java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop')): [10, -1.979843030567281]}

counter: 18
num skipped: 0
{'include': ['javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTable.getColumnModel()'), (False, False), ('javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()')): [15, -5.1585164099233225], (('DSubTree', 'javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()'), (False, False, False), ('javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)')): [34, -1.2248843279667199], (('DSubTree', 'javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)'), (False, False, False, False), ('javax.swing.JTable.getColumnModel()', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop')): [1, -0.25506540201604366]}

counter: 19
num skipped: 0
{'include': ['java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.readInt()'), (False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()')): [28, -1.7402963861823082], (('DSubTree', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'), (False, False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readObject()')): [1, -4.058178851380944], (('DSubTree', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'), (False, False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()')): [14, -1.7395340194925666], (('DSubTree', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()'), (False, False, False, False), ('java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readInt()', 'java.io.ObjectInputStream.readObject()', 'java.io.ObjectInputStream.readInt()')): [7, -2.293816293240525]}

counter: 20
num skipped: 0
{'include': ['java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.charAt(int)'), (False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [5, -2.7438066080212593], (('DSubTree', 'java.lang.String.charAt(int)', 'DLoop', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'DLoop'), (False, False, True, True, False, False), ('java.lang.String.charAt(int)', 'DLoop', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'DStop', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [15, -3.8202694561332464], (('DSubTree', 'java.lang.String.charAt(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False, False), ('java.lang.String.charAt(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [10, -2.77432768791914], (('DSubTree', 'java.lang.String.charAt(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.lang.String.charAt(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [1, -5.826133232505526], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'DStop')): [17, -7.3904008865356445], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [2, -3.035943865776062]}

counter: 21
num skipped: 0
{'include': ['java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()')): [46, -0.1391678974032402], (('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()'), (False, False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()', 'DStop')): [4, -1.4249991104006767]}

counter: 22
num skipped: 0
{'include': ['java.util.List<java.lang.Long>.get(int)', 'java.lang.Long.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.get(int)'), (False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.lang.Long.intValue()')): [2, -10.345554828643799], (('DSubTree', 'java.util.List<java.lang.Long>.get(int)', 'java.lang.Long.intValue()'), (False, False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.lang.Long.intValue()', 'DStop')): [48, -8.521300554275513]}

counter: 23
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.substring(int,int)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.substring(int,int)', 'DStop')): [5, -2.1124994106357917], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.substring(int,int)'), (False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.substring(int,int)', 'DStop')): [2, -6.479408664439688], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.substring(int,int)'), (False, False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.substring(int,int)', 'DStop')): [31, -3.7715173962933477], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.substring(int,int)')): [12, -1.4390147477388382]}

counter: 24
num skipped: 0
{'include': ['java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()')): [12, -14.765547513961792], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'DStop')): [32, -8.63150144123938], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)')): [3, -5.2495492324233055], (('DSubTree', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)'), (False, False, False, False), ('java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.List<java.lang.Integer>.iterator()', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'DStop')): [3, -5.493977514095604]}

counter: 25
num skipped: 0
{'include': ['java.security.Security.getProvider(java.lang.String)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Security.getProvider(java.lang.String)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)'), (False, False, False), ('java.security.Security.getProvider(java.lang.String)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'DStop')): [38, -1.2924888850943717], (('DSubTree', 'java.security.Security.getProvider(java.lang.String)'), (False, False), ('java.security.Security.getProvider(java.lang.String)', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)')): [12, -1.2624840438365936]}

counter: 26
num skipped: 0
{'include': ['java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeInt(int)'), (False, False), ('java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)')): [6, -0.4443498849104799], (('DSubTree', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)'), (False, False, False), ('java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DStop')): [19, -0.5623324075713754], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)'), (False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [20, -0.58015526086092], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeByte(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [1, -5.680995636852458], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)')): [4, -0.2826360836625099]}

counter: 27
num skipped: 0
{'include': ['java.util.Collection<V>.size()', 'java.util.Collection<V>.clear()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<V>.size()', 'java.util.Collection<V>.clear()'), (False, False, False), ('java.util.Collection<V>.size()', 'java.util.Collection<V>.clear()', 'DStop')): [48, -5.638089537393171], (('DSubTree', 'java.util.Collection<V>.size()'), (False, False), ('java.util.Collection<V>.size()', 'java.util.Collection<V>.clear()')): [2, -3.682235535234213]}

counter: 28
num skipped: 0
{'include': ['java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False), ('java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])')): [21, -4.964923143386841], (('DSubTree', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])'), (False, False, False), ('java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.FloatBuffer.put(float[])', 'DStop')): [29, -5.06359894014895]}

counter: 29
num skipped: 0
{'include': ['java.awt.Component.getParent()', 'java.awt.Component.getWidth()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getParent()'), (False, False), ('java.awt.Component.getParent()', 'java.awt.Component.getWidth()')): [8, -0.12648729421198368], (('DSubTree', 'java.awt.Component.getParent()', 'java.awt.Component.getWidth()'), (False, False, False), ('java.awt.Component.getParent()', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()')): [42, -0.21061002278293017]}

counter: 30
num skipped: 0
{'include': ['java.util.List<T>.size()', 'java.util.List<T>.add(Tau_T)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<T>.size()'), (False, False), ('java.util.List<T>.size()', 'java.util.List<T>.add(Tau_T)')): [30, -1.5313896517909598], (('DSubTree', 'java.util.List<T>.size()', 'java.util.List<T>.add(Tau_T)'), (False, False, False), ('java.util.List<T>.size()', 'java.util.List<T>.add(Tau_T)', 'DStop')): [20, -1.669292096979916]}

counter: 31
num skipped: 0
{'include': ['java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readInt()'), (False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()')): [9, -0.10081989085301757], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [35, -0.6869915006682277], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.net.URL.openStream()'), (False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.net.URL.openStream()', 'DStop')): [6, -5.910203900537454]}

counter: 32
num skipped: 0
{'include': ['java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.copyOf(int[],int)'), (False, False), ('java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])')): [41, -2.9298120886087418], (('DSubTree', 'java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False), ('java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.util.Arrays.sort(int[])')): [2, -9.691298922465649], (('DSubTree', 'java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])'), (False, False, False), ('java.util.Arrays.copyOf(int[],int)', 'java.util.Arrays.sort(int[])', 'DStop')): [7, -0.9331640055897878]}

counter: 33
num skipped: 0
{'include': ['java.util.Map.isEmpty()', 'java.util.Iterator.hasNext()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map.isEmpty()'), (False, False), ('java.util.Map.isEmpty()', 'java.util.Iterator.hasNext()')): [23, -5.818697392940521], (('DSubTree', 'java.util.Map.isEmpty()', 'java.util.Iterator.hasNext()'), (False, False, False), ('java.util.Map.isEmpty()', 'java.util.Iterator.hasNext()', 'DStop')): [27, -5.0068838857114315]}

counter: 34
num skipped: 0
{'include': ['java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.net.ServerSocket.ServerSocket(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)'), (False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.net.ServerSocket.ServerSocket(int)')): [1, -0.27860257774591446], (('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.net.ServerSocket.ServerSocket(int)'), (False, False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.net.ServerSocket.ServerSocket(int)', 'DStop')): [49, -3.011925788014196]}

counter: 35
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)', 'java.util.Collections.unmodifiableMap(java.util.Map)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)', 'java.util.Collections.unmodifiableMap(java.util.Map)')): [19, -1.7782853245735168], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)', 'java.util.Collections.unmodifiableMap(java.util.Map)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)', 'java.util.Collections.unmodifiableMap(java.util.Map)', 'DStop')): [31, -3.1979574111755937]}

counter: 36
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)')): [41, -5.414079666137695], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [9, -1.3153224335983396]}

counter: 37
num skipped: 0
{'include': ['java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)')): [10, -0.4024706743657589], (('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(boolean)', 'DStop')): [40, -0.9926882572472095]}

counter: 38
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [4, -3.706130027770996], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [11, -0.19258179236203432], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'DStop')): [34, -6.561116075608879], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [1, -3.2537414539401652]}

counter: 39
num skipped: 0
{'include': ['javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [5, -1.7509937055874616], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [16, -3.093859102576971], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'), (False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'DStop')): [10, -0.23557607270777225], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)')): [19, -3.853452607989311]}

counter: 40
num skipped: 0
{'include': ['java.lang.StringBuffer.insert(int,java.lang.String)', 'java.lang.String.indexOf(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.insert(int,java.lang.String)'), (False, False), ('java.lang.StringBuffer.insert(int,java.lang.String)', 'java.lang.String.indexOf(java.lang.String,int)')): [4, -12.761316776275635], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)'), (False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.StringBuffer.insert(int,java.lang.String)')): [5, -10.313350975513458], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)', 'java.lang.StringBuffer.insert(int,java.lang.String)'), (False, False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.StringBuffer.insert(int,java.lang.String)', 'DStop')): [3, -10.555398216005415], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()', 'java.lang.StringBuffer.insert(int,java.lang.String)'), (False, False, False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()', 'java.lang.StringBuffer.insert(int,java.lang.String)', 'DStop')): [19, -11.20465361746028], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()', 'java.lang.StringBuffer.insert(int,java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()', 'java.lang.StringBuffer.insert(int,java.lang.String)', 'java.lang.StringBuffer.toString()', 'DStop')): [8, -13.992683522286825], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()'), (False, False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()', 'java.lang.StringBuffer.insert(int,java.lang.String)')): [11, -7.924272048971034]}

counter: 41
num skipped: 0
{'include': ['java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)')): [20, -2.698929388076067], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)', 'DStop')): [30, -2.32704621180892]}

counter: 42
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.get(int)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.get(int)', 'DStop')): [5, -3.543658553116984], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.get(int)', 'java.lang.String.length()'), (False, False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.get(int)', 'java.lang.String.length()', 'DStop')): [8, -4.016079020220786], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.length()'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.length()', 'DStop')): [1, -5.691864639520645], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [36, -5.054648965597153]}

counter: 43
num skipped: 0
{'include': ['java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.get(int)'), (False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()')): [16, -4.483451023697853], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [13, -1.4998123049736023], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()')): [17, -4.380509793758392], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [4, -4.433481245301664]}

counter: 44
num skipped: 0
{'include': ['javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [33, -1.08926104567945], (('DSubTree', 'javax.swing.JLabel.JLabel()'), (False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)')): [7, -0.32137536257505417], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Color.Color(int,int,int)')): [10, -3.4220481254160404]}

counter: 45
num skipped: 0
{'include': ['java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.StringWriter(int)'), (False, False), ('java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [32, -10.863919615745544], (('DSubTree', 'java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False), ('java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [3, -12.642573229037225], (('DSubTree', 'java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()'), (False, False, False, False), ('java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()', 'DStop')): [12, -8.163756118156016], (('DSubTree', 'java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False, False), ('java.io.StringWriter.StringWriter(int)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()')): [3, -6.392323728650808]}

counter: 46
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)')): [21, -1.2312600535806268], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'DStop')): [29, -1.1501605596859008]}

counter: 47
num skipped: 0
{'include': ['java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[],java.lang.String)', 'DStop')): [50, -3.349369485571515]}

counter: 48
num skipped: 0
{'include': ['java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.charAt(int)'), (False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [23, -0.4984324957476929], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [7, -0.35283941589295864], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [16, -8.322212397364638], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [4, -3.2726762406527996]}

counter: 49
num skipped: 0
{'include': ['java.lang.String.equals(java.lang.Object)', 'java.io.File.createNewFile()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.equals(java.lang.Object)'), (False, False), ('java.lang.String.equals(java.lang.Object)', 'java.io.File.createNewFile()')): [1, -7.256656348705292], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.createNewFile()')): [45, -3.595177412033081], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.createNewFile()', 'java.util.Date.Date()', 'java.io.File.exists()'), (False, False, False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.createNewFile()', 'java.util.Date.Date()', 'java.io.File.exists()', 'DStop')): [3, -9.132681801915169], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.createNewFile()', 'java.util.Date.Date()'), (False, False, False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.createNewFile()', 'java.util.Date.Date()', 'DStop')): [1, -5.430606007575989]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.39333333333333337, 'relevant_additions': 0.37083333333333335, 'meets_constraints': 1.0000000000000004, 'in_set': 0.27999999999999997, 'test_set_relevant_additions': 0.3291666666666667}
