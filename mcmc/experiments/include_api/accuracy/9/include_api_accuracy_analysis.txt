data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 30


counter: 0
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)')): [1, -6.6141839027404785], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)')): [1, -4.705689370632172], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [48, -4.363295719027519]}

counter: 1
num skipped: 0
{'include': ['java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)')): [38, -4.097271084785461], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.io.File.File(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)')): [3, -7.931520938873291], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'DStop')): [9, -1.8467985223978758]}

counter: 2
num skipped: 0
{'include': ['java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.valueOf(boolean)'), (False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)')): [15, -3.1515502333641052], (('DSubTree', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)', 'DStop')): [20, -0.22857720917090774], (('DSubTree', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)'), (False, False, False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop')): [7, -4.929412363562733], (('DSubTree', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)')): [8, -2.479051984846592]}

counter: 3
num skipped: 0
{'include': ['java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)'), (False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)', 'DStop')): [7, -3.0965571738779545], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)')): [21, -3.566610760986805], (('DSubTree', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)'), (False, False, False), ('java.lang.Boolean.parseBoolean(java.lang.String)', 'java.lang.String.valueOf(boolean)', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [22, -1.9713853639550507]}

counter: 4
num skipped: 0
{'include': ['java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.Socket.getOutputStream()'), (False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)')): [17, -1.1528656538575888], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'DStop')): [21, -0.5805854219943285], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()'), (False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'DStop')): [8, -1.8287690437864512], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()')): [2, -1.1308266632258892], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataOutputStream.writeInt(int)')): [2, -0.42081082984805107]}

counter: 5
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getY()'), (False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [34, -14.455825328826904], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [16, -10.076269958619378]}

counter: 6
num skipped: 0
{'include': ['java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String)', 'java.lang.Integer.Integer(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String)'), (False, False), ('java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String)', 'java.lang.Integer.Integer(int)')): [20, -0.33656603936105967], (('DSubTree', 'java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String)', 'java.lang.Integer.Integer(int)'), (False, False, False), ('java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String)', 'java.lang.Integer.Integer(int)', 'DStop')): [30, -0.8914659582078457]}

counter: 7
num skipped: 0
{'include': ['java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.compare(double,double)'), (False, False), ('java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)')): [25, -0.9255121536552906], (('DSubTree', 'java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)'), (False, False, False), ('java.lang.Double.compare(double,double)', 'java.lang.Math.abs(double)', 'DStop')): [25, -1.3390995413064957]}

counter: 8
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [18, -5.966355323791504], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [2, -5.200775362551212], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [27, -9.731929961359128], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [3, -7.805876463651657]}

counter: 9
num skipped: 0
{'include': ['java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.Socket.getOutputStream()'), (False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)')): [10, -0.1983236614614725], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [7, -3.015747138473671], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [1, -2.598820645653177], (('DSubTree', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.net.Socket.getInputStream()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [32, -0.25698595959693193]}

counter: 10
num skipped: 0
{'include': ['java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)'), (False, False, False), ('java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)')): [8, -9.602615458890796], (('DSubTree', 'java.awt.image.BufferedImage.getGraphics()'), (False, False), ('java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)')): [9, -2.184470474720001], (('DSubTree', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)'), (False, False, False, False), ('java.awt.image.BufferedImage.getGraphics()', 'java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)', 'DStop')): [33, -5.011998895555735]}

counter: 11
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()')): [28, -5.999858021736145], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.close()', 'DStop')): [22, -2.3414511531591415]}

counter: 12
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [35, -5.118308067321777], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [15, -7.931679040193558]}

counter: 13
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)')): [36, -1.2640724424272776], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.String.substring(int,int)')): [7, -6.959538534283638], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)'), (False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int,int)')): [7, -4.315858043730259]}

counter: 14
num skipped: 0
{'include': ['java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'), (False, False, False), ('java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()', 'DStop')): [50, -1.8004424115642905]}

counter: 15
num skipped: 0
{'include': ['java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)'), (False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [7, -0.9099828898906708], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)')): [18, -1.2333107590675354], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Boolean.toString(boolean)')): [25, -3.1373624056577682]}

counter: 16
num skipped: 0
{'include': ['javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.FontMetrics.getHeight()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.FontMetrics.getHeight()'), (False, False, False), ('javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.FontMetrics.getHeight()', 'DStop')): [20, -0.6429202102590352], (('DSubTree', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)'), (False, False), ('javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.FontMetrics.getHeight()')): [30, -1.0178630465525202]}

counter: 17
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [27, -1.3059599101543427], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [2, -0.01666913941153325], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'DStop')): [8, -1.2904673467273824], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [2, -0.588667215895839], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)')): [11, -0.28131652530282736]}

counter: 18
num skipped: 0
{'include': ['java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable.Hashtable()'), (False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString()')): [5, -7.769137144088745], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)'), (False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()')): [12, -7.774620473384857], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.Integer(int)'), (False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()')): [16, -7.753660127520561], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()'), (False, False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.lang.Integer.Integer(int)')): [1, -7.451966617722064], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()'), (False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'DStop')): [11, -2.0014950037002563], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.lang.Integer.Integer(int)'), (False, False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.lang.Integer.Integer(int)', 'DStop')): [1, -6.465945988893509], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.awt.Component.repaint()', 'java.lang.Integer.Integer(int)'), (False, False, False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.awt.Component.repaint()', 'java.lang.Integer.Integer(int)', 'DStop')): [1, -9.217439787462354], (('DSubTree', 'java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.awt.Component.repaint()'), (False, False, False, False, False), ('java.util.Hashtable.Hashtable()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.toString()', 'java.awt.Component.repaint()', 'DStop')): [3, -8.292088498361409]}

counter: 19
num skipped: 0
{'include': ['java.lang.String.length()', 'java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.length()', 'java.util.Calendar.add(int,int)'), (False, False, False), ('java.lang.String.length()', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()')): [4, -6.425801798701286], (('DSubTree', 'java.lang.String.length()'), (False, False), ('java.lang.String.length()', 'java.util.Calendar.add(int,int)')): [22, -3.216537684202194], (('DSubTree', 'java.lang.String.length()', 'java.util.Calendar.add(int,int)'), (False, False, False), ('java.lang.String.length()', 'java.util.Calendar.add(int,int)', 'DStop')): [24, -4.9340632781386375]}

counter: 20
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [2, -10.725369215011597], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [10, -9.045164464390837], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [38, -1.5930900985840708]}

counter: 21
num skipped: 0
{'include': ['java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'DStop')): [36, -1.6719330908963457], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)'), (False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [14, -0.021471366460900754]}

counter: 22
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)')): [1, -11.791672232560813], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.toByteArray()', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)')): [5, -5.343680679798126], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.toByteArray()', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.toByteArray()', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'DStop')): [44, -3.9341524094343185]}

counter: 23
num skipped: 0
{'include': ['java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)')): [39, -1.2833703649666859], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [3, -3.088937541047926], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False, False), ('java.lang.System.getenv(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'DStop')): [4, -8.15414147824049], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [1, -4.9340081214904785], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)')): [3, -4.835460238158703]}

counter: 24
num skipped: 0
{'include': ['java.io.InputStream.read(byte[],int,int)', 'java.io.File.getName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read(byte[],int,int)'), (False, False), ('java.io.InputStream.read(byte[],int,int)', 'java.io.File.getName()')): [50, -1.7118609547615051]}

counter: 25
num skipped: 0
{'include': ['java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readInt()'), (False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()')): [7, -2.0678976578637958], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [43, -3.936237707734108]}

counter: 26
num skipped: 0
{'include': ['javax.swing.JFrame.JFrame()', 'javax.swing.JButton.JButton(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JFrame.JFrame()'), (False, False), ('javax.swing.JFrame.JFrame()', 'javax.swing.JButton.JButton(java.lang.String)')): [15, -2.255094826221466], (('DSubTree', 'javax.swing.JFrame.JFrame()', 'javax.swing.JButton.JButton(java.lang.String)'), (False, False, False), ('javax.swing.JFrame.JFrame()', 'javax.swing.JButton.JButton(java.lang.String)', 'DStop')): [35, -0.9229141764808446]}

counter: 27
num skipped: 0
{'include': ['$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.group(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.regex.Matcher.find(int)'), (False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.group(int)')): [2, -11.637561369687319], (('DSubTree', '$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.group(int)'), (False, False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.group(int)', 'DStop')): [48, -7.778421510010958]}

counter: 28
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)')): [33, -2.6036752462387085], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [17, -1.585420663934201]}

counter: 29
num skipped: 0
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.signum(float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.signum(float)')): [9, -1.1556734218611382], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.signum(float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.signum(float)', 'DStop')): [34, -3.2285361737012863], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.signum(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.signum(float)'), (False, False, False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.signum(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.signum(float)', 'DStop')): [7, -3.851793701760471]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.4555555555555555, 'relevant_additions': 0.42222222222222217, 'meets_constraints': 0.9999999999999999, 'in_set': 0.19999999999999998, 'test_set_relevant_additions': 0.41111111111111104}
