data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: accuracy
num test programs: 35


counter: 0
num skipped: 0
{'include': ['java.awt.Dimension.Dimension(int,int)', 'javax.swing.JLabel.JLabel()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Dimension.Dimension(int,int)'), (False, False), ('java.awt.Dimension.Dimension(int,int)', 'javax.swing.JLabel.JLabel()')): [17, -2.107050657272339], (('DSubTree', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JLabel.JLabel()'), (False, False, False), ('java.awt.Dimension.Dimension(int,int)', 'javax.swing.JLabel.JLabel()', 'DStop')): [33, -1.7236621575430036]}

counter: 1
num skipped: 0
{'include': ['$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [2, -2.180584132023796], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [1, -6.503537176999089], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [25, -6.253863702866511], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)'), (False, False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isNaN(double)', '$NOT$java.lang.Double.isInfinite(double)', '$NOT$java.lang.Double.isInfinite(double)')): [22, -2.001962138707313]}

counter: 2
num skipped: 0
{'include': ['java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.getInstance(java.lang.String)'), (False, False), ('java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextInt(int)')): [31, -4.897213064134121], (('DSubTree', 'java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextInt(int)'), (False, False, False), ('java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextInt(int)', 'DStop')): [19, -3.238735776860267]}

counter: 3
num skipped: 0
{'include': ['java.lang.Math.min(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(double,double)'), (False, False), ('java.lang.Math.min(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)')): [8, -5.302105544407823], (('DSubTree', 'java.lang.Math.min(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False), ('java.lang.Math.min(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [33, -5.344164747395553], (('DSubTree', 'java.lang.Math.min(double,double)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False, False), ('java.lang.Math.min(double,double)', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [6, -5.121359952492639], (('DSubTree', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)'), (False, False, False, False), ('java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.util.List<java.lang.Double>.add(java.lang.Double)', 'DStop')): [3, -4.651185906492174]}

counter: 4
num skipped: 0
{'include': ['java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.close()')): [23, -15.99487590789795], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.close()'), (False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.close()', 'DStop')): [17, -10.583329857967328], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.write(byte[])'), (False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()')): [10, -9.988643273711205]}

counter: 5
num skipped: 0
{'include': ['java.util.Enumeration.hasMoreElements()', 'java.util.Collections.enumeration(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Enumeration.hasMoreElements()'), (False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Collections.enumeration(java.util.Collection)')): [42, -7.2988121509552], (('DSubTree', 'java.util.Enumeration.hasMoreElements()', 'java.util.Collections.enumeration(java.util.Collection)'), (False, False, False), ('java.util.Enumeration.hasMoreElements()', 'java.util.Collections.enumeration(java.util.Collection)', 'DStop')): [8, -0.649203550972743]}

counter: 6
num skipped: 0
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -5.327334016561508], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)')): [21, -5.8042298555374146], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'DStop')): [28, -3.0280536860227585]}

counter: 7
num skipped: 0
{'include': ['java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.io.File>.add(java.io.File)'), (False, False), ('java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String,java.lang.String)')): [7, -6.567672252655029], (('DSubTree', 'java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String,java.lang.String)', 'DStop')): [43, -7.9813467265921645]}

counter: 8
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [5, -0.1448905598372221], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [4, -0.23895652079954743], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)', 'DStop')): [1, -3.527317602187395], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [2, -2.6735668196342885], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.length()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.toString()')): [16, -5.2124932068400085], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.length()')): [22, -1.5992574244737625]}

counter: 9
num skipped: 0
{'include': ['java.util.Hashtable.Hashtable(int)', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable.Hashtable(int)'), (False, False), ('java.util.Hashtable.Hashtable(int)', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)')): [32, -2.836413204902783], (('DSubTree', 'java.util.Hashtable.Hashtable(int)', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.util.Hashtable.Hashtable(int)', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)', 'DStop')): [18, -4.327001378129353]}

counter: 10
num skipped: 0
{'include': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.toInstant()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.toInstant()')): [14, -6.714852987788618], (('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.toInstant()'), (False, False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.toInstant()', 'DStop')): [36, -6.060036242939532]}

counter: 11
num skipped: 0
{'include': ['java.io.FileReader.FileReader(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileReader.FileReader(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.io.FileReader.FileReader(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [44, -5.0186390791786835], (('DSubTree', 'java.io.FileReader.FileReader(java.lang.String)'), (False, False), ('java.io.FileReader.FileReader(java.lang.String)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [6, -5.206296682357788]}

counter: 12
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)')): [14, -0.8100239746272564], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'DStop')): [36, -1.834534776458895]}

counter: 13
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)')): [4, -12.249288391321898], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)')): [5, -3.6315596103668213], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.substring(int,int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.substring(int,int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)')): [4, -6.385426998138428], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.substring(int,int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.substring(int,int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [15, -2.6584819555282593], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [10, -1.5443735998123884], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'DStop')): [1, -5.767065739259124], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [4, -2.415713142603636], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [5, -2.748178631067276], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.Collections.sort(java.util.List)')): [2, -1.378268538042903]}

counter: 14
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [7, -0.7902868990786374], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [43, -2.079840396414511]}

counter: 15
num skipped: 0
{'include': ['$NOT$java.io.File.isDirectory()', 'java.util.Arrays.sort(T[],java.util.Comparator)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False), ('java.util.Arrays.sort(T[],java.util.Comparator)', '$NOT$java.io.File.isDirectory()')): [42, -3.3023361563682556], (('DSubTree', 'java.util.Arrays.sort(T[],java.util.Comparator)', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.util.Arrays.sort(T[],java.util.Comparator)', '$NOT$java.io.File.isDirectory()', 'DStop')): [8, -3.5330874025821686]}

counter: 16
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [6, -4.755338907241821], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [2, -4.063139796257019], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [42, -5.4042580043460475]}

counter: 17
num skipped: 0
{'include': ['java.text.DecimalFormat.getDecimalFormatSymbols()', 'java.lang.String.valueOf(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.DecimalFormat.getDecimalFormatSymbols()'), (False, False), ('java.text.DecimalFormat.getDecimalFormatSymbols()', 'java.lang.String.valueOf(char)')): [12, -1.0498386211693287], (('DSubTree', 'java.text.DecimalFormat.getDecimalFormatSymbols()', 'java.lang.String.valueOf(char)'), (False, False, False), ('java.text.DecimalFormat.getDecimalFormatSymbols()', 'java.lang.String.valueOf(char)', 'DStop')): [38, -2.307395895710215]}

counter: 18
num skipped: 0
{'include': ['java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.ResultSet.getDate(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)'), (False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.ResultSet.getDate(java.lang.String)')): [50, -5.911031603813171]}

counter: 19
num skipped: 0
{'include': ['java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'), (False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)')): [6, -10.810874938964844], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.Vector.Vector()'), (False, False, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.Vector.Vector()', 'DStop')): [2, -13.354110479354858], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()'), (False, False, False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()', 'DStop')): [2, -12.534691970329732], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'), (False, False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DStop')): [9, -5.484846711158752], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)')): [11, -4.175158858299255], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DLoop'), (False, False, False, True, True, False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DStop', 'DStop')): [13, -5.278617831372685], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DLoop'), (False, False, False, True, True, False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [7, -7.297638735617511]}

counter: 20
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace()'), (False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)')): [6, -1.9560521766543388], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'DStop')): [13, -3.570331715978682], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)')): [10, -4.128981451969594], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Class<Tau_T>.getSimpleName()')): [4, -4.4925797283649445], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Class<Tau_T>.getSimpleName()')): [15, -2.906580001115799], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Class<Tau_T>.getSimpleName()'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Class<Tau_T>.getSimpleName()', 'DStop')): [2, -3.164750177413225]}

counter: 21
num skipped: 0
{'include': ['java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()', 'DStop')): [39, -4.522044435143471], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()'), (False, False, False, False), ('java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()', 'java.lang.Thread.currentThread()', 'DStop')): [1, -6.937074364133878], (('DSubTree', 'java.lang.Thread.currentThread()'), (False, False), ('java.lang.Thread.currentThread()', 'java.lang.Thread.interrupt()')): [10, -1.6581176817417145]}

counter: 22
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [16, -6.356893090764061], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [26, -6.317653447389603], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'), (False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'DStop')): [2, -13.110863704234362], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'DStop')): [6, -11.465364247560501]}

counter: 23
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [3, -16.233776841079816], (('DSubTree', 'java.awt.geom.RectangularShape.getY()'), (False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [37, -8.208114624023438], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.awt.Rectangle.Rectangle(int,int,int,int)'), (False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [10, -10.011425733566284]}

counter: 24
num skipped: 0
{'include': ['$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.split(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.matches(java.lang.String)'), (False, False), ('$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.split(java.lang.String,int)')): [36, -0.6572458148002625], (('DSubTree', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.split(java.lang.String,int)'), (False, False, False), ('$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.split(java.lang.String,int)', 'DStop')): [14, -1.5768177739810199]}

counter: 25
num skipped: 0
{'include': ['$NOT$java.lang.String.startsWith(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)')): [31, -3.5264177918434143], (('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)'), (False, False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)', 'DStop')): [19, -2.660512383605237]}

counter: 26
num skipped: 0
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()')): [4, -0.8151208199560642], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'DStop')): [46, -0.8022262249141932]}

counter: 27
num skipped: 0
{'include': ['java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()'), (False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)')): [21, -0.8462320938706398], (('DSubTree', 'java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.Buffer.position()', 'java.nio.Buffer.limit(int)', 'DStop')): [29, -0.4206793522462249]}

counter: 28
num skipped: 0
{'include': ['java.awt.Font.getStyle()', 'java.awt.Font.deriveFont(int,float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Font.getStyle()'), (False, False), ('java.awt.Font.getStyle()', 'java.awt.Font.deriveFont(int,float)')): [20, -3.8833704642602243], (('DSubTree', 'java.awt.Font.getStyle()', 'java.awt.Font.getSize()'), (False, False, False), ('java.awt.Font.getStyle()', 'java.awt.Font.getSize()', 'java.awt.Font.deriveFont(int,float)')): [30, -1.550044272793457]}

counter: 29
num skipped: 0
{'include': ['java.util.List<java.lang.String>.get(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.get(int)'), (False, False), ('java.util.List<java.lang.String>.get(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)')): [17, -4.013441979885101], (('DSubTree', 'java.util.List<java.lang.String>.get(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'), (False, False, False), ('java.util.List<java.lang.String>.get(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'DStop')): [33, -2.707202296005562]}

counter: 30
num skipped: 0
{'include': ['java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readBoolean()'), (False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()')): [18, -0.1777052991092205], (('DSubTree', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()'), (False, False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()', 'DStop')): [27, -1.3352775329258293], (('DSubTree', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()'), (False, False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()', 'java.lang.String.String(byte[])')): [3, -6.256545964628458], (('DSubTree', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readInt()'), (False, False, False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readInt()', 'java.lang.String.String(byte[])')): [2, -9.09633694429067]}

counter: 31
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [2, -12.623186111450195], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [2, -12.803439140319824], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [46, -2.8741283118724823]}

counter: 32
num skipped: 0
{'include': ['java.util.Date.Date()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date()'), (False, False), ('java.util.Date.Date()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)')): [34, -8.736853122711182], (('DSubTree', 'java.util.Date.Date()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.Date.Date()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)')): [1, -9.159080505371094], (('DSubTree', 'java.util.Date.Date()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'), (False, False, False), ('java.util.Date.Date()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'DStop')): [15, -4.662469280679943]}

counter: 33
num skipped: 0
{'include': ['java.text.NumberFormat.format(double)', 'java.lang.StringBuilder.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.NumberFormat.format(double)', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.text.NumberFormat.format(double)', 'java.lang.StringBuilder.toString()', 'DStop')): [50, -9.362310669617727]}

counter: 34
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.FilterInputStream.read(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'), (False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.FilterInputStream.read(byte[])')): [3, -3.9311968833208084], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.FilterInputStream.read(byte[])'), (False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [1, -0.49340827437117696], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [27, -2.8493811655789614], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [14, -4.4302884778007865], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()')): [3, -7.5845196270383894], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()')): [2, -6.778618818148971]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.28095238095238095, 'relevant_additions': 0.28095238095238095, 'meets_constraints': 1.0000000000000002, 'in_set': 0.08571428571428572, 'test_set_relevant_additions': 0.24047619047619048}
