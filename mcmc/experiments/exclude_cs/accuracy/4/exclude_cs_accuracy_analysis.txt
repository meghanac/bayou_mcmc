data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: accuracy
num test programs: 50


counter: 1
num skipped: 1
{'include': ['java.lang.Boolean.toString(boolean)', 'DBranch'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [11, -32.9894595739388], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False), ('java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop', 'DStop')): [14, -7.752025809691986], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False), ('java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [9, -3.845219025941333], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False), ('java.lang.Boolean.toString(boolean)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [16, -6.940486579667777]}

counter: 2
num skipped: 1
{'include': ['DExcept', 'java.nio.ByteBuffer.allocateDirect(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.String.split(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.String.split(java.lang.String)', 'DStop', 'DStop')): [50, -6.86843836279877]}

counter: 3
num skipped: 1
{'include': ['java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.toString()'), (False, False), ('java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()')): [12, -11.596322655677795], (('DSubTree', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()'), (False, False, False), ('java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.io.ByteArrayOutputStream.close()')): [1, -6.615647554397583], (('DSubTree', 'java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [6, -6.404923439025879], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.Throwable.toString()')): [2, -4.3600770235061646], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()'), (False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()')): [7, -5.660591951571405], (('DSubTree', 'java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False), ('java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()')): [1, -6.8965988755226135], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [1, -5.713849946623668], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [6, -5.895446361973882], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [14, -5.404276728630066]}

counter: 4
num skipped: 1
{'include': ['DBranch', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.String>.get(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.get(int)', 'DStop', 'java.util.List<java.lang.String>.get(int)', 'DStop', 'DStop')): [50, -2.8844573497772217]}

counter: 5
num skipped: 1
{'include': ['java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.writeBytes(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.writeInt(int)'), (False, False), ('java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.writeBytes(java.lang.String)')): [39, -7.655717730522156], (('DSubTree', 'java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.writeBytes(java.lang.String)'), (False, False, False), ('java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.writeBytes(java.lang.String)', 'DStop')): [11, -8.55226241890341]}

counter: 6
num skipped: 1
{'include': ['DBranch', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.awt.Component.postEvent(java.awt.Event)', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.awt.Component.postEvent(java.awt.Event)', 'DStop', 'java.util.Dictionary.put(java.lang.Object,java.lang.Object)', 'DStop', 'DStop')): [50, -6.457147273700684]}

counter: 7
num skipped: 1
{'include': ['java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'), (False, False), ('java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.text.DateFormat.format(java.util.Date)')): [6, -14.02069354057312], (('DSubTree', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [3, -16.416542985942215], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)'), (False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)')): [11, -4.762069404125214], (('DSubTree', 'java.text.DateFormat.format(java.util.Date)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'), (False, False, False), ('java.text.DateFormat.format(java.util.Date)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'DStop')): [30, -2.403871333221332]}

counter: 8
num skipped: 1
{'include': ['java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateY()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getShearX()'), (False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateY()')): [11, -48.745431900024414], (('DSubTree', 'java.awt.geom.AffineTransform.getTranslateY()'), (False, False), ('java.awt.geom.AffineTransform.getTranslateY()', 'java.awt.geom.AffineTransform.getShearX()')): [35, -42.77356815338135], (('DSubTree', 'java.awt.geom.AffineTransform.getTranslateY()', 'java.awt.geom.AffineTransform.getShearX()'), (False, False, False), ('java.awt.geom.AffineTransform.getTranslateY()', 'java.awt.geom.AffineTransform.getShearX()', 'DStop')): [4, -35.8464770315677]}

counter: 9
num skipped: 1
{'include': ['DBranch', '$NOT$java.io.File.isDirectory()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.delete()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.delete()', 'DStop', 'java.io.File.listFiles()', 'DStop', 'DStop')): [31, -0.05878912145271897], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.delete()', '$NOT$java.io.File.isDirectory()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.delete()', 'DStop', 'DStop', 'DStop')): [19, -3.2434509052254725]}

counter: 10
num skipped: 1
{'include': ['DBranch', 'java.util.Set<java.lang.String>.size()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Set<java.lang.String>.size()', 'java.util.Set<java.lang.String>.size()', 'java.util.Set<java.lang.String>.size()', 'java.util.List<java.lang.String>.size()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Set<java.lang.String>.size()', 'java.util.Set<java.lang.String>.size()', 'DStop', 'java.util.List<java.lang.String>.size()', 'DStop', 'DStop')): [50, -0.5727902129292488]}

counter: 11
num skipped: 1
{'include': ['DBranch', 'java.lang.String.intern()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.String.intern()', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)', 'java.lang.String.intern()', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.String.intern()', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)', 'DStop', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -9.818868160247803]}

counter: 12
num skipped: 1
{'include': ['java.lang.Throwable.initCause(java.lang.Throwable)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.initCause(java.lang.Throwable)'), (False, False), ('java.lang.Throwable.initCause(java.lang.Throwable)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [22, -1.6163282133638859], (('DSubTree', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.lang.Throwable.initCause(java.lang.Throwable)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [9, -4.296776683535427], (('DSubTree', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'java.lang.RuntimeException.RuntimeException()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False, False), ('java.lang.Throwable.initCause(java.lang.Throwable)', 'java.lang.RuntimeException.RuntimeException()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [1, -10.669755986891687], (('DSubTree', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'java.lang.RuntimeException.RuntimeException()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False, False), ('java.lang.Throwable.initCause(java.lang.Throwable)', 'java.lang.RuntimeException.RuntimeException()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.ByteArrayOutputStream.close()')): [18, -5.530681073665619]}

counter: 13
num skipped: 1
{'include': ['$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)'), (False, False), ('$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)')): [1, -21.573784112930298], (('DSubTree', '$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)'), (False, False, False), ('$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'DStop')): [4, -22.440666794776917], (('DSubTree', '$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.lang.reflect.Method.getParameterTypes()'), (False, False, False, False), ('$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.lang.reflect.Method.getParameterTypes()', 'DStop')): [26, -21.305466424673796], (('DSubTree', '$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)'), (False, False, False, False), ('$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'DStop')): [11, -21.47821420803666], (('DSubTree', '$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.setResourceBundle(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)'), (False, False, False, False, False), ('$NOT$java.util.logging.Logger.internalIsLoggable(java.util.logging.Level)', 'java.util.logging.Logger.setResourceBundle(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'java.util.logging.Logger.log(java.util.logging.LogRecord)', 'DStop')): [8, -16.59940242724724]}

counter: 14
num skipped: 1
{'include': ['java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Point.Point()'), (False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)')): [27, -1.8861733116209507], (('DSubTree', 'java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'DStop')): [16, -0.4832423320040107], (('DSubTree', 'java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Component.getHeight()')): [7, -1.1763209816999733]}

counter: 15
num skipped: 1
{'include': ['DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [19, -4.009039551019669], (('DSubTree', 'DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [3, -7.315772395930253], (('DSubTree', 'DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [13, -7.836699034785852], (('DSubTree', 'DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DStop', 'DStop', 'DStop')): [15, -2.4706170639765332]}

counter: 16
num skipped: 1
{'include': ['javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)'), (False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [17, -2.5806678235530853], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'DStop')): [16, -2.538417659699917], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.io.File.File(java.io.File,java.lang.String)')): [2, -6.370120897889137], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'DStop')): [2, -7.9317197455093265], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.io.File.File(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False, False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.io.File.File(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'DStop')): [2, -7.098604860948399], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.io.File.File(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.io.File.File(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'DStop')): [11, -5.904043301939964]}

counter: 17
num skipped: 1
{'include': ['DExcept', 'java.lang.Throwable.getMessage()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Thread.sleep(long)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [32, -0.7209703620741266], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Thread.sleep(long)', 'DStop')): [18, -0.13247197499731556]}

counter: 18
num skipped: 1
{'include': ['DLoop', 'java.util.Iterator<byte[]>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DStop', 'DStop')): [50, -5.621765620126098]}

counter: 19
num skipped: 1
{'include': ['javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.awt.Toolkit.getDefaultToolkit()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'), (False, False), ('javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.awt.Toolkit.getDefaultToolkit()')): [4, -3.3683003783226013], (('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)')): [18, -3.540521115064621], (('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'), (False, False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'DStop')): [28, -0.6579124623422103]}

counter: 20
num skipped: 1
{'include': ['java.util.Random.Random(long)', 'java.lang.Math.min(int,int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.Random(long)'), (False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)')): [19, -1.5369918044889346], (('DSubTree', 'java.util.Random.Random(long)', 'java.lang.Math.min(int,int)'), (False, False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'DStop')): [15, -0.6609308766201138], (('DSubTree', 'java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.get(int)'), (False, False, False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.get(int)', 'DStop')): [1, -8.638666957689566], (('DSubTree', 'java.util.Random.Random(long)', 'java.lang.Math.min(int,int)'), (False, False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.get(int)')): [2, -6.073340687900782], (('DSubTree', 'java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.size()'), (False, False, False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Integer>.get(int)')): [3, -5.848455691244453], (('DSubTree', 'java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Integer>.get(int)'), (False, False, False, False, False), ('java.util.Random.Random(long)', 'java.lang.Math.min(int,int)', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Integer>.get(int)', 'DStop')): [10, -2.396034501492977]}

counter: 21
num skipped: 1
{'include': ['java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.executeUpdate()'), (False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()')): [27, -1.2259521484375], (('DSubTree', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'), (False, False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()', 'DStop')): [23, -2.719803132115203]}

counter: 22
num skipped: 1
{'include': ['DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', 'DStop', 'java.util.List<java.lang.String>.size()', 'DStop', 'DStop')): [50, -0.30732310097664595]}

counter: 23
num skipped: 1
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [3, -0.08017815090715885], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [44, -0.5851823017001152], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [1, -7.684464121120982], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Thread.currentThread()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Thread.currentThread()', 'DStop')): [2, -12.592687490861863]}

counter: 24
num skipped: 1
{'include': ['DLoop', 'java.util.List<>.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.List<>.get(int)', 'java.util.regex.Matcher.start()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.List<>.get(int)', 'java.util.regex.Matcher.start()', 'DStop', 'DStop')): [50, -8.084836959838867]}

counter: 25
num skipped: 1
{'include': ['DExcept', 'java.io.ObjectInputStream.readObject()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [50, -3.434584705159068]}

counter: 26
num skipped: 1
{'include': ['DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.trim()', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.trim()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.trim()', 'DStop', 'java.lang.String.trim()', 'DStop', 'DStop')): [50, -15.506729836342856]}

counter: 27
num skipped: 1
{'include': ['java.util.Arrays.sort(long[])', 'java.util.Arrays.sort(int[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(long[])'), (False, False), ('java.util.Arrays.sort(long[])', 'java.util.Arrays.sort(int[])')): [13, -4.227442264556885], (('DSubTree', 'java.util.Arrays.sort(long[])', 'java.util.Arrays.sort(int[])'), (False, False, False), ('java.util.Arrays.sort(long[])', 'java.util.Arrays.sort(int[])', 'DStop')): [37, -5.441457808017731]}

counter: 28
num skipped: 1
{'include': ['DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -22.513688301511138]}

counter: 29
num skipped: 1
{'include': ['java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)')): [5, -3.216873548924923], (('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'), (False, False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop')): [33, -3.176807938805723], (('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)'), (False, False, False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)')): [10, -3.4941599624289665], (('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'), (False, False, False, False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop')): [2, -0.19352063012775034]}

counter: 31
num skipped: 2
{'include': ['java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()'), (False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()')): [8, -0.9897329772138619], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'), (False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)')): [2, -6.309593861922622], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'), (False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'DStop')): [40, -4.9577772952616215]}

counter: 32
num skipped: 2
{'include': ['DLoop', 'java.io.Reader.read(char[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DStop', 'DStop')): [50, -2.2806634071748704]}

counter: 33
num skipped: 2
{'include': ['java.lang.StringBuffer.length()', 'DBranch'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.length()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'java.lang.String.length()', 'java.lang.String.trim()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.lang.StringBuffer.length()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DStop', 'java.lang.String.trim()', 'DStop', 'DStop')): [50, -4.0386723279953]}

counter: 36
num skipped: 4
{'include': ['DBranch', '$NOT$java.util.Arrays.equals(long[],long[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.util.Arrays.equals(long[],long[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', '$NOT$java.util.Arrays.equals(long[],long[])', 'java.io.StringWriter.toString()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.util.Arrays.equals(long[],long[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'DStop', 'java.io.StringWriter.toString()', 'DStop', 'DStop')): [50, -8.355120731750503]}

counter: 37
num skipped: 4
{'include': ['DBranch', '$NOT$java.io.File.isDirectory()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getName()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getName()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getName()', 'DStop', 'java.io.File.getName()', 'DStop', 'DStop')): [50, -0.22920746530871838]}

counter: 38
num skipped: 4
{'include': ['java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.addAll(java.util.Collection)'), (False, False), ('java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()')): [3, -0.15900858119130135], (('DSubTree', 'java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()'), (False, False, False), ('java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()', 'DStop')): [47, -0.5293192113749683]}

counter: 39
num skipped: 4
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [24, -0.3903799164108932], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableMap(java.util.Map)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableMap(java.util.Map)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [3, -12.806339057162404], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [7, -3.0423227259889245], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)', 'DStop')): [5, -3.2225350382504985], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)', 'DStop')): [11, -1.2272588969935896]}

counter: 40
num skipped: 4
{'include': ['DBranch', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DStop', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -3.763019514735788]}

counter: 41
num skipped: 4
{'include': ['DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop', 'DStop')): [1, -10.161686367820948], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, True, True, False, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [19, -8.359642763622105], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [30, -7.02238916841452]}

counter: 42
num skipped: 4
{'include': ['java.nio.FloatBuffer.put(float[])', 'java.nio.Buffer.flip()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.FloatBuffer.put(float[])'), (False, False), ('java.nio.FloatBuffer.put(float[])', 'java.nio.Buffer.flip()')): [26, -3.5594170093536377], (('DSubTree', 'java.nio.FloatBuffer.put(float[])', 'java.nio.Buffer.flip()'), (False, False, False), ('java.nio.FloatBuffer.put(float[])', 'java.nio.Buffer.flip()', 'DStop')): [24, -0.5892826304479968]}

counter: 43
num skipped: 4
{'include': ['java.lang.StringBuilder.toString()', 'java.util.List<java.lang.Object>.size()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.toString()'), (False, False), ('java.lang.StringBuilder.toString()', 'java.util.List<java.lang.Object>.size()')): [2, -2.486185312271118], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.util.List<java.lang.Object>.size()'), (False, False, False), ('java.lang.StringBuilder.toString()', 'java.util.List<java.lang.Object>.size()', 'DStop')): [48, -0.6555724532809108]}

counter: 45
num skipped: 5
{'include': ['java.lang.StringBuilder.StringBuilder()', 'java.util.Collections.reverse(java.util.List)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder()'), (False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.util.Collections.reverse(java.util.List)')): [11, -5.563398718833923], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.toString()', 'java.util.Collections.reverse(java.util.List)')): [6, -5.325081333518028], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'java.util.Collections.reverse(java.util.List)')): [27, -3.570193467894569], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'java.util.Collections.reverse(java.util.List)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()', 'java.util.Collections.reverse(java.util.List)', 'DStop')): [6, -4.883702777791768]}

counter: 46
num skipped: 5
{'include': ['java.util.Iterator.hasNext()', 'java.lang.reflect.Field.getType()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Iterator.hasNext()'), (False, False), ('java.util.Iterator.hasNext()', 'java.lang.reflect.Field.getType()')): [1, -13.294293880462646], (('DSubTree', 'java.lang.reflect.Field.getType()'), (False, False), ('java.lang.reflect.Field.getType()', 'java.util.Iterator.hasNext()')): [1, -7.793580532073975], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'java.util.Iterator.hasNext()')): [48, -2.124667133903131]}

counter: 47
num skipped: 5
{'include': ['java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)')): [4, -0.2839306405512616], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'DStop')): [46, -0.40304126794217154]}

counter: 49
num skipped: 6
{'include': ['$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.regex.Matcher.find(int)'), (False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()')): [40, -10.592656075954437], (('DSubTree', '$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()'), (False, False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()', 'java.util.regex.Matcher.end()')): [1, -10.861683309078217], (('DSubTree', '$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()'), (False, False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()', 'DStop')): [1, -6.171448364853859], (('DSubTree', '$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.start()', 'java.util.regex.Matcher.end()'), (False, False, False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.start()', 'java.util.regex.Matcher.end()', 'DStop')): [8, -8.466435525100678]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6283333333333336, 'relevant_additions': 0.6033333333333336, 'meets_constraints': 0.8800000000000004, 'in_set': 0.1, 'test_set_relevant_additions': 0.6033333333333336}
