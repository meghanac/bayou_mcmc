data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.List<T>.add(Tau_T)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.List<T>.add(Tau_T)')): [21, -0.3324529039673507], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.List<T>.add(Tau_T)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.List<T>.add(Tau_T)', 'DStop')): [29, -0.4214936550561106]}

counter: 1
num skipped: 0
{'include': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)'), (False, False, False, False), ('javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)')): [2, -31.891691070981324], (('DSubTree', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)'), (False, False, False), ('javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)')): [3, -29.817310571670532], (('DSubTree', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)'), (False, False, False, False, False), ('javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)', 'DStop')): [45, -14.930570065974166]}

counter: 2
num skipped: 0
{'include': ['DExcept', 'java.lang.Boolean.booleanValue()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Boolean.booleanValue()', 'java.lang.String.length()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Boolean.booleanValue()', 'java.lang.String.length()', 'DStop', 'DStop')): [18, -9.263264481402075], (('DSubTree', 'DExcept', 'java.lang.String.length()', 'java.lang.Boolean.booleanValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.length()', 'java.lang.Boolean.booleanValue()', 'DStop', 'DStop')): [25, -8.04263400000491], (('DSubTree', 'DExcept', 'java.lang.String.length()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.String.length()', 'java.lang.Boolean.booleanValue()', 'DStop')): [7, -7.737021463457495]}

counter: 3
num skipped: 0
{'include': ['java.lang.String.toLowerCase()', 'java.lang.String.equalsIgnoreCase(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toLowerCase()'), (False, False), ('java.lang.String.toLowerCase()', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [8, -0.05227287765592337], (('DSubTree', 'java.lang.String.toLowerCase()', 'java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False), ('java.lang.String.toLowerCase()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [42, -1.2103370953118429]}

counter: 4
num skipped: 0
{'include': ['java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.DatagramSocket.isClosed()'), (False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()')): [15, -2.358784794807434], (('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'), (False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'DStop')): [32, -0.36989155295304954], (('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'java.lang.Boolean.valueOf(boolean)', 'DStop')): [3, -0.5494642220091919]}

counter: 5
num skipped: 0
{'include': ['java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)')): [32, -3.4405042859725654], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.System.currentTimeMillis()')): [1, -5.488168448209763], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.getProperty(java.lang.String)', 'DStop')): [17, -3.584077199921012]}

counter: 7
num skipped: 1
{'include': ['DExcept', 'java.math.BigDecimal.valueOf(long)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [4, -10.405381254211534], (('DSubTree', 'DExcept', 'java.math.BigDecimal.valueOf(long)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [46, -7.7876648611400014]}

counter: 8
num skipped: 1
{'include': ['DBranch', 'java.lang.Boolean.valueOf(boolean)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(boolean)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Boolean.valueOf(boolean)', 'DStop', 'java.lang.Boolean.valueOf(boolean)', 'DStop', 'DStop')): [50, -1.1586237251758575]}

counter: 9
num skipped: 1
{'include': ['java.security.Permission.getName()', 'DBranch'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Permission.getName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False), ('java.security.Permission.getName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop', 'DStop')): [50, -6.387896052969154]}

counter: 10
num skipped: 1
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [3, -0.7258034572005272], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)')): [1, -6.8970775455236435], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)')): [1, -6.275527536869049], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)')): [5, -3.5361619107425213], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.valueOf(int)')): [3, -8.897570461034775], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.lang.String.valueOf(int)')): [5, -8.802489817142487], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.lang.String.valueOf(int)')): [2, -8.214890033006668], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.lang.String.valueOf(int)')): [5, -4.678646922111511], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [24, -3.9115193486213684], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [1, -1.3312153816223145]}

counter: 13
num skipped: 3
{'include': ['java.lang.Double.valueOf(java.lang.String)', 'java.text.NumberFormat.format(double)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.valueOf(java.lang.String)'), (False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.text.NumberFormat.format(double)')): [29, -6.464086286723614], (('DSubTree', 'java.lang.Double.valueOf(java.lang.String)', 'java.text.NumberFormat.format(double)'), (False, False, False), ('java.lang.Double.valueOf(java.lang.String)', 'java.text.NumberFormat.format(double)', 'DStop')): [21, -5.112878296524286]}

counter: 14
num skipped: 3
{'include': ['javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [6, -0.20744526153430343], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [17, -3.161789129022509], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [14, -0.8719699773937464], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String)'), (False, False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String)', 'DStop')): [13, -1.1311096311546862]}

counter: 15
num skipped: 3
{'include': ['javax.xml.parsers.DocumentBuilder.newDocument()', 'java.io.StringWriter.StringWriter()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilder.newDocument()'), (False, False), ('javax.xml.parsers.DocumentBuilder.newDocument()', 'java.io.StringWriter.StringWriter()')): [50, -4.116682350635529]}

counter: 16
num skipped: 3
{'include': ['java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [27, -4.773468155413866], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'java.lang.Long.toString(long)'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'java.lang.Long.toString(long)', 'DStop')): [1, -11.744446424767375], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Arrays.equals(byte[],byte[])')): [22, -4.227709695696831]}

counter: 17
num skipped: 3
{'include': ['java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Locale.getDefault()'), (False, False), ('java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)')): [35, -5.475013971328735], (('DSubTree', 'java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DStop')): [6, -5.288929522037506], (('DSubTree', 'java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop')): [8, -4.280010929331183], (('DSubTree', 'java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.Locale.getDefault()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)')): [1, -6.791340136900544]}

counter: 18
num skipped: 3
{'include': ['java.lang.Math.round(double)', 'java.lang.Math.min(double,double)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.round(double)', 'java.lang.Math.min(double,double)'), (False, False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'DStop')): [17, -2.2089324705302715], (('DSubTree', 'java.lang.Math.round(double)'), (False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)')): [15, -3.9279905724688433], (('DSubTree', 'java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.min(double,double)'), (False, False, False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.min(double,double)', 'DStop')): [2, -9.594019551994279], (('DSubTree', 'java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)'), (False, False, False, False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)', 'DStop')): [2, -2.474078945000656], (('DSubTree', 'java.lang.Math.round(double)', 'java.lang.Math.abs(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)'), (False, False, False, False, False, False), ('java.lang.Math.round(double)', 'java.lang.Math.abs(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.max(double,double)', 'java.lang.Math.min(double,double)', 'DStop')): [14, -6.918618893250823]}

counter: 20
num skipped: 4
{'include': ['DLoop', 'java.util.Iterator<>.hasNext()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<>.hasNext()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<>.hasNext()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop', 'DStop')): [50, -1.95101373270154]}

counter: 21
num skipped: 4
{'include': ['DBranch', 'java.lang.Number.intValue()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Number.intValue()', 'java.lang.Double.doubleValue()', 'java.lang.Number.intValue()', 'java.util.List.size()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Number.intValue()', 'java.lang.Double.doubleValue()', 'DStop', 'java.util.List.size()', 'DStop', 'DStop')): [50, -8.00186339020729]}

counter: 22
num skipped: 4
{'include': ['DBranch', 'java.sql.PreparedStatement.setString(int,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.beans.PropertyDescriptor.getReadMethod()', 'DStop', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DStop', 'DStop')): [9, -7.66720175743103], (('DSubTree', 'DBranch', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.beans.PropertyDescriptor.getReadMethod()', 'DStop', 'DStop', 'DStop')): [41, -5.4565342497080564]}

counter: 23
num skipped: 4
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [41, -1.1003770875395276], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [9, -0.14985730695480015]}

counter: 24
num skipped: 4
{'include': ['DBranch', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Throwable.getLocalizedMessage()', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.System.currentTimeMillis()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'java.lang.Throwable.getLocalizedMessage()', 'DStop', 'java.lang.System.currentTimeMillis()', 'DStop', 'DStop')): [50, -1.3843547627329826]}

counter: 25
num skipped: 4
{'include': ['java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readInt()'), (False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()')): [1, -0.24169287085533142], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [9, -0.8107786730397493], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'DStop')): [8, -9.242744124407182], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.util.Vector.Vector()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.util.Vector.Vector()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [1, -6.663107193278847], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.util.Vector.Vector()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.util.Vector.Vector()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'DStop')): [7, -6.104391795117408], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'DStop')): [4, -3.8943758364766836], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'DStop')): [1, -3.3037268295884132], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)', 'DStop')): [7, -4.265858017839491], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)')): [1, -3.436599053442478], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Integer.Integer(int)')): [6, -9.787930837832391], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Integer.Integer(int)')): [2, -12.157878330122912], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'java.lang.Boolean.valueOf(boolean)')): [3, -5.510362211614847]}

counter: 26
num skipped: 4
{'include': ['javax.swing.JCheckBox.JCheckBox()', 'java.lang.Boolean.parseBoolean(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JCheckBox.JCheckBox()'), (False, False), ('javax.swing.JCheckBox.JCheckBox()', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [32, -5.115578692406416], (('DSubTree', 'javax.swing.JCheckBox.JCheckBox()', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('javax.swing.JCheckBox.JCheckBox()', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop')): [18, -3.0135385505855083]}

counter: 27
num skipped: 4
{'include': ['DBranch', '$NOT$java.net.ServerSocket.isClosed()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.net.ServerSocket.isClosed()', 'java.net.ServerSocket.close()', '$NOT$java.net.ServerSocket.isClosed()', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.net.ServerSocket.isClosed()', 'java.net.ServerSocket.close()', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -22.397828044246126]}

counter: 28
num skipped: 4
{'include': ['java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.util.List<java.lang.Long>.size()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()'), (False, False), ('java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.util.List<java.lang.Long>.size()')): [32, -2.312115422639181], (('DSubTree', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.util.List<java.lang.Long>.size()', 'DStop')): [18, -0.2250501736998558]}

counter: 29
num skipped: 4
{'include': ['DExcept', 'javax.naming.Context.close()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.naming.Context.close()', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.naming.Context.close()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [20, -16.96226217644289], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'javax.naming.Context.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'javax.naming.Context.close()', 'DStop', 'DStop')): [26, -7.632722047887], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'javax.naming.Context.close()', 'DStop')): [4, -6.043981600465486]}

counter: 30
num skipped: 4
{'include': ['DBranch', 'java.net.URI.getPath()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.net.URI.getPath()', 'java.io.InputStream.close()', 'java.net.URI.getPath()', 'java.io.File.File(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.net.URI.getPath()', 'java.io.InputStream.close()', 'DStop', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -6.901513525284827]}

counter: 31
num skipped: 4
{'include': ['java.util.Random.nextInt()', 'java.lang.Integer.valueOf(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextInt()'), (False, False), ('java.util.Random.nextInt()', 'java.lang.Integer.valueOf(int)')): [32, -3.635716198012233], (('DSubTree', 'java.util.Random.nextInt()', 'java.lang.Integer.valueOf(int)'), (False, False, False), ('java.util.Random.nextInt()', 'java.lang.Integer.valueOf(int)', 'DStop')): [18, -0.9009596342220902]}

counter: 33
num skipped: 5
{'include': ['DExcept', 'java.util.Calendar.set(int,int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.Double.parseDouble(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'DStop')): [10, -9.328579992055893], (('DSubTree', 'DExcept', 'java.util.Calendar.set(int,int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop')): [2, -5.430097077041864], (('DSubTree', 'DExcept', 'java.util.Calendar.set(int,int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.String.valueOf(java.lang.Object)', 'DStop')): [38, -4.609146929316921]}

counter: 34
num skipped: 5
{'include': ['java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.DatagramSocket.isClosed()'), (False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()')): [49, -11.579354763031006], (('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'), (False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'DStop')): [1, -1.5134576163254678]}

counter: 36
num skipped: 6
{'include': ['java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getScaleX()'), (False, False), ('java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()')): [7, -6.306848883628845], (('DSubTree', 'java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()'), (False, False, False), ('java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()')): [43, -2.4601166241263854]}

counter: 37
num skipped: 6
{'include': ['DBranch', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop', 'DStop')): [14, -10.173171839182942], (('DSubTree', 'DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.ArrayList<java.lang.String>.get(int)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop', 'DStop', 'DStop')): [36, -2.929757822304964]}

counter: 38
num skipped: 6
{'include': ['java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [33, -0.7179627642035484], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, False, False), ('java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop')): [17, -1.08561534085311]}
