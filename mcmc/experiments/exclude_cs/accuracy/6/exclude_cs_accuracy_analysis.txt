data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getText()'), (False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [21, -0.5755449682474136], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [1, -5.7567397728562355], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [2, -2.7909014960750937], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [20, -0.9174320062156767], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [2, -3.4707190725021064], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [4, -2.1802400595042855]}

counter: 1
num skipped: 0
{'include': ['java.util.Date.getTime()', 'java.lang.Long.intValue()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.getTime()'), (False, False), ('java.util.Date.getTime()', 'java.lang.Long.intValue()')): [9, -3.5248172283172607], (('DSubTree', 'java.util.Date.getTime()', 'java.lang.Long.intValue()'), (False, False, False), ('java.util.Date.getTime()', 'java.lang.Long.intValue()', 'DStop')): [28, -2.8856004611589015], (('DSubTree', 'java.util.Date.getTime()', 'java.math.BigInteger.intValue()', 'java.lang.Long.intValue()'), (False, False, False, False), ('java.util.Date.getTime()', 'java.math.BigInteger.intValue()', 'java.lang.Long.intValue()', 'DStop')): [13, -4.509293918330513]}

counter: 2
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace()'), (False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)')): [3, -5.11851391941309], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'DStop')): [12, -11.813675494864583], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Number.intValue()', 'java.lang.Integer.valueOf(int)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Number.intValue()', 'java.lang.Integer.valueOf(int)', 'DStop')): [1, -13.170113435015082], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Long.Long(long)')): [1, -20.201378194615245], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.lang.Integer.valueOf(int)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.lang.Integer.valueOf(int)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'DStop')): [3, -13.86169983074069], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'DStop')): [1, -13.204517304897308], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'DStop')): [29, -8.615200817584991]}

counter: 3
num skipped: 0
{'include': ['java.awt.FontMetrics.getHeight()', 'DBranch'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'DStop', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [3, -17.75878832861781], (('DSubTree', 'java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False), ('java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'DStop', 'java.lang.String.charAt(int)', 'DStop')): [1, -10.661392565438291], (('DSubTree', 'java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False), ('java.awt.FontMetrics.getHeight()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [46, -5.211516710231081]}

counter: 4
num skipped: 0
{'include': ['javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.JFrame.JFrame()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.JFrame.JFrame()'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.JFrame.JFrame()', 'DStop')): [22, -3.2544610053300858], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.JFrame.JFrame()')): [28, -2.821347297169268]}

counter: 5
num skipped: 0
{'include': ['java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(double)'), (False, False), ('java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.substring(int,int)')): [2, -9.19691801071167], (('DSubTree', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.substring(int,int)'), (False, False, False), ('java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.substring(int,int)', 'DStop')): [22, -12.562557522207499], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.append(double)'), (False, False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.append(double)', 'DStop')): [26, -10.60967206954956]}

counter: 6
num skipped: 0
{'include': ['java.net.URL.openStream()', 'javax.imageio.ImageIO.read(java.io.InputStream)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.openStream()'), (False, False), ('java.net.URL.openStream()', 'javax.imageio.ImageIO.read(java.io.InputStream)')): [15, -2.5360594572266564], (('DSubTree', 'java.net.URL.openStream()', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False, False), ('java.net.URL.openStream()', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'DStop')): [35, -2.163373418035917]}

counter: 7
num skipped: 0
{'include': ['java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.NumberFormat.getInstance()'), (False, False), ('java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)')): [17, -3.501225990592502], (('DSubTree', 'java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'DStop')): [26, -0.6696670427918434], (('DSubTree', 'java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.text.NumberFormat.getInstance()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [7, -0.848030012100935]}

counter: 8
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.size()', 'DBranch'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.size()', 'DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'java.util.ArrayList<java.lang.String>.size()', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop', 'java.util.Random.nextInt(int)', 'DStop')): [14, -7.606362375430763], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()', 'DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.size()', 'DBranch'), (False, False, True, True, False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'java.util.Random.nextInt(int)', 'DStop')): [36, -6.341137861832976]}

counter: 9
num skipped: 0
{'include': ['DExcept', 'java.io.ObjectInputStream.readObject()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -13.153878211480333]}

counter: 10
num skipped: 0
{'include': ['java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False), ('java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])')): [29, -3.0473437570035458], (('DSubTree', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'), (False, False, False), ('java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'DStop')): [21, -3.4260638244159054]}

counter: 11
num skipped: 0
{'include': ['java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toLowerCase(java.util.Locale)'), (False, False), ('java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)')): [17, -7.004196345806122], (('DSubTree', 'java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)'), (False, False, False), ('java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)', 'java.lang.String.contains(java.lang.CharSequence)')): [7, -6.212797640415374], (('DSubTree', 'java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)', 'java.lang.String.contains(java.lang.CharSequence)'), (False, False, False, False), ('java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop')): [6, -4.3791160099208355], (('DSubTree', 'java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)'), (False, False, False), ('java.lang.String.toLowerCase(java.util.Locale)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop')): [20, -0.6919592518825084]}

counter: 12
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()')): [3, -2.4554149503819644], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [1, -6.285556793212891], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [43, -3.288170337677002], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'DStop')): [2, -2.6243081390857697], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [1, -4.623025983572006]}

counter: 14
num skipped: 1
{'include': ['java.awt.Component.getComponentOrientation()', 'java.awt.Component.getHeight()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getHeight()'), (False, False), ('java.awt.Component.getHeight()', 'java.awt.Component.getComponentOrientation()')): [10, -5.083146691322327], (('DSubTree', 'java.awt.Component.getHeight()', 'java.awt.Component.getComponentOrientation()'), (False, False, False), ('java.awt.Component.getHeight()', 'java.awt.Component.getComponentOrientation()', 'DStop')): [40, -1.5460495823062956]}

counter: 15
num skipped: 1
{'include': ['java.util.Observable.setChanged()', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Observable.setChanged()'), (False, False), ('java.util.Observable.setChanged()', 'java.util.Observable.notifyObservers(java.lang.Object)')): [36, -1.043569814413786], (('DSubTree', 'java.util.Observable.setChanged()', 'java.util.Observable.notifyObservers(java.lang.Object)'), (False, False, False), ('java.util.Observable.setChanged()', 'java.util.Observable.notifyObservers(java.lang.Object)', 'DStop')): [14, -0.3416199149796739]}

counter: 16
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder(int)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)'), (False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)')): [43, -7.865230858325958], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(int)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(int)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'DStop')): [7, -9.161029927432537]}

counter: 17
num skipped: 1
{'include': ['java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()')): [30, -3.914304843172431], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'), (False, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DStop')): [20, -5.287142851622775]}

counter: 18
num skipped: 1
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.newLine()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.newLine()')): [11, -5.3349669352173805], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()')): [8, -10.49225577712059], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()'), (False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()', 'DStop')): [19, -11.550348977558315], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()'), (False, False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()', 'DStop')): [4, -11.282379545271397], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()'), (False, False, False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()', 'DStop')): [3, -12.128037856891751], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()', 'java.io.BufferedWriter.close()', 'java.io.OutputStream.write(byte[])'), (False, False, False, False, False, False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.BufferedWriter.newLine()', 'java.io.BufferedWriter.close()', 'java.io.OutputStream.write(byte[])', 'DStop')): [5, -21.644358850084245]}

counter: 19
num skipped: 1
{'include': ['java.security.Security.getProvider(java.lang.String)', 'java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Security.getProvider(java.lang.String)'), (False, False), ('java.security.Security.getProvider(java.lang.String)', 'java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)')): [27, -2.3724830634891987], (('DSubTree', 'java.security.Security.getProvider(java.lang.String)', 'java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)'), (False, False, False), ('java.security.Security.getProvider(java.lang.String)', 'java.security.KeyStore.getInstance(java.lang.String,java.security.Provider)', 'DStop')): [23, -1.4053954183846145]}

counter: 20
num skipped: 1
{'include': ['java.awt.Color.getGreen()', 'java.awt.Color.getBlue()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.getGreen()'), (False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.getBlue()')): [3, -8.58342957496643], (('DSubTree', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()'), (False, False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'DStop')): [47, -4.581836195895448]}

counter: 21
num skipped: 1
{'include': ['javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getText()'), (False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [7, -1.3209614604711533], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [5, -0.5290015396894887], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.parseInt(java.lang.String)', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [38, -0.7571284156292677]}

counter: 22
num skipped: 1
{'include': ['java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DStop', 'java.lang.Class<Tau_T>.getSimpleName()', 'DStop', 'DStop')): [1, -14.193238735198975], (('DSubTree', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DStop', 'DStop')): [3, -11.74741891771555], (('DSubTree', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'DBranch', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.String.valueOf(long)', 'DStop')): [46, -15.253688231809065]}

counter: 23
num skipped: 1
{'include': ['DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.renameTo(java.io.File)', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.getParentFile()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.renameTo(java.io.File)', 'DStop', 'java.io.File.getParentFile()', 'DStop', 'DStop')): [50, -7.173335552215576]}

counter: 24
num skipped: 1
{'include': ['javax.swing.JComponent.getWidth()', 'java.awt.Dimension.Dimension(int,int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()'), (False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)')): [26, -4.7661062479019165], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [17, -1.2613340062089264], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(double)'), (False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(double)', 'DStop')): [3, -7.615733610931784], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.abs(double)', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(double)'), (False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'java.lang.Math.abs(double)', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(double)', 'DStop')): [3, -11.104022704064846], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.abs(double)', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(int)'), (False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'java.lang.Math.abs(double)', 'javax.swing.JComponent.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.abs(int)', 'DStop')): [1, -16.729488387703896]}

counter: 25
num skipped: 1
{'include': ['DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop', 'DStop')): [10, -2.676822216832079], (('DSubTree', 'DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.io.FileOutputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.io.FileOutputStream.close()', 'DStop', 'DStop')): [40, -6.076235115574491]}

counter: 26
num skipped: 1
{'include': ['java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Matcher.find()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(java.lang.Object)'), (False, False), ('java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Matcher.find()')): [46, -0.7077369466423988], (('DSubTree', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False, False), ('java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.find()')): [2, -4.595922602340579], (('DSubTree', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.find()', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.lang.String.valueOf(java.lang.Object)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.find()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.regex.Matcher.find()')): [2, -7.150032713077962]}

counter: 27
num skipped: 1
{'include': ['DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop', 'DStop')): [5, -8.2240571975708], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DLoop', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, True, True, False, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [27, -12.213471939787269], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, True, True, False, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop')): [18, -11.269229984551203]}

counter: 28
num skipped: 1
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'), (False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()')): [7, -0.2483816845342517], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()'), (False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()', 'DStop')): [16, -1.02768936753273], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()', 'java.lang.String.length()'), (False, False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()', 'java.lang.String.length()', 'DStop')): [14, -4.248575819656253], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()', 'java.lang.String.isEmpty()'), (False, False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.trim()', 'java.lang.String.isEmpty()', 'DStop')): [13, -4.96291184797883]}

counter: 30
num skipped: 2
{'include': ['java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.charset.Charset.forName(java.lang.String)'), (False, False), ('java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)')): [9, -8.146650994895026], (('DSubTree', 'java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)'), (False, False, False), ('java.nio.charset.Charset.forName(java.lang.String)', 'java.nio.charset.Charset.decode(java.nio.ByteBuffer)', 'DStop')): [41, -4.83024942129623]}

counter: 31
num skipped: 2
{'include': ['DBranch', '$NOT$java.util.Set<java.lang.String>.isEmpty()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', '$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'DStop', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'DStop', 'DStop')): [50, -14.849884304501757]}

counter: 32
num skipped: 2
{'include': ['DBranch', 'java.lang.StringBuffer.length()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StringBuffer.length()', 'java.lang.String.length()', 'java.lang.StringBuffer.length()', 'java.lang.String.length()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StringBuffer.length()', 'java.lang.String.length()', 'DStop', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -2.3063081987202168]}

counter: 33
num skipped: 2
{'include': ['DBranch', 'java.lang.Class.isPrimitive()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Class.isPrimitive()', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.lang.Class.isPrimitive()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Class.isPrimitive()', 'java.lang.Appendable.append(java.lang.CharSequence)', 'DStop', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop', 'DStop')): [50, -0.0395681974478066]}

counter: 34
num skipped: 2
{'include': ['javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False), ('javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)')): [26, -1.968531560152769], (('DSubTree', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)'), (False, False, False), ('javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'DStop')): [20, -1.4680685424536932], (('DSubTree', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)')): [3, -5.9724505979102105], (('DSubTree', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)'), (False, False, False, False), ('javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'DStop')): [1, -3.0123489410616457]}

counter: 35
num skipped: 2
{'include': ['java.util.List<java.lang.String>.isEmpty()', 'java.util.Arrays.copyOfRange(T[],int,int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.isEmpty()'), (False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.Arrays.copyOfRange(T[],int,int)')): [1, -6.51784872560529], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.Arrays.copyOfRange(T[],int,int)', 'DStop')): [3, -0.09189257281832397], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'DStop')): [1, -11.639951988276152], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)')): [3, -10.63819651515223], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'), (False, False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)')): [1, -12.725046589039266], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.Arrays.copyOfRange(T[],int,int)')): [7, -12.80066717416048], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.Arrays.copyOfRange(T[],int,int)')): [1, -7.0310151390731335], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [1, -8.845174074172974], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Arrays.copyOfRange(T[],int,int)')): [16, -7.016516827046871], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Arrays.copyOfRange(T[],int,int)'), (False, False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'DStop')): [16, -6.496641502715647]}

counter: 36
num skipped: 2
{'include': ['java.lang.String.indexOf(java.lang.String)', 'java.util.List.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(java.lang.String)'), (False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.util.List.add(java.lang.Object)')): [28, -5.047033395967446], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.util.List.add(java.lang.Object)')): [6, -2.5405527263646945], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.util.List.add(java.lang.Object)'), (False, False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.util.List.add(java.lang.Object)', 'java.lang.String.length()')): [2, -5.476764575811103], (('DSubTree', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.util.List.add(java.lang.Object)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.util.List.add(java.lang.Object)', 'java.lang.String.length()', 'java.lang.String.substring(int)')): [14, -6.727785359486006]}

counter: 37
num skipped: 2
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Class.forName(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Class.forName(java.lang.String)')): [35, -5.335512280464172], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Class.forName(java.lang.String)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Class.forName(java.lang.String)', 'DStop')): [15, -1.5750702739460394]}

counter: 38
num skipped: 2
{'include': ['java.io.RandomAccessFile.close()', 'java.io.File.length()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.close()'), (False, False), ('java.io.RandomAccessFile.close()', 'java.io.File.length()')): [2, -5.528287500143051], (('DSubTree', 'java.io.RandomAccessFile.close()', 'java.io.File.length()', 'java.io.InputStream.close()'), (False, False, False, False), ('java.io.RandomAccessFile.close()', 'java.io.File.length()', 'java.io.InputStream.close()', 'DStop')): [39, -14.787105273077032], (('DSubTree', 'java.io.RandomAccessFile.close()', 'java.io.File.File(java.lang.String)', 'java.io.File.length()', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.io.RandomAccessFile.close()', 'java.io.File.File(java.lang.String)', 'java.io.File.length()', 'java.io.InputStream.close()', 'DStop')): [2, -9.231411608867347], (('DSubTree', 'java.io.RandomAccessFile.close()', 'java.io.InputStream.close()', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.length()', 'java.io.InputStream.close()'), (False, False, False, False, False, False, False), ('java.io.RandomAccessFile.close()', 'java.io.InputStream.close()', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.io.File.length()', 'java.io.InputStream.close()', 'DStop')): [7, -13.026670571416616]}

counter: 39
num skipped: 2
{'include': ['java.lang.String.startsWith(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.startsWith(java.lang.String)'), (False, False), ('java.lang.String.startsWith(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)')): [47, -1.5621293187141418], (('DSubTree', 'java.lang.String.startsWith(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)'), (False, False, False), ('java.lang.String.startsWith(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)', 'DStop')): [3, -1.6918618083000183]}

counter: 40
num skipped: 2
{'include': ['java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.net.URI.create(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.net.URI.create(java.lang.String)'), (False, False, False), ('java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.net.URI.create(java.lang.String)', 'DStop')): [11, -2.3289593416047865], (('DSubTree', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False), ('java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.net.URI.create(java.lang.String)')): [33, -1.1637230962514877], (('DSubTree', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False), ('java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.String.equals(java.lang.Object)', 'java.net.URI.create(java.lang.String)')): [6, -4.8426930122077465]}

counter: 41
num skipped: 2
{'include': ['java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.Writer.write(java.lang.String)'), (False, False), ('java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])')): [27, -3.203494668006897], (('DSubTree', 'java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])', 'DStop')): [9, -1.7312202109023929], (('DSubTree', 'java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.close()')): [9, -0.9863468110561371], (('DSubTree', 'java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])'), (False, False, False), ('java.io.Writer.write(java.lang.String)', 'java.io.Writer.write(char[])', 'java.io.Writer.write(java.lang.String)')): [2, -0.656534768640995], (('DSubTree', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()'), (False, False, False), ('java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()', 'java.io.Writer.write(char[])')): [3, -3.8685864955186844]}

counter: 42
num skipped: 2
{'include': ['DExcept', 'java.lang.Boolean.booleanValue()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.booleanValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.booleanValue()', 'DStop', 'DStop')): [23, -1.5301876803860068], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.lang.Boolean.booleanValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.lang.Boolean.booleanValue()', 'DStop', 'DStop')): [27, -1.9050512952076133]}

counter: 43
num skipped: 2
{'include': ['javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)'), (False, False), ('javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)')): [9, -10.983434200286865], (('DSubTree', 'javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()'), (False, False, False), ('javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)')): [2, -5.037443330511451], (('DSubTree', 'javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)'), (False, False, False, False), ('javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)')): [25, -8.250364502338925], (('DSubTree', 'javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)'), (False, False, False, False, False), ('javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'java.lang.String.length()', 'javax.xml.stream.XMLStreamWriter.writeNamespace(java.lang.String,java.lang.String)', 'javax.xml.stream.XMLStreamWriter.setPrefix(java.lang.String,java.lang.String)')): [14, -1.2423103712499142]}

counter: 44
num skipped: 2
{'include': ['java.io.FilterInputStream.read(byte[])', 'java.io.BufferedOutputStream.write(byte[],int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FilterInputStream.read(byte[])'), (False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.BufferedOutputStream.write(byte[],int,int)')): [33, -1.0769575834274292], (('DSubTree', 'java.io.FilterInputStream.read(byte[])', 'java.io.BufferedOutputStream.write(byte[],int,int)'), (False, False, False), ('java.io.FilterInputStream.read(byte[])', 'java.io.BufferedOutputStream.write(byte[],int,int)', 'DStop')): [17, -0.2562914118145727]}

counter: 45
num skipped: 2
{'include': ['DBranch', 'javax.swing.UIManager.getDefaults()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.UIManager.getDefaults()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'javax.swing.UIManager.getDefaults()', 'java.util.Collections.emptyList()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.UIManager.getDefaults()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'DStop', 'java.util.Collections.emptyList()', 'DStop', 'DStop')): [50, -14.997584502329119]}

counter: 46
num skipped: 2
{'include': ['java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False), ('java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)')): [5, -5.444940268993378], (('DSubTree', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Thread.start()'), (False, False, False), ('java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Thread.start()', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)')): [9, -7.948458674363792], (('DSubTree', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Arrays.asList(T[])'), (False, False, False), ('java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Arrays.asList(T[])', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)')): [17, -13.658217271789908], (('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.util.Arrays.asList(T[])'), (False, False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.util.Arrays.asList(T[])', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)')): [3, -10.780310034751892], (('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)'), (False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)')): [4, -0.29814152093604207], (('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DStop')): [12, -0.6193446860415861]}

counter: 47
num skipped: 2
{'include': ['javax.management.ObjectName.ObjectName(java.lang.String)', 'java.util.Set<javax.management.ObjectName>.size()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)'), (False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'java.util.Set<javax.management.ObjectName>.size()')): [16, -5.783999370411038], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'java.util.Set<javax.management.ObjectName>.size()'), (False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'java.util.Set<javax.management.ObjectName>.size()', 'DStop')): [34, -4.627030832110904]}

counter: 49
num skipped: 3
{'include': ['java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.getInt()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position(int)'), (False, False), ('java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.getInt()')): [28, -2.445748385041952], (('DSubTree', 'java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.getInt()'), (False, False, False), ('java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.getInt()', 'DStop')): [22, -1.5884227179922163]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5060000000000001, 'relevant_additions': 0.4983333333333335, 'meets_constraints': 0.9400000000000005, 'in_set': 0.04, 'test_set_relevant_additions': 0.4562222222222223}
