data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['DLoop', 'java.util.List<>.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.List<>.get(int)', 'java.lang.Integer.intValue()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.List<>.get(int)', 'java.lang.Integer.intValue()', 'DStop', 'DStop')): [27, -6.105869192875616], (('DSubTree', 'DLoop', 'java.util.List<>.get(int)', 'java.util.List.remove(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.List<>.get(int)', 'java.util.List.remove(java.lang.Object)', 'DStop', 'DStop')): [11, -9.475627430860186], (('DSubTree', 'DLoop', 'java.util.List<>.get(int)', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.List<>.get(int)', 'java.util.List.remove(java.lang.Object)', 'DStop')): [12, -9.156771630048752]}

counter: 1
num skipped: 0
{'include': ['java.util.Date.setTime(long)', 'java.net.URL.toString()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.net.URL.toString()')): [16, -6.60591459274292], (('DSubTree', 'java.util.Date.setTime(long)', 'java.net.URL.toString()'), (False, False, False), ('java.util.Date.setTime(long)', 'java.net.URL.toString()', 'DStop')): [34, -10.525989763322286]}

counter: 2
num skipped: 0
{'include': ['DBranch', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop', 'DStop')): [50, -8.414909195154905]}

counter: 3
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'DBranch'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'DBranch', 'java.util.Iterator.hasNext()', 'java.io.InputStream.close()', 'java.util.Iterator.hasNext()', 'java.util.Iterator.hasNext()', 'DBranch'), (False, False, True, True, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'DBranch', 'java.util.Iterator.hasNext()', 'java.io.InputStream.close()', 'DStop', 'java.util.Iterator.hasNext()', 'DStop', 'DStop')): [44, -8.063857555389404], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'DBranch', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.getMessage()', 'DBranch'), (False, False, True, True, True, False, False), ('javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean)', 'DBranch', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop', 'DStop')): [6, -5.452660918206675]}

counter: 4
num skipped: 0
{'include': ['java.io.StringWriter.toString()', 'java.lang.Thread.yield()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.toString()', 'java.lang.Thread.yield()'), (False, False, False), ('java.io.StringWriter.toString()', 'java.lang.Thread.yield()', 'DStop')): [47, -7.160983443260193], (('DSubTree', 'java.io.StringWriter.toString()'), (False, False), ('java.io.StringWriter.toString()', 'java.lang.Thread.yield()')): [3, -5.094462037086487]}

counter: 5
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'), (False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(int)')): [15, -0.6447536945343018], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(int)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(int)', 'DStop')): [6, -1.6885177220683545], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(int)')): [10, -5.172642733901739], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.Math.min(int,int)', 'java.lang.StringBuffer.append(int)')): [19, -5.20828440785408]}

counter: 6
num skipped: 0
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.CharSequence.charAt(int)', 'DStop', 'DStop')): [50, -2.267745152115822]}

counter: 7
num skipped: 0
{'include': ['java.io.File.toPath()', 'java.lang.String.String(byte[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.toPath()'), (False, False), ('java.io.File.toPath()', 'java.lang.String.String(byte[])')): [4, -0.5695532001554966], (('DSubTree', 'java.io.File.toPath()', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.File.toPath()', 'java.lang.String.String(byte[])', 'DStop')): [23, -1.6316555188968778], (('DSubTree', 'java.io.File.toPath()', 'java.lang.String.String(byte[])'), (False, False, False), ('java.io.File.toPath()', 'java.lang.String.String(byte[])', 'java.io.File.getName()')): [7, -8.4395246070344], (('DSubTree', 'java.io.File.toPath()', 'java.lang.String.String(byte[])', 'java.io.File.getName()'), (False, False, False, False), ('java.io.File.toPath()', 'java.lang.String.String(byte[])', 'java.io.File.getName()', 'java.lang.String.substring(int)')): [3, -5.938840064685792], (('DSubTree', 'java.io.File.toPath()', 'java.lang.String.String(byte[])', 'java.io.File.getName()'), (False, False, False, False), ('java.io.File.toPath()', 'java.lang.String.String(byte[])', 'java.io.File.getName()', 'DStop')): [13, -3.0411923229694366]}

counter: 8
num skipped: 0
{'include': ['DExcept', 'java.lang.Throwable.getMessage()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [5, -0.020212456089211628], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [45, -0.7263501519337296]}

counter: 9
num skipped: 0
{'include': ['java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False), ('java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)')): [14, -2.6041959524154663], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'DStop')): [36, -2.6064253571094014]}

counter: 10
num skipped: 0
{'include': ['java.net.Socket.getInputStream()', 'java.util.logging.Logger.getLogger(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.Socket.getInputStream()', 'java.util.logging.Logger.getLogger(java.lang.String)'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.util.logging.Logger.getLogger(java.lang.String)', 'DStop')): [25, -6.013429184444249], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.util.logging.Logger.getLogger(java.lang.String)'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.util.logging.Logger.getLogger(java.lang.String)', 'java.lang.System.currentTimeMillis()')): [2, -8.974443912506104], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.lang.System.currentTimeMillis()', 'java.util.logging.Logger.getLogger(java.lang.String)')): [23, -8.157253958284855]}

counter: 11
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [39, -1.3149235389428213], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()')): [11, -0.30276302981656045]}

counter: 12
num skipped: 0
{'include': ['java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getAbsolutePath()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getAbsolutePath()')): [24, -0.47412586212158203], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getAbsolutePath()'), (False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getAbsolutePath()', 'DStop')): [26, -0.13860328448936343]}

counter: 13
num skipped: 0
{'include': ['DBranch', '$NOT$java.lang.Character.isDigit(char)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.lang.Character.isDigit(char)', 'java.lang.String.length()', '$NOT$java.lang.Character.isDigit(char)', 'java.lang.String.substring(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.Character.isDigit(char)', 'java.lang.String.length()', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [50, -4.5566812752422265]}

counter: 15
num skipped: 1
{'include': ['DLoop', 'java.lang.Thread.isAlive()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Thread.isAlive()', 'java.lang.Thread.interrupt()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Thread.isAlive()', 'java.lang.Thread.interrupt()', 'DStop', 'DStop')): [50, -0.2894585020840168]}

counter: 16
num skipped: 1
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [26, -2.1922177374362946], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [24, -1.4895411608740687]}

counter: 17
num skipped: 1
{'include': ['java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)'), (False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])')): [34, -4.15178382396698], (('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])'), (False, False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])', 'DStop')): [16, -3.1050879359229384]}

counter: 18
num skipped: 1
{'include': ['java.util.Collection.iterator()', 'DBranch'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collection.iterator()', 'DBranch', 'java.util.Iterator.hasNext()', 'java.util.Collection.add(java.lang.Object)', 'java.util.Iterator.hasNext()', 'java.util.List.size()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.Collection.iterator()', 'DBranch', 'java.util.Iterator.hasNext()', 'java.util.Collection.add(java.lang.Object)', 'DStop', 'java.util.List.size()', 'DStop', 'DStop')): [50, -9.32564592640847]}

counter: 19
num skipped: 1
{'include': ['DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [50, -2.9453277325665113]}

counter: 20
num skipped: 1
{'include': ['java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [5, -2.209376186132431], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()')): [42, -1.5103206196799874], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.getTimeInMillis()')): [2, -7.631859730929136], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.getTimeInMillis()'), (False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [1, -3.9253918690956198]}

counter: 21
num skipped: 1
{'include': ['java.io.File.mkdir()', 'java.io.File.listFiles()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.listFiles()')): [4, -0.39339485159143806], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.listFiles()'), (False, False, False), ('java.io.File.mkdir()', 'java.io.File.listFiles()', 'DStop')): [46, -1.2686512097716331]}

counter: 22
num skipped: 1
{'include': ['java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Double.valueOf(double)'), (False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()')): [1, -1.775038242340088], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()'), (False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()', 'DStop')): [8, -1.4120721227372997], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()'), (False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()', 'java.lang.Double.valueOf(double)')): [31, -1.2287245765328407], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()', 'java.lang.Double.valueOf(double)'), (False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.Double.intValue()', 'java.lang.Double.valueOf(double)', 'DStop')): [10, -1.9320261236280203]}

counter: 23
num skipped: 1
{'include': ['java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.executeUpdate()'), (False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()')): [20, -1.7535038888454437], (('DSubTree', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'), (False, False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()', 'DStop')): [30, -2.4666039347646915]}

counter: 25
num skipped: 2
{'include': ['DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.get(int)', 'DStop', 'java.util.List<java.lang.String>.get(int)', 'DStop', 'DStop')): [50, -0.08418150222860277]}

counter: 27
num skipped: 3
{'include': ['java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.initSign(java.security.PrivateKey)'), (False, False), ('java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])')): [14, -0.5496927555650473], (('DSubTree', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])'), (False, False, False), ('java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.sign()')): [24, -1.6832559318863787], (('DSubTree', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.sign()'), (False, False, False, False), ('java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.sign()', 'DStop')): [12, -0.3268079601893987]}

counter: 28
num skipped: 3
{'include': ['DExcept', 'java.util.regex.Matcher.matches()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop')): [50, -6.525788134098548]}

counter: 30
num skipped: 4
{'include': ['DExcept', 'javax.naming.Context.close()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.naming.Context.close()', 'java.lang.String.valueOf(int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.naming.Context.close()', 'java.lang.String.valueOf(int)', 'DStop', 'DStop')): [50, -8.898776057932992]}

counter: 31
num skipped: 4
{'include': ['java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.start()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)'), (False, False), ('java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.start()')): [50, -3.9534240062348545]}

counter: 32
num skipped: 4
{'include': ['java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readInt()'), (False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()')): [5, -0.628261910751462], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'DStop')): [13, -1.5002480577677488], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()')): [1, -1.2595498566515744], (('DSubTree', 'java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()'), (False, False, False, False), ('java.io.DataInput.readInt()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()', 'DStop')): [31, -0.7668370958417654]}

counter: 33
num skipped: 4
{'include': ['DExcept', 'java.util.ArrayList.get(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.ArrayList.get(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ArrayList.get(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -12.596442177891731]}

counter: 34
num skipped: 4
{'include': ['DBranch', 'java.lang.Boolean.valueOf(boolean)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Throwable.getMessage()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Throwable.getMessage()', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -6.146260112524033]}

counter: 35
num skipped: 4
{'include': ['java.lang.String.lastIndexOf(java.lang.String)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.lastIndexOf(java.lang.String)'), (False, False), ('java.lang.String.lastIndexOf(java.lang.String)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [1, -7.737726211547852], (('DSubTree', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()'), (False, False, False), ('java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [4, -9.274595230817795], (('DSubTree', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False, False), ('java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [45, -2.8971816461416893]}

counter: 36
num skipped: 4
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JButton.JButton(javax.swing.Action)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JButton.JButton(javax.swing.Action)')): [6, -0.7743149371817708], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JButton.JButton(javax.swing.Action)', 'java.awt.Container.add(java.awt.Component)'), (False, False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JButton.JButton(javax.swing.Action)', 'java.awt.Container.add(java.awt.Component)', 'DStop')): [26, -2.593739117961377], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JButton.JButton(javax.swing.Action)', 'java.awt.Container.add(java.awt.Component)'), (False, False, False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JButton.JButton(javax.swing.Action)', 'java.awt.Container.add(java.awt.Component)', 'DStop')): [9, -3.5732873687520623], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JButton.JButton(javax.swing.Action)'), (False, False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JButton.JButton(javax.swing.Action)', 'java.awt.Container.add(java.awt.Component)')): [8, -1.2929779305122793], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JButton.JButton(javax.swing.Action)')): [1, -0.4321086124982685]}

counter: 37
num skipped: 4
{'include': ['java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)')): [20, -2.8055031299591064], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'), (False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)', 'DStop')): [30, -1.859656013478343]}

counter: 38
num skipped: 4
{'include': ['DBranch', 'java.util.ArrayList<java.lang.String>.size()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.lang.String.length()', 'java.util.ArrayList<java.lang.String>.size()', 'java.lang.String.charAt(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.ArrayList<java.lang.String>.size()', 'java.lang.String.length()', 'DStop', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [50, -7.141891300678253]}

counter: 40
num skipped: 5
{'include': ['DExcept', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.FileOutputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.FileOutputStream.close()', 'DStop', 'DStop')): [50, -4.7972875237464905]}

counter: 42
num skipped: 6
{'include': ['java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)')): [26, -0.9118700176477432], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)')): [14, -2.3606291878968477], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'DStop')): [8, -1.9231768297031522], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'DStop')): [2, -1.4158772379159927]}

counter: 43
num skipped: 6
{'include': ['java.util.Date.Date()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date()'), (False, False), ('java.util.Date.Date()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [14, -6.308041730255354], (('DSubTree', 'java.util.Date.Date()', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date()', 'java.text.DateFormat.format(java.util.Date)', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [3, -7.3268754202872515], (('DSubTree', 'java.util.Date.Date()', 'java.util.Date.toString()'), (False, False, False), ('java.util.Date.Date()', 'java.util.Date.toString()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [17, -6.793851311493199], (('DSubTree', 'java.util.Date.Date()', 'java.util.Date.toString()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False, False), ('java.util.Date.Date()', 'java.util.Date.toString()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [13, -7.609679981673253], (('DSubTree', 'java.util.Date.Date()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.Date.Date()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [3, -7.0844938745722175]}

counter: 44
num skipped: 6
{'include': ['java.awt.Color.getGreen()', 'java.awt.Color.getBlue()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.getGreen()', 'java.awt.Color.getBlue()'), (False, False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.getBlue()', 'DStop')): [14, -6.081509929150343], (('DSubTree', 'java.awt.Color.getGreen()'), (False, False), ('java.awt.Color.getGreen()', 'java.awt.Color.getBlue()')): [36, -1.7361479699611664]}

counter: 45
num skipped: 6
{'include': ['DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.lang.Class<>.getCanonicalName()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.lang.Class<>.getCanonicalName()', 'DStop', 'DStop')): [50, -7.215343076735735]}

counter: 46
num skipped: 6
{'include': ['DExcept', 'java.util.Calendar.set(int,int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop', 'DStop')): [40, -2.9677203446626663], (('DSubTree', 'DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.String.substring(int,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.set(int,int)', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [10, -4.529330807738006]}

counter: 47
num skipped: 6
{'include': ['DLoop', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -11.171200435608625]}

counter: 49
num skipped: 7
{'include': ['DBranch', 'java.lang.Double.compare(double,double)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Double.compare(double,double)', 'java.util.Random.nextInt()', 'java.lang.Double.compare(double,double)', 'java.lang.Math.abs(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Double.compare(double,double)', 'java.util.Random.nextInt()', 'DStop', 'java.lang.Math.abs(int)', 'DStop', 'DStop')): [50, -2.202159514883533]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5333333333333335, 'relevant_additions': 0.5300000000000001, 'meets_constraints': 0.8600000000000004, 'in_set': 0.02, 'test_set_relevant_additions': 0.5200000000000001}
