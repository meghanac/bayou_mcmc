data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: accuracy
num test programs: 35


counter: 0
num skipped: 0
{'include': ['DBranch', '$NOT$java.io.File.isDirectory()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'DStop', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop', 'DStop')): [3, -12.800225148443133], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'DStop', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop')): [20, -15.282329176552594], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'DStop', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop')): [8, -8.448412428144366], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop', 'DStop')): [1, -7.69487456124989], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop', 'DStop')): [3, -6.903018543616781], (('DSubTree', 'DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'java.io.File.listFiles()', 'DStop')): [15, -4.858616700104903]}

counter: 1
num skipped: 0
{'include': ['DBranch', 'java.lang.String.intern()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.String.intern()', 'java.lang.String.intern()', 'java.lang.String.intern()', 'java.lang.String.trim()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.String.intern()', 'java.lang.String.intern()', 'DStop', 'java.lang.String.trim()', 'DStop', 'DStop')): [50, -2.3598008155822754]}

counter: 4
num skipped: 2
{'include': ['DBranch', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)', 'java.lang.Throwable.printStackTrace()', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)', 'java.util.Collections.unmodifiableMap(java.util.Map)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'java.util.Collections.unmodifiableMap(java.util.Map)', 'DStop', 'DStop')): [50, -7.264308171346784]}

counter: 5
num skipped: 2
{'include': ['DBranch', 'java.util.List<java.lang.Object>.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'DStop', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'DStop', 'DStop')): [50, -9.823250651359558]}

counter: 7
num skipped: 3
{'include': ['DExcept', 'java.io.ObjectInputStream.readObject()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ObjectInputStream.readObject()', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [50, -9.32485762052238]}

counter: 8
num skipped: 3
{'include': ['DBranch', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)', 'java.math.BigInteger.intValue()', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.math.BigDecimal.BigDecimal(java.math.BigInteger)', 'java.math.BigInteger.intValue()', 'DStop', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'DStop', 'DStop')): [50, -1.6141836047172546]}

counter: 9
num skipped: 3
{'include': ['java.lang.Thread.setName(java.lang.String)', 'java.lang.Runnable.run()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Runnable.run()'), (False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Runnable.run()', 'DStop')): [50, -0.07459210441447794]}

counter: 10
num skipped: 3
{'include': ['java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.getGraphics()'), (False, False), ('java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)')): [18, -4.173442780971527], (('DSubTree', 'java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)'), (False, False, False), ('java.awt.image.BufferedImage.getGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)', 'DStop')): [32, -3.5772871281951666]}

counter: 11
num skipped: 3
{'include': ['DLoop', 'java.lang.Thread.isAlive()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Thread.isAlive()', 'java.lang.Thread.currentThread()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Thread.isAlive()', 'java.lang.Thread.currentThread()', 'DStop', 'DStop')): [50, -9.512516021728516]}

counter: 12
num skipped: 3
{'include': ['java.io.File.getPath()', 'java.io.File.renameTo(java.io.File)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getPath()'), (False, False), ('java.io.File.getPath()', 'java.io.File.renameTo(java.io.File)')): [31, -2.35328209400177], (('DSubTree', 'java.io.File.getPath()', 'java.io.File.renameTo(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', '$NOT$java.io.File.exists()', 'java.io.File.createNewFile()', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.io.File.getPath()', 'java.io.File.renameTo(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', 'DStop', 'java.io.File.createNewFile()', 'DStop', 'DStop')): [19, -9.532667631523509]}

counter: 13
num skipped: 3
{'include': ['java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.group(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.toString()'), (False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.group(int)')): [1, -10.413943007588387], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.group(int)'), (False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.group(int)', 'DStop')): [17, -9.769175514113158], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)'), (False, False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop')): [3, -6.592433360870928], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()'), (False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)')): [1, -2.969853863120079], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)'), (False, False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()')): [5, -4.068768296390772], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()'), (False, False, False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'DStop')): [7, -3.8883614614605904], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()'), (False, False, False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.start()')): [7, -6.494338005781174], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)'), (False, False, False, False), ('java.lang.StringBuffer.toString()', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.start()')): [9, -8.638919711112976]}

counter: 14
num skipped: 3
{'include': ['java.util.List<java.lang.String>.get(int)', 'java.util.Map.put(java.lang.Object,java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.get(int)'), (False, False), ('java.util.List<java.lang.String>.get(int)', 'java.util.Map.put(java.lang.Object,java.lang.Object)')): [21, -1.7597560950671323], (('DSubTree', 'java.util.List<java.lang.String>.get(int)', 'java.util.Map.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.String>.get(int)', 'java.util.Map.put(java.lang.Object,java.lang.Object)', 'DStop')): [29, -2.7689520525746047]}

counter: 15
num skipped: 3
{'include': ['java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Object>.get(int)'), (False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [20, -4.981819272041321], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [1, -0.46602384746074677], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [17, -2.951433125504991], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.Arrays.asList(T[])')): [7, -1.5900885565206409], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()')): [5, -2.435529425740242]}

counter: 16
num skipped: 3
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.File.toURI()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.File.toURI()')): [7, -7.2682404816150665], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()')): [9, -2.4260314106941223], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'DStop')): [7, -3.2697122716344893], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.io.File.listFiles()'), (False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.io.File.listFiles()', 'DStop')): [7, -11.031865691766143], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()'), (False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', '$NOT$java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DStop')): [5, -9.611364332027733], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.io.File.File(java.lang.String)', 'DStop')): [12, -7.202554772142321], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()'), (False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.io.File.toURI()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'DStop')): [3, -6.552790150046349]}

counter: 17
num skipped: 3
{'include': ['java.lang.Exception.Exception()', 'java.lang.Throwable.getStackTrace()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Exception.Exception()', 'java.lang.Throwable.getStackTrace()'), (False, False, False), ('java.lang.Exception.Exception()', 'java.lang.Throwable.getStackTrace()', 'DStop')): [50, -1.5459147106739692]}

counter: 18
num skipped: 3
{'include': ['java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [15, -2.258325858216267], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, False, False), ('java.io.DataInputStream.readInt()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop')): [35, -1.3171037118299864]}

counter: 19
num skipped: 3
{'include': ['java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.bind(java.net.SocketAddress)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)'), (False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.ServerSocket.bind(java.net.SocketAddress)')): [5, -8.696189761161804], (('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)')): [4, -4.144602119922638], (('DSubTree', 'java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)'), (False, False, False, False), ('java.net.ServerSocket.setReuseAddress(boolean)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.net.ServerSocket.bind(java.net.SocketAddress)', 'DStop')): [41, -2.72224455565447]}

counter: 20
num skipped: 3
{'include': ['DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -14.701918409740756]}

counter: 21
num skipped: 3
{'include': ['java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateY()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()')): [26, -41.666632652282715], (('DSubTree', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()', 'DStop')): [24, -20.211909060832113]}

counter: 22
num skipped: 3
{'include': ['java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.getTransform()'), (False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)')): [18, -1.0216938257217407], (('DSubTree', 'java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'), (False, False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)')): [31, -0.6817630268633366], (('DSubTree', 'java.awt.Graphics2D.getTransform()', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'), (False, False, False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)')): [1, -1.7876958621200174]}

counter: 24
num skipped: 4
{'include': ['java.lang.Math.round(double)', 'java.lang.Math.min(double,double)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.round(double)'), (False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)')): [32, -0.6644703825004399], (('DSubTree', 'java.lang.Math.round(double)', 'java.lang.Math.min(double,double)'), (False, False, False), ('java.lang.Math.round(double)', 'java.lang.Math.min(double,double)', 'DStop')): [18, -1.07125723361969]}

counter: 25
num skipped: 4
{'include': ['DExcept', 'java.lang.Throwable.getMessage()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [42, -0.6376858451694716], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Class.forName(java.lang.String)', 'DStop')): [8, -0.17402998730540276]}

counter: 26
num skipped: 4
{'include': ['DExcept', 'java.lang.Throwable.getMessage()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -0.061506447149440646]}

counter: 27
num skipped: 4
{'include': ['DBranch', 'java.lang.Class<>.newInstance()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Class<>.newInstance()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<>.newInstance()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Class<>.newInstance()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop', 'DStop')): [50, -10.412084638606757]}

counter: 28
num skipped: 4
{'include': ['$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.regex.Matcher.find(int)'), (False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()')): [13, -13.550555408000946], (('DSubTree', '$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()'), (False, False, False), ('$NOT$java.util.regex.Matcher.find(int)', 'java.util.regex.Matcher.end()', 'java.util.regex.Matcher.end()')): [37, -8.774595022201538]}

counter: 29
num skipped: 4
{'include': ['DExcept', 'java.lang.String.compareToIgnoreCase(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -9.27025578985922]}

counter: 30
num skipped: 4
{'include': ['DLoop', 'java.util.Iterator<byte[]>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DStop', 'DStop')): [41, -7.560569584369659], (('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DLoop', 'DBranch', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.lang.Throwable.getMessage()', 'java.lang.System.getProperty(java.lang.String)', 'DBranch'), (False, True, True, False, False, True, True, True, True, False, False, False), ('DLoop', 'java.util.Iterator<byte[]>.hasNext()', 'java.util.Iterator<byte[]>.next()', 'DStop', 'DBranch', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop', 'DStop')): [9, -25.493616964505236]}

counter: 31
num skipped: 4
{'include': ['java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])'), (False, False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.verify(byte[])', 'DStop')): [36, -4.848480880228635], (('DSubTree', 'java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])'), (False, False, False, False), ('java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])', 'DStop')): [14, -7.649385809897467]}

counter: 32
num skipped: 4
{'include': ['DBranch', 'java.util.TimeZone.getTimeZone(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [50, -8.641149426344782]}

counter: 33
num skipped: 4
{'include': ['DLoop', 'java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])', 'java.util.Collections.emptyList()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])', 'java.util.Collections.emptyList()', 'DStop', 'DStop')): [50, -8.013704538345337]}

counter: 34
num skipped: 4
{'include': ['DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.lang.String.valueOf(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'DStop', 'java.lang.String.valueOf(java.lang.Object)', 'DStop', 'DStop')): [8, -4.187910357490182], (('DSubTree', 'DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'DStop', 'DStop', 'DStop')): [19, -2.4329654865141492], (('DSubTree', 'DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'DBranch'), (False, True, True, False, False), ('DBranch', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'java.util.logging.Logger.isLoggable(java.util.logging.Level)', 'DStop', 'DStop')): [23, -1.6134304196457379]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5923809523809525, 'relevant_additions': 0.5947619047619048, 'meets_constraints': 0.8857142857142859, 'in_set': 0.05714285714285714, 'test_set_relevant_additions': 0.5947619047619048}
