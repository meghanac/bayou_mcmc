data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 61


counter: 0
num skipped: 0
{'include': ['java.lang.System.getProperty(java.lang.String)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [47, -12.13950022868812], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DStop')): [3, -13.164144240319729]}

counter: 2
num skipped: 1
{'include': ['java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DStop')): [13, -6.061856627464294], (('DSubTree', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])'), (False, False), ('java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)')): [7, -6.416794776916504], (('DSubTree', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)')): [18, -3.5804036259651184], (('DSubTree', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False, False), ('java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)')): [5, -9.462701439857483], (('DSubTree', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False), ('java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [7, -8.14416054263711]}

counter: 3
num skipped: 1
{'include': ['$NOT$java.lang.String.equals(java.lang.Object)', '$NOT$javax.xml.namespace.QName.equals(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.equals(java.lang.Object)'), (False, False), ('$NOT$java.lang.String.equals(java.lang.Object)', '$NOT$javax.xml.namespace.QName.equals(java.lang.Object)')): [7, -18.837979331612587], (('DSubTree', '$NOT$java.lang.String.equals(java.lang.Object)', '$NOT$javax.xml.namespace.QName.equals(java.lang.Object)'), (False, False, False), ('$NOT$java.lang.String.equals(java.lang.Object)', '$NOT$javax.xml.namespace.QName.equals(java.lang.Object)', 'DStop')): [37, -20.234989279597357], (('DSubTree', '$NOT$javax.xml.namespace.QName.equals(java.lang.Object)', '$NOT$java.lang.String.equals(java.lang.Object)'), (False, False, False), ('$NOT$javax.xml.namespace.QName.equals(java.lang.Object)', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop')): [6, -19.171233765780926]}

counter: 4
num skipped: 1
{'include': ['java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.putDouble(double)'), (False, False), ('java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()')): [36, -11.236698150634766], (('DSubTree', 'java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()', 'DStop')): [12, -12.463786736130714], (('DSubTree', 'java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.nio.ByteBuffer.putDouble(double)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.limit()')): [2, -12.755121767520905]}

counter: 5
num skipped: 1
{'include': ['java.util.StringTokenizer.nextToken()', 'java.io.File.exists()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.StringTokenizer.nextToken()'), (False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.exists()')): [2, -17.111772060394287], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.exists()')): [1, -11.967870742082596], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.exists()')): [1, -11.912654280662537], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.File(java.lang.String)'), (False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()')): [16, -8.465234011411667], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()')): [29, -7.544739603996277], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()'), (False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'DStop')): [1, -7.807274773716927]}

counter: 6
num skipped: 1
{'include': ['javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)', 'java.awt.Component.repaint()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)'), (False, False), ('javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)', 'java.awt.Component.repaint()')): [10, -20.7425674200058], (('DSubTree', 'java.awt.Component.repaint()'), (False, False), ('java.awt.Component.repaint()', 'javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)')): [15, -13.593576818704605], (('DSubTree', 'java.awt.Component.repaint()', 'javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.awt.Component.repaint()', 'javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)', 'DStop')): [25, -10.047727731755003]}

counter: 7
num skipped: 1
{'include': ['java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.executeUpdate()'), (False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()')): [1, -16.85179615020752], (('DSubTree', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()'), (False, False, False), ('java.sql.PreparedStatement.executeUpdate()', 'java.sql.Connection.close()', 'DStop')): [19, -18.041451811790466], (('DSubTree', 'java.sql.Connection.close()', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False), ('java.sql.Connection.close()', 'java.sql.PreparedStatement.executeUpdate()', 'DStop')): [12, -10.01514433324337], (('DSubTree', 'java.sql.Connection.close()', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()'), (False, False, False, False), ('java.sql.Connection.close()', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()', 'DStop')): [8, -11.168837875127792], (('DSubTree', 'java.sql.Connection.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()'), (False, False, False, False, False), ('java.sql.Connection.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()', 'DStop')): [4, -10.662242790684104], (('DSubTree', 'java.sql.Connection.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False, False), ('java.sql.Connection.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()')): [6, -10.166175872087479]}

counter: 8
num skipped: 1
{'include': ['java.util.regex.Matcher.group(int)', 'java.lang.String.equalsIgnoreCase(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [1, -16.204864740371704], (('DSubTree', 'java.util.regex.Matcher.group(int)'), (False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [7, -13.924513816833496], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()'), (False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [2, -21.72413921356201], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [4, -16.94975256919861], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()'), (False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [2, -19.289917826652527], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [6, -22.371981419622898], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [3, -23.99675679206848], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [1, -24.037704966962337], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [8, -24.754209145903587], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.toArray(T[])', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False, False, False, False, False, False), ('java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.toArray(T[])', 'java.io.BufferedReader.readLine()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [16, -26.6674413587898]}

counter: 9
num skipped: 1
{'include': ['java.util.Calendar.setTime(java.util.Date)', 'java.util.Date.setTime(long)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTime(java.util.Date)'), (False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.util.Date.setTime(long)')): [8, -16.51213550567627], (('DSubTree', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.util.Date.setTime(long)')): [31, -15.51372504234314], (('DSubTree', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.util.Date.setTime(long)')): [11, -20.930957794189453]}

counter: 10
num skipped: 1
{'include': ['java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)')): [16, -6.844250824302435], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DBranch', 'java.lang.StringBuffer.length()', 'java.lang.StringBuffer.length()', 'java.lang.StringBuffer.toString()', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DBranch', 'java.lang.StringBuffer.length()', 'DStop', 'java.lang.StringBuffer.toString()', 'DStop', 'DStop')): [2, -11.924510913901031], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DBranch', 'java.lang.StringBuffer.length()', 'java.lang.StringBuffer.length()', 'java.lang.Exception.Exception(java.lang.String)', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DBranch', 'java.lang.StringBuffer.length()', 'DStop', 'java.lang.Exception.Exception(java.lang.String)', 'DStop', 'DStop')): [18, -25.602663449011743], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DBranch', 'java.lang.StringBuffer.length()', 'java.lang.StringBuffer.length()', 'java.lang.Exception.Exception(java.lang.String)', 'DBranch'), (False, False, False, False, True, True, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DBranch', 'java.lang.StringBuffer.length()', 'DStop', 'java.lang.Exception.Exception(java.lang.String)', 'DStop', 'DStop')): [14, -25.305540236178786]}

counter: 11
num skipped: 1
{'include': ['java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.isAlive()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.setName(java.lang.String)'), (False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.isAlive()')): [21, -11.977349996566772], (('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.currentThread()'), (False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.currentThread()', 'java.lang.Thread.isAlive()')): [2, -17.333714723587036], (('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.isAlive()', 'java.lang.Thread.sleep(long)'), (False, False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.isAlive()', 'java.lang.Thread.sleep(long)', 'DStop')): [14, -10.961919587105513], (('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.yield()', 'java.lang.Thread.isAlive()', 'java.lang.Thread.sleep(long)'), (False, False, False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.yield()', 'java.lang.Thread.isAlive()', 'java.lang.Thread.sleep(long)', 'DStop')): [8, -12.873630985617638], (('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.lang.Thread.isAlive()'), (False, False, False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.yield()', 'java.lang.Thread.sleep(long)', 'java.lang.Thread.isAlive()', 'DStop')): [5, -9.5269361063838]}

counter: 12
num skipped: 1
{'include': ['java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)'), (False, False), ('java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [2, -9.986484289169312], (('DSubTree', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)'), (False, False, False, False), ('java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)', 'DStop')): [48, -14.891851022839546]}

counter: 13
num skipped: 1
{'include': ['java.lang.Thread.start()', 'java.lang.Runnable.run()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.start()', 'java.lang.Throwable.toString()'), (False, False, False), ('java.lang.Thread.start()', 'java.lang.Throwable.toString()', 'java.lang.Runnable.run()')): [11, -9.009133994579315], (('DSubTree', 'java.lang.Thread.start()'), (False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()')): [6, -4.478250652551651], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Runnable.run()'), (False, False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()', 'DStop')): [24, -3.3321069478988647], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.sleep(long)'), (False, False, False, False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.sleep(long)', 'DStop')): [3, -10.065020337700844], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.sleep(long)'), (False, False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.sleep(long)', 'DStop')): [6, -8.401435166597366]}

counter: 14
num skipped: 1
{'include': ['javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [11, -14.22799801826477], (('DSubTree', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False), ('javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'javax.swing.JComponent.setOpaque(boolean)')): [9, -14.045894622802734], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [5, -9.229600103572011], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setFont(java.awt.Font)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setFont(java.awt.Font)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [25, -16.254227032419294]}

counter: 15
num skipped: 1
{'include': ['java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.intValue()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.compareTo(java.math.BigInteger)'), (False, False), ('java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.intValue()')): [2, -13.817798256874084], (('DSubTree', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.intValue()'), (False, False, False), ('java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.intValue()', 'DStop')): [48, -14.076720085780835]}

counter: 16
num skipped: 1
{'include': ['java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)'), (False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()')): [3, -5.951082944869995], (('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()'), (False, False, False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()', 'DStop')): [1, -11.532927140593529], (('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()'), (False, False, False, False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()', 'DStop')): [5, -12.376864731311798], (('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()'), (False, False, False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()')): [14, -10.970152288675308], (('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Date.Date()'), (False, False, False, False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()')): [19, -13.402274549007416], (('DSubTree', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()'), (False, False, False, False, False, False), ('java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.util.Date.Date()', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Date.Date()', 'java.lang.Throwable.toString()', 'DStop')): [8, -13.99143072962761]}

counter: 17
num skipped: 1
{'include': ['java.lang.String.substring(int)', 'java.lang.String.valueOf(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.substring(int)'), (False, False), ('java.lang.String.substring(int)', 'java.lang.String.valueOf(int)')): [1, -12.938406467437744], (('DSubTree', 'java.lang.String.substring(int)', 'java.lang.String.valueOf(int)'), (False, False, False), ('java.lang.String.substring(int)', 'java.lang.String.valueOf(int)', 'DStop')): [14, -10.344028450548649], (('DSubTree', 'java.lang.String.substring(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.toUpperCase()'), (False, False, False, False), ('java.lang.String.substring(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.toUpperCase()', 'DStop')): [28, -8.698083698749542], (('DSubTree', 'java.lang.String.substring(int)', 'java.lang.String.valueOf(int)'), (False, False, False), ('java.lang.String.substring(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.toUpperCase()')): [7, -6.1848955154418945]}

counter: 18
num skipped: 1
{'include': ['java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'), (False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()')): [6, -18.456294536590576], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'), (False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'DStop')): [44, -15.034073989838362]}

counter: 19
num skipped: 1
{'include': ['java.lang.String.String(char[])', 'java.lang.String.intern()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(char[])'), (False, False), ('java.lang.String.String(char[])', 'java.lang.String.intern()')): [3, -7.60597950220108], (('DSubTree', 'java.lang.String.intern()'), (False, False), ('java.lang.String.intern()', 'java.lang.String.String(char[])')): [12, -7.565459728240967], (('DSubTree', 'java.lang.String.intern()', 'java.lang.String.String(char[])'), (False, False, False), ('java.lang.String.intern()', 'java.lang.String.String(char[])', 'DStop')): [10, -9.782672464847565], (('DSubTree', 'java.lang.String.intern()', 'java.lang.String.String(char[])', 'java.lang.String.replace(char,char)'), (False, False, False, False), ('java.lang.String.intern()', 'java.lang.String.String(char[])', 'java.lang.String.replace(char,char)', 'DStop')): [1, -12.06889295578003], (('DSubTree', 'java.lang.String.intern()', 'java.lang.String.replace(char,char)', 'java.lang.String.String(char[])'), (False, False, False, False), ('java.lang.String.intern()', 'java.lang.String.replace(char,char)', 'java.lang.String.String(char[])', 'DStop')): [24, -9.504181012511253]}

counter: 22
num skipped: 3
{'include': ['java.lang.InstantiationException.InstantiationException(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.InstantiationException.InstantiationException(java.lang.String)'), (False, False), ('java.lang.InstantiationException.InstantiationException(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)')): [22, -19.18500518798828], (('DSubTree', 'java.lang.InstantiationException.InstantiationException(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)'), (False, False, False), ('java.lang.InstantiationException.InstantiationException(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'DStop')): [28, -21.435571550391614]}

counter: 23
num skipped: 3
{'include': ['java.lang.Thread.start()', 'java.lang.Runnable.run()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.start()'), (False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()')): [2, -4.745837613940239], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Throwable.printStackTrace()'), (False, False, False), ('java.lang.Thread.start()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Runnable.run()')): [24, -5.887054920196533], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Runnable.run()'), (False, False, False, False), ('java.lang.Thread.start()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Runnable.run()', 'DStop')): [10, -6.547014817595482], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Runnable.run()'), (False, False, False, False, False), ('java.lang.Thread.start()', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Runnable.run()', 'DStop')): [14, -6.674842223525047]}

counter: 24
num skipped: 3
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)')): [8, -10.290127515792847], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DStop')): [33, -7.194270104169846], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.File.File(java.lang.String)')): [4, -6.139182269573212], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)')): [5, -5.168951630592346]}

counter: 25
num skipped: 3
{'include': ['DExcept', 'java.util.TreeSet<Tau_E>.TreeSet()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Date.Date()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Date.Date()', 'DStop', 'DStop')): [50, -18.77122601494193]}

counter: 26
num skipped: 3
{'include': ['java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])'), (False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)')): [18, -5.167975187301636], (('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'), (False, False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'DStop')): [32, -6.155185824260116]}

counter: 27
num skipped: 3
{'include': ['java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()')): [46, -16.259151458740234], (('DSubTree', 'java.awt.FontMetrics.getHeight()'), (False, False), ('java.awt.FontMetrics.getHeight()', 'java.awt.FontMetrics.stringWidth(java.lang.String)')): [4, -9.398833274841309]}

counter: 28
num skipped: 3
{'include': ['java.util.Arrays.asList(java.lang.Object[])', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])'), (False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.List<java.lang.String>.addAll(java.util.Collection)')): [5, -8.51419472694397], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'), (False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'DStop')): [13, -4.159852709621191], (('DSubTree', 'java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'), (False, False, False, False), ('java.util.Arrays.asList(java.lang.Object[])', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'DStop')): [32, -4.856264062225819]}

counter: 29
num skipped: 3
{'include': ['DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DLoop'), (False, True, True, False, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop', 'DStop')): [50, -12.136763572692871]}

counter: 31
num skipped: 4
{'include': ['javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getText()'), (False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)')): [13, -2.2223958764225245], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)'), (False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop')): [2, -4.494630832225084], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'DStop')): [1, -11.400103562511504], (('DSubTree', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False, False, False, False), ('javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'DStop')): [8, -11.759138226509094], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'DStop')): [2, -16.320903941988945], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'DStop')): [17, -17.951303273439407], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.util.Arrays.sort(T[],java.util.Comparator)')): [7, -15.01201856136322]}

counter: 32
num skipped: 4
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop')): [20, -7.891616066917777], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [5, -6.737973481416702], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [5, -8.383497476577759], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)')): [10, -12.346582867205143], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)')): [3, -9.260549157857895], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop')): [3, -13.398134529590607], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'DStop')): [4, -13.056136131286621]}

counter: 33
num skipped: 4
{'include': ['java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)'), (False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)')): [2, -8.474270105361938], (('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)')): [25, -6.620524138212204], (('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)'), (False, False, False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)', 'DStop')): [23, -5.935108512639999]}

counter: 34
num skipped: 4
{'include': ['java.lang.Throwable.getLocalizedMessage()', 'java.lang.System.nanoTime()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.getLocalizedMessage()'), (False, False), ('java.lang.Throwable.getLocalizedMessage()', 'java.lang.System.nanoTime()')): [40, -10.444151878356934], (('DSubTree', 'java.lang.Throwable.getLocalizedMessage()', 'java.lang.System.nanoTime()'), (False, False, False), ('java.lang.Throwable.getLocalizedMessage()', 'java.lang.System.nanoTime()', 'DStop')): [10, -8.27080699801445]}

counter: 35
num skipped: 4
{'include': ['java.util.Vector.addElement(java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Vector.addElement(java.lang.Object)'), (False, False), ('java.util.Vector.addElement(java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)')): [14, -6.48293924331665], (('DSubTree', 'java.util.Vector.addElement(java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)', 'java.lang.StringBuffer.append(char)'), (False, False, False, False), ('java.util.Vector.addElement(java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)', 'java.lang.StringBuffer.append(char)', 'DStop')): [36, -8.810114294290543]}

counter: 36
num skipped: 4
{'include': ['java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'), (False, False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'DStop')): [5, -13.377148314379156], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()')): [45, -7.005219459533691]}

counter: 37
num skipped: 4
{'include': ['java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.getWidth()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.getWidth()'), (False, False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.getWidth()', 'DStop')): [38, -7.543469640426338], (('DSubTree', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.getWidth()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Component.getWidth()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [12, -7.49408420920372]}

counter: 39
num skipped: 5
{'include': ['java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)')): [6, -4.805062532424927], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)'), (False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'DStop')): [15, -3.1475646626204252], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'DStop')): [2, -7.181726932525635], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [7, -3.9206264317035675], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'DStop')): [3, -5.854317367076874], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)'), (False, False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)', 'DStop')): [8, -8.08876246213913], (('DSubTree', 'java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)'), (False, False, False, False), ('java.net.URI.URI(java.lang.String)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.net.URI.create(java.lang.String)', 'DStop')): [9, -10.28583836555481]}

counter: 40
num skipped: 5
{'include': ['java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'), (False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()')): [5, -16.81645953655243], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'), (False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'DStop')): [45, -15.2259740550071]}

counter: 41
num skipped: 5
{'include': ['java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.read(byte[],int,int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.read(byte[],int,int)')): [1, -23.019219398498535], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)'), (False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [2, -16.07321262359619], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DStop')): [4, -15.656681418418884], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [8, -10.527541786432266], (('DSubTree', 'java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False, False), ('java.io.DataInputStream.read(byte[],int,int)', 'java.io.FilterInputStream.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [35, -10.366261392831802]}

counter: 42
num skipped: 5
{'include': ['java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)')): [24, -8.115238845348358], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DStop')): [2, -8.205875612795353], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.File.File(java.io.File,java.lang.String)')): [24, -5.932537391781807]}

counter: 43
num skipped: 5
{'include': ['java.util.StringTokenizer.nextToken()', 'java.io.File.exists()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.StringTokenizer.nextToken()'), (False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.exists()')): [7, -16.19511365890503], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.exists()'), (False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.exists()', 'java.util.Vector.size()')): [5, -19.80276495218277], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.exists()'), (False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.exists()', 'DStop')): [8, -15.775923877954483], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()'), (False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'DStop')): [9, -5.257966488599777], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()'), (False, False, False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'DStop')): [12, -7.426188983023167], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'java.io.File.File(java.lang.String)', 'DStop')): [2, -7.241640746593475], (('DSubTree', 'java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'DBranch', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.getAbsolutePath()', 'DBranch'), (False, False, False, False, True, True, True, True, False, False, False, False, False, False), ('java.util.StringTokenizer.nextToken()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'DBranch', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DStop', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.getAbsolutePath()', 'DStop', 'DStop')): [7, -23.40585021674633]}

counter: 44
num skipped: 5
{'include': ['java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.URL(java.lang.String)'), (False, False), ('java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()')): [13, -7.549043774604797], (('DSubTree', 'java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()'), (False, False, False), ('java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()', 'DStop')): [11, -3.408678863197565], (('DSubTree', 'java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()', 'java.io.File.getParentFile()', 'java.io.File.toPath()'), (False, False, False, False, False), ('java.net.URL.URL(java.lang.String)', 'java.io.File.toPath()', 'java.io.File.getParentFile()', 'java.io.File.toPath()', 'DStop')): [4, -8.172180142253637], (('DSubTree', 'java.net.URL.URL(java.lang.String)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.toPath()', 'java.io.File.getParentFile()', 'java.io.File.toPath()'), (False, False, False, False, False, False), ('java.net.URL.URL(java.lang.String)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.toPath()', 'java.io.File.getParentFile()', 'java.io.File.toPath()', 'DStop')): [22, -15.064201831817627]}

counter: 45
num skipped: 5
{'include': ['java.util.ArrayList.iterator()', 'java.util.List.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.iterator()'), (False, False), ('java.util.ArrayList.iterator()', 'java.util.List.add(java.lang.Object)')): [46, -8.278104305267334], (('DSubTree', 'java.util.ArrayList.iterator()', 'java.util.List.add(java.lang.Object)'), (False, False, False), ('java.util.ArrayList.iterator()', 'java.util.List.add(java.lang.Object)', 'DStop')): [4, -7.702740915119648]}

counter: 46
num skipped: 5
{'include': ['java.lang.Runnable.run()', 'java.lang.Thread.start()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Runnable.run()'), (False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()')): [20, -2.3894375562667847], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.yield()'), (False, False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.yield()', 'DStop')): [2, -4.528047868981957], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.join()'), (False, False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.join()', 'DStop')): [22, -1.8474805317819118], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.start()'), (False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()', 'java.lang.Thread.join()')): [6, -2.1912326216697693]}

counter: 47
num skipped: 5
{'include': ['java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'), (False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()')): [33, -18.462262630462646], (('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()'), (False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.awt.GraphicsEnvironment.getScreenDevices()', 'DStop')): [17, -15.251426517497748]}

counter: 48
num skipped: 5
{'include': ['javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTextField.JTextField()'), (False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()')): [28, -9.876992225646973], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()', 'java.lang.Integer.intValue()'), (False, False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()', 'java.lang.Integer.intValue()', 'DStop')): [17, -14.902615861967206], (('DSubTree', 'javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()'), (False, False, False), ('javax.swing.JTextField.JTextField()', 'javax.swing.JCheckBox.JCheckBox()', 'DStop')): [5, -8.455292962491512]}

counter: 49
num skipped: 5
{'include': ['java.util.List.size()', 'java.util.List.set(int,java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.size()'), (False, False), ('java.util.List.size()', 'java.util.List.set(int,java.lang.Object)')): [3, -14.698745727539062], (('DSubTree', 'java.util.List.size()', 'java.lang.StringBuilder.StringBuilder(int)'), (False, False, False), ('java.util.List.size()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.util.List.set(int,java.lang.Object)')): [39, -15.170252084732056], (('DSubTree', 'java.util.List.size()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.util.List.set(int,java.lang.Object)'), (False, False, False, False), ('java.util.List.size()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.util.List.set(int,java.lang.Object)', 'DStop')): [8, -15.735447648912668]}

counter: 50
num skipped: 5
{'include': ['java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.contains(java.lang.Object)'), (False, False), ('java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.remove(java.lang.Object)')): [14, -5.97317910194397], (('DSubTree', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.remove(java.lang.Object)')): [2, -5.425690650939941], (('DSubTree', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.remove(java.lang.Object)'), (False, False, False, False), ('java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'DStop')): [34, -5.810956660658121]}

counter: 51
num skipped: 5
{'include': ['java.util.TimeZone.getTimeZone(java.lang.String)', '$NOT$java.lang.String.isEmpty()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', '$NOT$java.lang.String.isEmpty()')): [4, -3.597951829433441], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.Thread.sleep(long)'), (False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()')): [4, -13.966464877128601], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.lang.Thread.sleep(long)'), (False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()')): [2, -14.697700262069702], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Math.min(int,int)', 'java.lang.Thread.sleep(long)'), (False, False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Math.min(int,int)', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()')): [4, -28.139110386371613], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Math.min(int,int)', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Math.min(int,int)', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()', 'java.lang.String.getBytes()')): [9, -34.66212850809097], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.lang.Thread.sleep(long)', '$NOT$java.lang.String.isEmpty()', 'java.lang.String.getBytes()')): [1, -30.024093627929688], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getCanonicalPath()', '$NOT$java.lang.String.isEmpty()', 'java.lang.String.getBytes()')): [1, -26.941637933254242], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.lang.String.isEmpty()', 'java.lang.String.getBytes()')): [1, -21.047366350889206], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.String.getBytes()', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.lang.String.getBytes()', '$NOT$java.lang.String.isEmpty()', 'java.io.File.File(java.lang.String,java.lang.String)')): [4, -18.22549095749855], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.getBytes()', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.getBytes()', '$NOT$java.lang.String.isEmpty()', 'java.io.File.File(java.lang.String,java.lang.String)')): [6, -19.428633004426956], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', '$NOT$java.lang.String.isEmpty()', 'java.io.File.File(java.lang.String,java.lang.String)')): [3, -13.472755558788776], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.lang.String.isEmpty()')): [1, -13.395448386669159], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.lang.String.isEmpty()'), (False, False, False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.io.File.File(java.lang.String,java.lang.String)', '$NOT$java.lang.String.isEmpty()', 'DStop')): [10, -13.891865328885615]}

counter: 52
num skipped: 5
{'include': ['java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.toString()'), (False, False), ('java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()')): [4, -9.668753147125244], (('DSubTree', 'javax.naming.InitialContext.InitialContext()'), (False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()')): [3, -4.777225732803345], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'DStop')): [1, -4.75563982129097], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)', 'DStop')): [2, -6.69983125012368], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.printStackTrace()', 'DStop')): [9, -4.3897195011377335], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.toString()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.toString()', 'DStop')): [3, -7.040077954530716], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.toString()', 'java.lang.Thread.currentThread()'), (False, False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.toString()', 'java.lang.Thread.currentThread()', 'DStop')): [2, -9.67371529340744], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Thread.currentThread()'), (False, False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Thread.currentThread()', 'DStop')): [7, -6.349606283009052], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Thread.currentThread()')): [19, -4.562736928462982]}

counter: 53
num skipped: 5
{'include': ['DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop', 'DStop')): [2, -24.704293251037598], (('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop')): [24, -23.98246785439551], (('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.io.InputStream.close()')): [6, -27.16079270839691], (('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'DLoop', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.io.InputStream.close()')): [8, -29.42229861440137], (('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'DLoop', 'java.util.ArrayList<Tau_E>.ArrayList(int)'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.io.InputStream.close()')): [10, -34.605497911572456]}

counter: 54
num skipped: 5
{'include': ['DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)', 'DStop', 'DStop')): [50, -10.165298208594322]}

counter: 55
num skipped: 5
{'include': ['DBranch', 'java.io.PrintWriter.println(char[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'DStop')): [50, -1.9710341095924377]}

counter: 56
num skipped: 5
{'include': ['DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.abs(double)', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.System.currentTimeMillis()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.abs(double)', 'DStop', 'java.lang.System.currentTimeMillis()', 'DStop', 'DStop')): [50, -18.026899687945843]}

counter: 57
num skipped: 5
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()')): [4, -8.398946285247803], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()')): [36, -11.931153453886509], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DStop')): [10, -8.228623732924461]}

counter: 58
num skipped: 5
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])')): [6, -4.305508613586426], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)')): [4, -4.617455542087555], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [40, -3.6146475300192833]}

counter: 59
num skipped: 5
{'include': ['DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.getBytes()', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.getBytes()', 'DStop', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop', 'DStop')): [50, -16.533416032791138]}

counter: 60
num skipped: 5
{'include': ['java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)')): [5, -7.660280704498291], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DStop')): [2, -5.603190571069717], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()', 'DStop')): [2, -9.505968630313873], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()', 'java.text.DateFormat.parse(java.lang.String)')): [2, -10.036394357681274], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.toString()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)')): [2, -8.63821442425251], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.toString()'), (False, False, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.toString()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)')): [9, -9.819324120879173], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.toString()'), (False, False, False, False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.toString()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)')): [28, -10.332438111305237]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6431693989071041, 'relevant_additions': 0.6076502732240441, 'meets_constraints': 0.9180327868852466, 'in_set': 0.0819672131147541, 'test_set_relevant_additions': 0.5761839708561023}
