data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 200


counter: 0
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()'), (False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)')): [31, -21.180964469909668], (('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'DStop')): [19, -17.284963368612807]}

counter: 1
num skipped: 0
{'include': ['java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.currentTimeMillis()'), (False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)')): [45, -9.540415406227112], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.Throwable.printStackTrace()')): [1, -7.144983500242233], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.lang.System.currentTimeMillis()')): [4, -5.764809668064117]}

counter: 2
num skipped: 0
{'include': ['java.lang.reflect.Method.getParameterTypes()', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getParameterTypes()'), (False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)')): [4, -5.951849460601807], (('DSubTree', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Method.getParameterTypes()', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'DStop')): [46, -7.375197194516659]}

counter: 3
num skipped: 0
{'include': ['java.lang.StringBuffer.length()', 'java.lang.StringBuffer.substring(int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.length()'), (False, False), ('java.lang.StringBuffer.length()', 'java.lang.StringBuffer.substring(int,int)')): [25, -25.050915718078613], (('DSubTree', 'java.lang.StringBuffer.length()', 'java.lang.StringBuffer.substring(int,int)'), (False, False, False), ('java.lang.StringBuffer.length()', 'java.lang.StringBuffer.substring(int,int)', 'java.lang.String.length()')): [25, -22.4667838960886]}

counter: 4
num skipped: 0
{'include': ['java.awt.image.BufferedImage.getGraphics()', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.getGraphics()'), (False, False), ('java.awt.image.BufferedImage.getGraphics()', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)')): [19, -11.077884435653687], (('DSubTree', 'java.awt.image.BufferedImage.getGraphics()', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'), (False, False, False), ('java.awt.image.BufferedImage.getGraphics()', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop')): [31, -9.88980923499912]}

counter: 5
num skipped: 0
{'include': ['DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.max(double,double)', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.max(double,double)', 'DStop', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop', 'DStop')): [50, -22.7802655659616]}

counter: 6
num skipped: 0
{'include': ['java.io.File.delete()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.delete()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False), ('java.io.File.delete()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)')): [22, -8.870724558830261], (('DSubTree', 'java.io.File.delete()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False, False), ('java.io.File.delete()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [19, -4.100295400246978], (('DSubTree', 'java.io.File.delete()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False, False, False), ('java.io.File.delete()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)')): [9, -6.212293239077553]}

counter: 7
num skipped: 0
{'include': ['java.util.Random.nextInt(int)', 'java.util.Calendar.add(int,int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Random.nextInt(int)')): [5, -13.38269853591919], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Random.nextInt(int)'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Random.nextInt(int)', 'java.util.Calendar.getTime()')): [1, -14.34076976776123], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'java.util.Random.nextInt(int)'), (False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'java.util.Random.nextInt(int)', 'java.util.Calendar.getTime()')): [15, -15.514920711517334], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'java.util.Random.nextInt(int)')): [6, -14.66671895980835], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.lang.System.currentTimeMillis()', 'java.util.Random.nextInt(int)')): [1, -10.997887015342712], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.lang.System.currentTimeMillis()', 'java.util.Random.nextInt(int)'), (False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.lang.System.currentTimeMillis()', 'java.util.Random.nextInt(int)', 'java.lang.System.currentTimeMillis()')): [22, -11.85995078086853]}

counter: 8
num skipped: 0
{'include': ['java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])'), (False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)')): [19, -3.5634028017520905], (('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.sort(T[],java.util.Comparator)'), (False, False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)')): [31, -3.8787327585741878]}

counter: 9
num skipped: 0
{'include': ['DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.util.Arrays.asList(T[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.util.Arrays.asList(T[])', 'DStop', 'DStop')): [50, -16.27879955782555]}

counter: 10
num skipped: 0
{'include': ['java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [40, -11.81242586672306], (('DSubTree', 'java.awt.Graphics2D.setPaint(java.awt.Paint)'), (False, False), ('java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [10, -8.44377338886261]}

counter: 11
num skipped: 0
{'include': ['javax.swing.text.JTextComponent.getSelectionEnd()', 'javax.swing.text.JTextComponent.getSelectionStart()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getSelectionEnd()'), (False, False), ('javax.swing.text.JTextComponent.getSelectionEnd()', 'javax.swing.text.JTextComponent.getSelectionStart()')): [43, -31.44842529296875], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()'), (False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()')): [7, -30.518735885620117]}

counter: 12
num skipped: 0
{'include': ['java.util.Random.Random(long)', 'java.util.Arrays.equals(byte[],byte[])'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.Random(long)'), (False, False), ('java.util.Random.Random(long)', 'java.util.Arrays.equals(byte[],byte[])')): [15, -3.923516869544983], (('DSubTree', 'java.util.Random.Random(long)', 'java.util.Random.nextInt()'), (False, False, False), ('java.util.Random.Random(long)', 'java.util.Random.nextInt()', 'java.util.Arrays.equals(byte[],byte[])')): [10, -4.5320440120995045], (('DSubTree', 'java.util.Random.Random(long)', 'java.util.Random.nextInt()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False), ('java.util.Random.Random(long)', 'java.util.Random.nextInt()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [17, -5.939796362072229], (('DSubTree', 'java.util.Random.Random(long)', 'java.util.Random.nextInt()', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False, False), ('java.util.Random.Random(long)', 'java.util.Random.nextInt()', 'java.lang.String.getBytes()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [8, -9.568442925810814]}

counter: 13
num skipped: 0
{'include': ['java.util.LinkedList<Tau_E>.LinkedList()', '$NOT$java.io.File.exists()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedList<Tau_E>.LinkedList()', '$NOT$java.io.File.exists()'), (False, False, False), ('java.util.LinkedList<Tau_E>.LinkedList()', '$NOT$java.io.File.exists()', 'DStop')): [50, -2.5981766283512115]}

counter: 14
num skipped: 0
{'include': ['DBranch', 'java.awt.geom.Point2D.getX()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.Double(double)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'DStop', 'java.lang.Double.Double(double)', 'DStop', 'DStop')): [34, -12.685562625527382], (('DSubTree', 'DBranch', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.Double(double)', 'java.lang.Double.Double(double)', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'DStop', 'java.lang.Double.Double(double)', 'java.lang.Double.Double(double)', 'DStop', 'DStop')): [16, -13.890708747319877]}

counter: 15
num skipped: 0
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [1, -15.205958366394043], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'DStop')): [38, -4.280308358371258], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.abs(int)', 'java.lang.Math.min(float,float)'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.abs(int)', 'java.lang.Math.min(float,float)', 'DStop')): [11, -6.006501728668809]}

counter: 16
num skipped: 0
{'include': ['java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()', 'DStop')): [11, -9.189656456001103], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()')): [8, -9.800860710442066], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.List<java.lang.Long>.size()', 'java.lang.Long.valueOf(long)')): [12, -9.543155193328857], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.List<java.lang.Long>.size()')): [3, -10.92531967163086], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.List<java.lang.Long>.size()'), (False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.List<java.lang.Long>.size()', 'DStop')): [13, -9.632179036736488], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.List<java.lang.Long>.size()', 'java.lang.Long.valueOf(long)'), (False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.List<java.lang.Long>.size()', 'java.lang.Long.valueOf(long)', 'DStop')): [3, -9.949571888893843]}

counter: 17
num skipped: 0
{'include': ['javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [15, -15.928698062896729], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [2, -10.715352918952703], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'), (False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [30, -11.505109943449497], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.lang.String.equals(java.lang.Object)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [2, -12.566217701882124], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.util.Collections.singletonList(Tau_T)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [1, -10.723469433723949]}

counter: 18
num skipped: 0
{'include': ['java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.sql.Timestamp.Timestamp(long)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.sql.Timestamp.Timestamp(long)')): [2, -10.302837073802948], (('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)')): [15, -8.52319586277008], (('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Date.Date()')): [3, -10.568915948271751], (('DSubTree', 'java.util.Date.Date()', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False, False), ('java.util.Date.Date()', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [4, -10.041177898645401], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False), ('java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [15, -4.129566967487335], (('DSubTree', 'java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.lang.System.currentTimeMillis()', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [11, -3.7680446207523346]}

counter: 19
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer()', 'java.io.ByteArrayInputStream.read()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayInputStream.read()'), (False, False), ('java.io.ByteArrayInputStream.read()', 'java.lang.StringBuffer.StringBuffer()')): [5, -15.72549295425415], (('DSubTree', 'java.io.ByteArrayInputStream.read()', 'java.lang.StringBuffer.StringBuffer()'), (False, False, False), ('java.io.ByteArrayInputStream.read()', 'java.lang.StringBuffer.StringBuffer()', 'DStop')): [4, -13.432092010974884], (('DSubTree', 'java.io.ByteArrayInputStream.read()', 'java.lang.StringBuffer.StringBuffer()'), (False, False, False), ('java.io.ByteArrayInputStream.read()', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(char)')): [41, -4.406258463859558]}

counter: 20
num skipped: 0
{'include': ['java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'), (False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [2, -17.008676767349243], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [9, -13.543712496757507], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.currentTimeMillis()', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.currentTimeMillis()', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [7, -16.922243118286133], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.currentTimeMillis()', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False, False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.currentTimeMillis()', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [4, -18.734132029116154], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [4, -12.416308045387268], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [15, -17.019645519554615], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.sql.PreparedStatement.executeUpdate()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [9, -14.69984120130539]}

counter: 22
num skipped: 1
{'include': ['DExcept', 'java.lang.StringBuffer.setLength(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuffer.setLength(int)', 'java.io.OutputStream.write(byte[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuffer.setLength(int)', 'java.io.OutputStream.write(byte[])', 'DStop', 'DStop')): [13, -17.04161047935486], (('DSubTree', 'DExcept', 'java.lang.StringBuffer.setLength(int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.StringBuffer.setLength(int)', 'java.io.OutputStream.write(byte[])', 'DStop')): [37, -13.416150331264362]}

counter: 23
num skipped: 1
{'include': ['DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.lang.String.trim()', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.util.Collections.singletonList(Tau_T)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Appendable.append(java.lang.CharSequence)', 'java.lang.String.trim()', 'DStop', 'java.util.Collections.singletonList(Tau_T)', 'DStop', 'DStop')): [50, -7.963391423225403]}

counter: 24
num skipped: 1
{'include': ['DBranch', 'java.util.logging.Logger.getGlobal()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.logging.Logger.getGlobal()', 'java.lang.Class<Tau_T>.getName()', 'java.util.logging.Logger.getGlobal()', 'java.lang.String.valueOf(char[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.logging.Logger.getGlobal()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'java.lang.String.valueOf(char[])', 'DStop', 'DStop')): [50, -16.98326702415943]}

counter: 25
num skipped: 1
{'include': ['java.lang.String.String(byte[])', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(byte[])'), (False, False), ('java.lang.String.String(byte[])', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [2, -9.22907018661499], (('DSubTree', 'java.lang.String.String(byte[])', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False, False), ('java.lang.String.String(byte[])', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [27, -9.321668431162834], (('DSubTree', 'java.lang.String.String(byte[])', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)'), (False, False, False, False), ('java.lang.String.String(byte[])', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DStop')): [21, -3.9560379683971405]}

counter: 28
num skipped: 3
{'include': ['java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Timestamp.Timestamp(long)'), (False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [9, -12.0693359375], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.Class<Tau_T>.getSimpleName()'), (False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [13, -11.917400598526001], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.Throwable.printStackTrace()'), (False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.lang.Throwable.printStackTrace()', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [3, -11.476688742637634], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Throwable.printStackTrace()')): [15, -6.835975408554077], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [10, -5.78658139705658]}

counter: 29
num skipped: 3
{'include': ['java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)'), (False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'DStop')): [28, -17.920853566844016], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [1, -21.08673464693129], (('DSubTree', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)')): [14, -16.042880684137344], (('DSubTree', 'javax.naming.InitialContext.InitialContext(java.util.Hashtable)'), (False, False), ('javax.naming.InitialContext.InitialContext(java.util.Hashtable)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)')): [7, -17.48649549484253]}

counter: 30
num skipped: 3
{'include': ['DBranch', 'java.io.Reader.read(char[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.Reader.read(char[])', 'java.util.Calendar.get(int)', 'java.io.Reader.read(char[])', 'java.lang.String.String(char[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.Reader.read(char[])', 'java.util.Calendar.get(int)', 'DStop', 'java.lang.String.String(char[])', 'DStop', 'DStop')): [50, -10.493304799776524]}

counter: 31
num skipped: 3
{'include': ['java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Math.min(long,long)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Math.min(long,long)'), (False, False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Math.min(long,long)', 'DStop')): [17, -21.42670932970941], (('DSubTree', 'java.lang.Math.min(long,long)', 'java.util.concurrent.TimeUnit.toNanos(long)'), (False, False, False), ('java.lang.Math.min(long,long)', 'java.util.concurrent.TimeUnit.toNanos(long)', 'DStop')): [20, -20.987852929833025], (('DSubTree', 'java.util.concurrent.TimeUnit.toNanos(long)'), (False, False), ('java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Math.min(long,long)')): [4, -17.756039679050446], (('DSubTree', 'java.lang.Math.min(long,long)'), (False, False), ('java.lang.Math.min(long,long)', 'java.util.concurrent.TimeUnit.toNanos(long)')): [9, -19.289015769958496]}

counter: 32
num skipped: 3
{'include': ['javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()'), (False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()')): [2, -31.527999877929688], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()'), (False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'DStop')): [36, -31.778522968292236], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)', 'DStop')): [12, -30.482915834523737]}

counter: 33
num skipped: 3
{'include': ['java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Integer.intValue()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Integer.intValue()')): [4, -4.664420247077942], (('DSubTree', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Integer.intValue()'), (False, False, False), ('java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Integer.intValue()', 'DStop')): [46, -7.291100263595581]}

counter: 34
num skipped: 3
{'include': ['java.util.TimeZone.getDefault()', 'java.util.TimeZone.setDefault(java.util.TimeZone)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TimeZone.getDefault()'), (False, False), ('java.util.TimeZone.getDefault()', 'java.util.TimeZone.setDefault(java.util.TimeZone)')): [3, -15.18916392326355], (('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)'), (False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.TimeZone.getDefault()')): [12, -16.627201080322266], (('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Locale.getDefault()'), (False, False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Locale.getDefault()', 'java.util.TimeZone.getDefault()')): [29, -14.745814800262451], (('DSubTree', 'java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Locale.getDefault()', 'java.util.TimeZone.getDefault()'), (False, False, False, False), ('java.util.TimeZone.setDefault(java.util.TimeZone)', 'java.util.Locale.getDefault()', 'java.util.TimeZone.getDefault()', 'DStop')): [6, -6.499022778123617]}

counter: 35
num skipped: 3
{'include': ['java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.currentTimeMillis()'), (False, False), ('java.lang.System.currentTimeMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)')): [50, -2.6593093276023865]}
