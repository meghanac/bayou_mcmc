data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 35


counter: 0
num skipped: 0
{'include': ['DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -17.33358884602785]}

counter: 1
num skipped: 0
{'include': ['$NOT$java.lang.String.isEmpty()', 'java.util.TimeZone.getTimeZone(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.isEmpty()'), (False, False), ('$NOT$java.lang.String.isEmpty()', 'java.util.TimeZone.getTimeZone(java.lang.String)')): [48, -3.925909884274006], (('DSubTree', '$NOT$java.lang.String.isEmpty()', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False), ('$NOT$java.lang.String.isEmpty()', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'DStop')): [2, -4.103812977671623]}

counter: 2
num skipped: 0
{'include': ['DBranch', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.util.Collections.emptyList()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'java.util.Collections.emptyList()', 'DStop', 'DStop')): [50, -23.299916001968086]}

counter: 3
num skipped: 0
{'include': ['DBranch', 'java.sql.ResultSet.getDate(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.util.Collections.singleton(Tau_T)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.util.Calendar.getInstance()', 'DStop', 'java.util.Collections.singleton(Tau_T)', 'DStop', 'DStop')): [50, -10.450350174680352]}

counter: 4
num skipped: 0
{'include': ['javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'), (False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)')): [19, -5.3789448738098145], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)')): [12, -3.3586681857705116], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop')): [19, -3.158366683870554]}

counter: 5
num skipped: 0
{'include': ['java.sql.ResultSet.getDate(java.lang.String)', 'DBranch'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.ResultSet.getDate(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.sql.ResultSet.getDate(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'DStop', 'java.util.Calendar.setTime(java.util.Date)', 'DStop', 'DStop')): [2, -17.8788161277771], (('DSubTree', 'java.sql.ResultSet.getDate(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)', 'DBranch'), (False, False, True, True, False, False, False, False, False), ('java.sql.ResultSet.getDate(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'DStop', 'java.util.Calendar.setTime(java.util.Date)', 'DStop', 'DStop')): [14, -20.881343019311316], (('DSubTree', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.setTime(java.util.Date)', 'DBranch'), (False, False, False, False, True, True, False, False, False, False, False), ('java.sql.ResultSet.getDate(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)', 'DBranch', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'DStop', 'java.util.Calendar.setTime(java.util.Date)', 'DStop', 'DStop')): [34, -21.314632683061063]}

counter: 6
num skipped: 0
{'include': ['java.util.TimeZone.getDefault()', 'java.util.TimeZone.setDefault(java.util.TimeZone)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TimeZone.getDefault()', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False), ('java.util.TimeZone.getDefault()', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.TimeZone.setDefault(java.util.TimeZone)')): [3, -15.802647590637207], (('DSubTree', 'java.util.TimeZone.getDefault()', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.TimeZone.setDefault(java.util.TimeZone)'), (False, False, False, False), ('java.util.TimeZone.getDefault()', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.TimeZone.setDefault(java.util.TimeZone)', 'DStop')): [47, -14.5736993055325]}

counter: 7
num skipped: 0
{'include': ['DExcept', 'java.io.File.renameTo(java.io.File)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.File.renameTo(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.File.renameTo(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DStop', 'DStop')): [50, -16.443575590848923]}

counter: 8
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.InputEvent.consume()')): [29, -12.62500774860382], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.awt.event.InputEvent.consume()')): [21, -14.97861623764038]}

counter: 9
num skipped: 0
{'include': ['java.util.Collections.sort(java.util.List)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.sort(java.util.List)'), (False, False), ('java.util.Collections.sort(java.util.List)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [41, -2.408088803291321], (('DSubTree', 'java.util.Collections.sort(java.util.List)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.Collections.sort(java.util.List)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [9, -8.438217222690582]}

counter: 10
num skipped: 0
{'include': ['java.util.ArrayList.size()', 'java.util.ArrayList.get(int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.size()'), (False, False), ('java.util.ArrayList.size()', 'java.util.ArrayList.get(int)')): [35, -5.735546886920929], (('DSubTree', 'java.util.ArrayList.size()', 'java.util.ArrayList.get(int)'), (False, False, False), ('java.util.ArrayList.size()', 'java.util.ArrayList.get(int)', 'DStop')): [15, -2.2955315709114075]}

counter: 11
num skipped: 0
{'include': ['DExcept', 'javax.swing.JFileChooser.JFileChooser()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.swing.JFileChooser.JFileChooser()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.JFileChooser.JFileChooser()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'DStop', 'DStop')): [47, -19.15625023841858], (('DSubTree', 'DExcept', 'javax.swing.JFileChooser.JFileChooser()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.JFileChooser.JFileChooser()', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'DStop', 'DStop')): [3, -21.350861977320164]}

counter: 12
num skipped: 0
{'include': ['DExcept', 'java.io.InputStream.read()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.InputStream.read()', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.InputStream.read()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [5, -15.847971320152283], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.io.InputStream.read()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.io.InputStream.read()', 'DStop', 'DStop')): [43, -13.380118417786434], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.io.InputStream.read()', 'DStop')): [2, -6.306658309418708]}

counter: 13
num skipped: 0
{'include': ['java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.isAlive()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()'), (False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()', 'java.lang.Thread.isAlive()')): [10, -10.2786146402359], (('DSubTree', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()', 'java.lang.Thread.isAlive()'), (False, False, False, False), ('java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()', 'java.lang.Thread.isAlive()', 'DStop')): [40, -5.774598598480225]}

counter: 14
num skipped: 0
{'include': ['DBranch', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.trim()', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Throwable.getMessage()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.trim()', 'DStop', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -14.428086280822754]}

counter: 15
num skipped: 0
{'include': ['DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.lang.Double.parseDouble(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'DStop')): [50, -18.83462706580758]}

counter: 17
num skipped: 1
{'include': ['javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'), (False, False, False), ('javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.Throwable.getLocalizedMessage()')): [1, -10.855587661266327], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.Throwable.getLocalizedMessage()')): [3, -9.372027277946472], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.Throwable.getLocalizedMessage()'), (False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'java.lang.Throwable.getLocalizedMessage()', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)')): [11, -6.669952869415283], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)'), (False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)')): [6, -5.216074138879776], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop')): [8, -6.178225076757371], (('DSubTree', 'javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)'), (False, False, False), ('javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'java.lang.System.exit(int)')): [21, -6.305447220802307]}

counter: 18
num skipped: 1
{'include': ['javax.swing.text.Element.getDocument()', 'javax.swing.text.Element.getEndOffset()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.Element.getDocument()'), (False, False), ('javax.swing.text.Element.getDocument()', 'javax.swing.text.Element.getEndOffset()')): [1, -31.08250904083252], (('DSubTree', 'javax.swing.text.Element.getDocument()', 'javax.swing.text.Element.getEndOffset()'), (False, False, False), ('javax.swing.text.Element.getDocument()', 'javax.swing.text.Element.getEndOffset()', 'DStop')): [6, -31.691697371192276], (('DSubTree', 'javax.swing.text.Element.getEndOffset()', 'javax.swing.text.Element.getDocument()'), (False, False, False), ('javax.swing.text.Element.getEndOffset()', 'javax.swing.text.Element.getDocument()', 'DStop')): [13, -28.481788212433457], (('DSubTree', 'javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)', 'java.util.Arrays.fill(int[],int)', 'javax.swing.text.Element.getDocument()'), (False, False, False, False, False), ('javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)', 'java.util.Arrays.fill(int[],int)', 'javax.swing.text.Element.getDocument()', 'DStop')): [5, -30.126786321401596], (('DSubTree', 'javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)', 'javax.swing.text.Element.getDocument()'), (False, False, False, False), ('javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)', 'javax.swing.text.Element.getDocument()', 'DStop')): [18, -20.927869386970997], (('DSubTree', 'javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)'), (False, False, False), ('javax.swing.text.Element.getEndOffset()', 'java.lang.Integer.toString(int)', 'javax.swing.text.Element.getDocument()')): [7, -19.991317749023438]}

counter: 20
num skipped: 2
{'include': ['javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'), (False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'DStop')): [9, -32.79054528474808], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.lang.Class<>.newInstance()'), (False, False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.lang.Class<>.newInstance()', 'DStop')): [35, -26.54268828034401], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.Collections.singleton(Tau_T)'), (False, False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.Collections.singleton(Tau_T)', 'DStop')): [6, -26.13228750228882]}

counter: 21
num skipped: 2
{'include': ['javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()'), (False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()')): [1, -36.02376365661621], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionEnd()'), (False, False), ('javax.swing.text.JTextComponent.getSelectionEnd()', 'javax.swing.text.JTextComponent.getSelectionStart()')): [2, -36.128726959228516], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'javax.swing.text.JTextComponent.getSelectionStart()'), (False, False, False), ('javax.swing.text.JTextComponent.getSelectionEnd()', 'javax.swing.text.JTextComponent.getSelectionStart()', 'DStop')): [4, -34.25302260136232], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()'), (False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'DStop')): [12, -28.99264168739319], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)', 'DStop')): [19, -28.031966546550393], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()'), (False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)')): [6, -27.302931293845177], (('DSubTree', 'javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)'), (False, False, False, False, False), ('javax.swing.text.JTextComponent.getSelectionStart()', 'javax.swing.text.JTextComponent.getSelectionEnd()', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'DStop')): [6, -33.04718960262835]}

counter: 22
num skipped: 2
{'include': ['DExcept', 'java.nio.Buffer.limit(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.Buffer.limit(int)', 'java.lang.String.String(byte[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.Buffer.limit(int)', 'java.lang.String.String(byte[])', 'DStop', 'DStop')): [50, -9.938406527042389]}

counter: 23
num skipped: 2
{'include': ['java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.toString()'), (False, False), ('java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()')): [31, -2.136669158935547], (('DSubTree', 'java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()'), (False, False, False), ('java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()', 'DStop')): [19, -1.209832888096571]}

counter: 24
num skipped: 2
{'include': ['java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)')): [3, -4.4927051067352295], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.close()')): [11, -7.604272842407227], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.close()'), (False, False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.close()', 'DStop')): [1, -8.439162995666265], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'DStop')): [35, -6.282661437988281]}

counter: 25
num skipped: 2
{'include': ['java.util.Random.nextBytes(byte[])', 'java.util.Arrays.copyOf(byte[],int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Arrays.copyOf(byte[],int)')): [8, -8.794949650764465], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)')): [1, -12.468583822250366], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)', 'DStop')): [19, -15.63513795286417], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [10, -12.123323443345726], (('DSubTree', 'java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)'), (False, False, False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.util.Arrays.copyOf(byte[],int)', 'java.util.Arrays.equals(byte[],byte[])')): [12, -11.292551070451736]}

counter: 26
num skipped: 2
{'include': ['DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop', 'DStop')): [50, -18.678707599639893]}

counter: 27
num skipped: 2
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [3, -9.249843120574951], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.System.nanoTime()')): [42, -11.835504682734609], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.System.nanoTime()'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.System.nanoTime()', 'DStop')): [5, -9.866040607914329]}

counter: 28
num skipped: 2
{'include': ['java.util.HashMap.HashMap()', 'java.util.regex.Pattern.compile(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.HashMap()'), (False, False), ('java.util.HashMap.HashMap()', 'java.util.regex.Pattern.compile(java.lang.String)')): [16, -9.702475547790527], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.util.HashMap.HashMap()')): [7, -9.889885902404785], (('DSubTree', 'java.util.HashMap.HashMap()', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False), ('java.util.HashMap.HashMap()', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop')): [9, -7.181179881095886], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Properties.Properties()'), (False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Properties.Properties()', 'java.util.HashMap.HashMap()')): [11, -19.342926740646362], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.HashMap.HashMap()')): [5, -16.778250217437744], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.HashMap.HashMap()')): [2, -14.290439367294312]}

counter: 29
num skipped: 2
{'include': ['java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedReader.readLine()'), (False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)')): [4, -4.618776798248291], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)'), (False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)', 'DStop')): [14, -6.470104277133942], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [3, -10.904455736279488], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [22, -9.5020542293787], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Math.max(int,int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Math.max(int,int)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [1, -15.289439886808395], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [1, -11.01339635066688], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [1, -10.947650983929634], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)')): [4, -14.153332769870758]}

counter: 30
num skipped: 2
{'include': ['java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<T>.add(Tau_T)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False), ('java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<T>.add(Tau_T)')): [8, -4.0797640308737755], (('DSubTree', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<T>.add(Tau_T)'), (False, False, False), ('java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<T>.add(Tau_T)', 'DStop')): [15, -5.1852688633371145], (('DSubTree', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.size()', 'java.util.List<T>.add(Tau_T)'), (False, False, False, False), ('java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.size()', 'java.util.List<T>.add(Tau_T)', 'DStop')): [27, -6.104456972330809]}

counter: 31
num skipped: 2
{'include': ['java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.lang.String.getBytes()'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.lang.String.getBytes()', 'java.io.FileOutputStream.write(byte[])')): [1, -24.295870631933212], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.lang.String.getBytes()'), (False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.lang.String.getBytes()', 'java.io.FileOutputStream.write(byte[])')): [2, -20.510949801595416], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.write(byte[])')): [4, -20.77878986299038], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()'), (False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])')): [1, -16.473289787769318], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])')): [5, -17.15817141532898], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()')): [9, -19.747242242097855], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()')): [1, -15.04147219657898], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()'), (False, False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'java.io.FileOutputStream.close()', 'DStop')): [12, -17.736180394887924], (('DSubTree', 'java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False, False), ('java.io.FileOutputStream.write(byte[])', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'DStop')): [11, -13.45964615046978], (('DSubTree', 'java.io.StringWriter.StringWriter()', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])'), (False, False, False, False), ('java.io.StringWriter.StringWriter()', 'java.io.StringWriter.toString()', 'java.io.FileOutputStream.write(byte[])', 'DStop')): [4, -14.30246439576149]}

counter: 32
num skipped: 2
{'include': ['DBranch', 'java.io.PrintStream.print(char[])'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.PrintStream.print(char[])', 'java.lang.System.exit(int)', 'java.io.PrintStream.print(char[])', 'java.util.HashSet<Tau_E>.HashSet()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.PrintStream.print(char[])', 'java.lang.System.exit(int)', 'DStop', 'java.util.HashSet<Tau_E>.HashSet()', 'DStop', 'DStop')): [50, -11.92557430267334]}

counter: 33
num skipped: 2
{'include': ['java.lang.Thread.start()', 'java.lang.Runnable.run()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.start()'), (False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()')): [2, -15.188563346862793], (('DSubTree', 'java.lang.Runnable.run()'), (False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()')): [15, -9.287972688674927], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.setDaemon(boolean)'), (False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.setDaemon(boolean)', 'java.lang.Thread.start()')): [1, -7.403404116630554], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.setDaemon(boolean)', 'java.lang.Thread.setName(java.lang.String)'), (False, False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.setDaemon(boolean)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()')): [32, -7.294489920139313]}

counter: 34
num skipped: 2
{'include': ['java.awt.Dimension.Dimension(int,int)', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'), (False, False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)', 'DStop')): [45, -21.996443283045664], (('DSubTree', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [4, -20.555532433325425], (('DSubTree', 'java.awt.Dimension.Dimension(int,int)'), (False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)')): [1, -15.098409652709961]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.7771428571428572, 'relevant_additions': 0.7200000000000001, 'meets_constraints': 0.9428571428571431, 'in_set': 0.05714285714285714, 'test_set_relevant_additions': 0.6800000000000002}
