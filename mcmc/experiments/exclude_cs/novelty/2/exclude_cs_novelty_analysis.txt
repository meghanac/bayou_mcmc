data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.EnumSet.noneOf(java.lang.Class)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False), ('java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.EnumSet.noneOf(java.lang.Class)')): [2, -2.897196363657713], (('DSubTree', 'java.util.EnumSet.noneOf(java.lang.Class)'), (False, False), ('java.util.EnumSet.noneOf(java.lang.Class)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)')): [5, -4.689971425570548], (('DSubTree', 'java.util.EnumSet.noneOf(java.lang.Class)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False, False), ('java.util.EnumSet.noneOf(java.lang.Class)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'DStop')): [43, -1.8452984858304262]}

counter: 1
num skipped: 0
{'include': ['java.awt.Graphics.dispose()', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.dispose()'), (False, False), ('java.awt.Graphics.dispose()', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [2, -23.501967430114746], (('DSubTree', 'java.awt.Graphics.dispose()', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False, False), ('java.awt.Graphics.dispose()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)')): [43, -20.067218780517578], (('DSubTree', 'java.awt.Graphics.dispose()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'), (False, False, False, False), ('java.awt.Graphics.dispose()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'DStop')): [5, -23.22156150639057]}

counter: 2
num skipped: 0
{'include': ['DExcept', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.lang.String.getBytes(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.lang.String.getBytes(java.lang.String)', 'DStop', 'DStop')): [36, -16.235957565135323], (('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.io.OutputStream.write(byte[])', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.io.OutputStream.write(byte[])', 'DStop', 'DStop')): [14, -14.874578227289021]}

counter: 3
num skipped: 0
{'include': ['java.util.Collections.emptyList()', 'java.util.Collections.enumeration(java.util.Collection)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.emptyList()'), (False, False), ('java.util.Collections.emptyList()', 'java.util.Collections.enumeration(java.util.Collection)')): [13, -3.181682825088501], (('DSubTree', 'java.util.Collections.emptyList()', 'java.util.Collections.enumeration(java.util.Collection)'), (False, False, False), ('java.util.Collections.emptyList()', 'java.util.Collections.enumeration(java.util.Collection)', 'DStop')): [37, -3.335336776683107]}

counter: 4
num skipped: 0
{'include': ['DLoop', 'java.util.List<java.lang.Object>.add(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.List<java.lang.Object>.get(int)', 'DStop', 'DStop')): [50, -8.435364723205566]}

counter: 5
num skipped: 0
{'include': ['java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)'), (False, False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'DStop')): [2, -18.68909106613137], (('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)')): [1, -18.52055513858795], (('DSubTree', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)'), (False, False), ('javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.Font.Font(java.lang.String,int,int)')): [3, -17.515356063842773], (('DSubTree', 'javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False), ('javax.swing.JComponent.getFontMetrics(java.awt.Font)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [44, -17.701879926025867]}

counter: 6
num skipped: 0
{'include': ['java.util.UUID.randomUUID()', 'java.net.URI.create(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.UUID.randomUUID()'), (False, False), ('java.util.UUID.randomUUID()', 'java.net.URI.create(java.lang.String)')): [5, -6.550133228302002], (('DSubTree', 'java.util.UUID.randomUUID()', 'java.net.URI.create(java.lang.String)'), (False, False, False), ('java.util.UUID.randomUUID()', 'java.net.URI.create(java.lang.String)', 'DStop')): [45, -2.5800739442929626]}

counter: 7
num skipped: 0
{'include': ['java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedReader.readLine()'), (False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)')): [5, -4.531671524047852], (('DSubTree', 'java.io.BufferedReader.readLine()', 'DLoop', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.substring(int)', 'DLoop'), (False, False, True, True, False, False), ('java.io.BufferedReader.readLine()', 'DLoop', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.substring(int)', 'DStop', 'java.lang.String.indexOf(int)')): [40, -17.77724501490593], (('DSubTree', 'java.io.BufferedReader.readLine()', 'DLoop', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.substring(int)', 'DLoop', 'java.lang.String.indexOf(int)'), (False, False, True, True, False, False, False), ('java.io.BufferedReader.readLine()', 'DLoop', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.substring(int)', 'DStop', 'java.lang.String.indexOf(int)', 'java.util.Vector.Vector()')): [5, -28.368273556232452]}

counter: 8
num skipped: 0
{'include': ['$NOT$java.io.File.canRead()', 'java.io.File.getCanonicalPath()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.canRead()'), (False, False), ('$NOT$java.io.File.canRead()', 'java.io.File.getCanonicalPath()')): [40, -4.15763795375824], (('DSubTree', '$NOT$java.io.File.canRead()', 'java.io.File.getCanonicalPath()'), (False, False, False), ('$NOT$java.io.File.canRead()', 'java.io.File.getCanonicalPath()', 'java.io.File.getCanonicalPath()')): [10, -3.671741593629122]}

counter: 9
num skipped: 0
{'include': ['DExcept', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop', 'DStop')): [50, -2.7955471575260162]}

counter: 10
num skipped: 0
{'include': ['javax.swing.JFrame.JFrame()', 'javax.swing.JPanel.JPanel()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JFrame.JFrame()'), (False, False), ('javax.swing.JFrame.JFrame()', 'javax.swing.JPanel.JPanel()')): [2, -13.566251277923584], (('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JFrame.JFrame()')): [22, -7.293872356414795], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JFrame.JFrame()'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JFrame.JFrame()', 'DStop')): [26, -6.850875198841095]}

counter: 11
num skipped: 0
{'include': ['java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)'), (False, False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)', 'DStop')): [40, -13.005182944238186], (('DSubTree', 'java.util.Arrays.sort(java.lang.Object[])'), (False, False), ('java.util.Arrays.sort(java.lang.Object[])', 'java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)')): [10, -7.393575429916382]}

counter: 12
num skipped: 0
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getCanonicalName()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.getProperty(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.getProperty(java.lang.String)', 'DStop', 'DStop')): [50, -7.50022630894091]}

counter: 13
num skipped: 0
{'include': ['DBranch', 'javax.swing.JComponent.setForeground(java.awt.Color)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'java.lang.Double.parseDouble(java.lang.String)', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'java.lang.Double.parseDouble(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'DStop')): [50, -11.554425971582532]}

counter: 14
num skipped: 0
{'include': ['DBranch', 'java.awt.image.BufferedImage.setRGB(int,int,int)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'java.lang.Throwable.printStackTrace()', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [13, -16.241645097732544], (('DSubTree', 'DBranch', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'java.lang.Throwable.printStackTrace()', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.awt.image.BufferedImage.setRGB(int,int,int)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop', 'DStop')): [37, -10.072195654502138]}

counter: 15
num skipped: 0
{'include': ['java.lang.Throwable.getMessage()', 'java.lang.String.endsWith(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.getMessage()'), (False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.endsWith(java.lang.String)')): [3, -4.1542928367853165], (('DSubTree', 'java.lang.Throwable.getMessage()', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.endsWith(java.lang.String)', 'DStop')): [3, -6.002601593732834], (('DSubTree', 'java.lang.Throwable.getMessage()', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'DStop')): [7, -7.7850935608148575], (('DSubTree', 'java.lang.Throwable.getMessage()', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.Thread.currentThread()'), (False, False, False, False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.Thread.currentThread()', 'DStop')): [22, -10.233022827655077], (('DSubTree', 'java.lang.Throwable.getMessage()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.Thread.currentThread()'), (False, False, False, False, False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.Thread.currentThread()', 'DStop')): [6, -14.930044636130333], (('DSubTree', 'java.lang.Throwable.getMessage()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False, False, False), ('java.lang.Throwable.getMessage()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.endsWith(java.lang.String)', 'DStop')): [9, -10.868237495422363]}

counter: 16
num skipped: 0
{'include': ['java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)')): [27, -4.679249167442322], (('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)'), (False, False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)')): [1, -6.503468158887699], (('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)'), (False, False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'DStop')): [1, -3.5812150835990906], (('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])'), (False, False, False, False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [13, -8.713617023080587], (('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [6, -8.37086517456919], (('DSubTree', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.lang.String.split(java.lang.String,int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.charAt(int)', 'java.lang.String.split(java.lang.String,int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [2, -10.784019747748971]}

counter: 17
num skipped: 0
{'include': ['java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [7, -10.23875081539154], (('DSubTree', 'java.io.InputStream.available()', 'java.io.InputStream.close()', 'java.lang.String.String(byte[],int,int)'), (False, False, False, False), ('java.io.InputStream.available()', 'java.io.InputStream.close()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [12, -13.097352251410484], (('DSubTree', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'java.lang.String.String(byte[],int,int)'), (False, False, False, False, False), ('java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [31, -4.581602707505226]}

counter: 18
num skipped: 0
{'include': ['DExcept', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)', 'java.lang.Throwable.printStackTrace()', 'DStop')): [50, -16.097588478354737]}

counter: 19
num skipped: 0
{'include': ['DBranch', 'java.sql.ResultSet.getDate(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.util.Date.getTime()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.lang.String.valueOf(long)', 'DStop', 'java.util.Date.getTime()', 'DStop', 'DStop')): [32, -20.523156908806413], (('DSubTree', 'DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.sql.ResultSet.getDate(java.lang.String)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.sql.ResultSet.getDate(java.lang.String)', 'java.lang.String.valueOf(long)', 'DStop', 'DStop', 'DStop')): [18, -16.876596693648025]}

counter: 20
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()')): [8, -9.783600330352783], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()'), (False, False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()', 'DStop')): [28, -5.869349610060453], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()'), (False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'DStop')): [7, -7.590915024280548], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.lang.Throwable.getMessage()'), (False, False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.lang.Throwable.getMessage()', 'DStop')): [4, -12.818737292662263], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.io.File.File(java.lang.String)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()', 'java.io.File.File(java.lang.String)', 'DStop')): [3, -12.992965430021286]}

counter: 21
num skipped: 0
{'include': ['java.util.Arrays.asList(T[])', 'java.util.Iterator<>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])'), (False, False), ('java.util.Arrays.asList(T[])', 'java.util.Iterator<>.hasNext()')): [50, -13.907991841435432]}

counter: 22
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.OutputStream.close()')): [10, -5.64420211315155], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.OutputStream.close()')): [2, -8.573243916034698], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.OutputStream.close()'), (False, False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.OutputStream.close()', 'DStop')): [8, -9.01563972234726], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'java.io.OutputStream.close()', 'java.io.InputStream.close()', 'DStop')): [30, -10.254530668258667]}

counter: 23
num skipped: 0
{'include': ['DBranch', 'java.lang.Double.valueOf(double)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Double.valueOf(double)', 'java.lang.System.exit(int)', 'java.lang.Double.valueOf(double)', 'java.lang.Throwable.getMessage()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Double.valueOf(double)', 'java.lang.System.exit(int)', 'DStop', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -11.679181575775146]}

counter: 24
num skipped: 0
{'include': ['java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)')): [5, -8.201074600219727], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)')): [1, -10.507555395364761], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)', 'java.nio.ByteBuffer.allocate(int)')): [16, -8.124397277832031], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.valueOf(int)', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [3, -10.29390749335289], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [1, -11.00266271084547], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [21, -14.754633888602257], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.Integer.toString()', 'java.util.Arrays.equals(byte[],byte[])'), (False, False, False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.Integer.toString()', 'java.util.Arrays.equals(byte[],byte[])', 'DStop')): [2, -21.00307971611619], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.Arrays.equals(byte[],byte[])', 'java.lang.Integer.toString()'), (False, False, False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.Arrays.equals(byte[],byte[])', 'java.lang.Integer.toString()', 'DStop')): [1, -20.51406228542328]}

counter: 25
num skipped: 0
{'include': ['DBranch', 'java.awt.geom.Point2D.getX()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.awt.geom.Point2D.getX()', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [25, -24.878204256296158], (('DSubTree', 'DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'java.awt.geom.Point2D.getX()', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [25, -20.27498197183013]}

counter: 26
num skipped: 0
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()', 'DStop')): [21, -13.168849289417267], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()')): [4, -11.821449875831604], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [7, -16.382055580615997], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.group()'), (False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.group()', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [18, -10.265769571065903]}

counter: 27
num skipped: 0
{'include': ['DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop', 'DStop')): [33, -17.43298864364624], (('DSubTree', 'DExcept', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'DStop', 'DStop')): [17, -12.367804700450506]}

counter: 28
num skipped: 0
{'include': ['java.lang.Runnable.run()', 'java.lang.Thread.start()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Runnable.run()'), (False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()')): [12, -7.149871826171875], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.start()'), (False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.start()', 'DStop')): [4, -13.941629573702812], (('DSubTree', 'java.lang.Runnable.run()', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.start()'), (False, False, False, False), ('java.lang.Runnable.run()', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.start()', 'DStop')): [3, -14.376090476289392], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Runnable.run()'), (False, False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()', 'DStop')): [24, -9.426211431622505], (('DSubTree', 'java.lang.Thread.start()', 'java.lang.Runnable.run()', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.lang.Thread.start()', 'java.lang.Runnable.run()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [7, -12.11075784638524]}

counter: 29
num skipped: 0
{'include': ['DExcept', 'java.lang.Long.toString()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Long.toString()', 'java.lang.StringBuilder.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Long.toString()', 'java.lang.StringBuilder.toString()', 'DStop', 'DStop')): [50, -19.62218952625699]}

counter: 30
num skipped: 0
{'include': ['java.io.DataInput.readLong()', 'java.io.DataInput.readBoolean()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readLong()'), (False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readBoolean()')): [4, -11.371708512306213], (('DSubTree', 'java.io.DataInput.readLong()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readBoolean()', 'DStop')): [46, -9.523720803670585]}

counter: 32
num skipped: 1
{'include': ['java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedReader.readLine()'), (False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)')): [39, -5.3262452483177185], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)'), (False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)', 'java.lang.String.valueOf(boolean)')): [11, -16.67638087272644]}

counter: 33
num skipped: 1
{'include': ['java.sql.Statement.close()', 'java.sql.Connection.setAutoCommit(boolean)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Statement.close()'), (False, False), ('java.sql.Statement.close()', 'java.sql.Connection.setAutoCommit(boolean)')): [1, -24.781214714050293], (('DSubTree', 'java.sql.Statement.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.Statement.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.Connection.setAutoCommit(boolean)')): [28, -20.841185748577118], (('DSubTree', 'java.sql.Statement.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False, False, False), ('java.sql.Statement.close()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.Connection.setAutoCommit(boolean)', 'DStop')): [21, -13.88805275940831]}

counter: 34
num skipped: 1
{'include': ['java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False), ('java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()')): [42, -5.085776388645172], (('DSubTree', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()'), (False, False, False), ('java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.getCanonicalName()', 'DStop')): [8, -5.183800163678825]}

counter: 35
num skipped: 1
{'include': ['java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.contains(java.lang.Object)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.remove(java.lang.Object)'), (False, False), ('java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.contains(java.lang.Object)')): [7, -3.460945188999176], (('DSubTree', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.contains(java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'DStop')): [43, -3.3881464526057243]}

counter: 36
num skipped: 1
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()')): [2, -11.946150779724121], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DLoop'), (False, False, False, True, True, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DStop', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()')): [9, -15.053368976339698], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DStop', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()')): [1, -19.31385024636984], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'DLoop'), (False, False, False, False, True, True, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()')): [3, -17.825693357735872], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'DLoop'), (False, False, False, True, True, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()')): [5, -16.01023608725518], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'DLoop'), (False, False, False, True, True, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.executeQuery(java.lang.String)', 'DLoop', 'java.sql.ResultSet.next()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.sql.ResultSet.getString(java.lang.String)')): [30, -12.965400913730264]}

counter: 37
num skipped: 1
{'include': ['java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [2, -20.37948266044259], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'DStop')): [12, -21.41071191430092], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.lang.String.length()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.lang.String.length()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'DStop')): [19, -15.43410799279809], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.String.length()', 'DStop')): [15, -11.078000962734222], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.util.Locale.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.String.length()'), (False, False, False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.util.Locale.getDefault()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.String.length()', 'DStop')): [2, -13.765741765499115]}

counter: 38
num skipped: 1
{'include': ['java.lang.reflect.Method.getReturnType()', 'java.lang.Class<>.isPrimitive()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getReturnType()'), (False, False), ('java.lang.reflect.Method.getReturnType()', 'java.lang.Class<>.isPrimitive()')): [33, -9.096296839416027], (('DSubTree', 'java.lang.reflect.Method.getReturnType()', 'java.lang.Class<>.isPrimitive()'), (False, False, False), ('java.lang.reflect.Method.getReturnType()', 'java.lang.Class<>.isPrimitive()', 'DStop')): [17, -9.818429161445238]}
