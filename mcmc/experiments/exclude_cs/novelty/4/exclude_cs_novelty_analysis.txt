data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 10


counter: 1
num skipped: 1
{'include': ['java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.toString()'), (False, False), ('java.lang.Throwable.toString()', 'javax.naming.InitialContext.InitialContext()')): [11, -5.605615615844727], (('DSubTree', 'javax.naming.InitialContext.InitialContext()'), (False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()')): [37, -3.6857555508613586], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.toString()', 'java.lang.Throwable.toString()')): [2, -3.915793277323246]}

counter: 2
num skipped: 1
{'include': ['DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'DStop', 'DStop')): [50, -15.788070946931839]}

counter: 3
num skipped: 1
{'include': ['DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'java.util.Vector<java.lang.String>.Vector<String>()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'java.util.Vector<java.lang.String>.Vector<String>()', 'DStop', 'DStop')): [50, -12.052179217338562]}

counter: 4
num skipped: 1
{'include': ['DBranch', 'java.io.PrintWriter.println(char[])'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.PrintWriter.println(char[])', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'DStop')): [50, -7.079101324081421]}

counter: 5
num skipped: 1
{'include': ['DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.max(double,double)', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.max(double,double)', 'DStop', 'java.lang.Thread.Thread(java.lang.Runnable)', 'DStop', 'DStop')): [50, -25.043036580085754]}

counter: 6
num skipped: 1
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()')): [7, -8.182944774627686], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DStop')): [22, -9.545815169811249], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DExcept'), (False, False, False, True, True, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DStop', 'DStop')): [8, -19.037579673342407], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DExcept', 'java.sql.PreparedStatement.execute()'), (False, False, True, True, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DStop', 'java.sql.PreparedStatement.execute()', 'DStop')): [11, -21.918058861978352], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.Properties.Properties()', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DExcept', 'java.sql.PreparedStatement.execute()'), (False, False, False, True, True, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.util.Properties.Properties()', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Properties.Properties()', 'DStop', 'java.sql.PreparedStatement.execute()', 'DStop')): [2, -25.629970097448677]}

counter: 7
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])')): [8, -7.219070911407471], (('DSubTree', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)')): [3, -6.2083991672843695], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)')): [6, -6.4716382548213005], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes(java.lang.String)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.lang.String.getBytes(java.lang.String)', 'java.nio.ByteBuffer.allocate(int)')): [5, -6.159762620925903], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [4, -5.386933222413063], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [24, -4.454788513481617]}

counter: 8
num skipped: 1
{'include': ['DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', '$NOT$java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DStop', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -16.968995546922088]}

counter: 9
num skipped: 1
{'include': ['java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)')): [6, -11.185065031051636], (('DSubTree', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False), ('java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)')): [25, -10.650847434997559], (('DSubTree', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False), ('java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'DStop')): [19, -4.524806052446365]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6, 'relevant_additions': 0.6, 'meets_constraints': 0.8999999999999999, 'in_set': 0.0, 'test_set_relevant_additions': 0.6}
