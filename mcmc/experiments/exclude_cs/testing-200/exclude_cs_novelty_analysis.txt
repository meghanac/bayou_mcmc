data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_cs
label: novelty
num test programs: 500


counter: 0
num skipped: 0
{'include': ['javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.JLabel.JLabel(java.lang.String)')): [3, -10.120785415172577], (('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.JLabel.JLabel(java.lang.String)')): [6, -10.743805557489395], (('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False, False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()', 'javax.swing.JLabel.JLabel(java.lang.String)')): [3, -13.918471813201904], (('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Toolkit.getDefaultToolkit()')): [9, -6.088167190551758], (('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)'), (False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'javax.swing.JLabel.JLabel(java.lang.String)')): [18, -3.4674437642097473], (('DSubTree', 'javax.swing.JFrame.JFrame(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('javax.swing.JFrame.JFrame(java.lang.String)', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JLabel.JLabel(java.lang.String)')): [11, -4.628893181681633]}

counter: 5
num skipped: 0
{'include': ['java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [8, -18.70270651206374], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [9, -7.534619063138962], (('DSubTree', 'java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False, False, False), ('java.io.StringReader.StringReader(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)')): [33, -9.99453318119049]}

counter: 10
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)', 'java.lang.Double.parseDouble(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.Double.parseDouble(java.lang.String)')): [18, -7.4011805057525635], (('DSubTree', 'java.lang.String.indexOf(int,int)', 'java.lang.Double.parseDouble(java.lang.String)'), (False, False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop')): [6, -11.871484816074371], (('DSubTree', 'java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)'), (False, False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)', 'java.lang.Double.parseDouble(java.lang.String)')): [17, -4.591806464828551], (('DSubTree', 'java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)', 'java.lang.Double.parseDouble(java.lang.String)'), (False, False, False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.String.charAt(int)')): [9, -9.443940341472626]}

counter: 15
num skipped: 0
{'include': ['java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False), ('java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)')): [17, -11.219127976801246], (('DSubTree', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)'), (False, False, False), ('java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'DStop')): [17, -8.439420125447214], (('DSubTree', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.lang.StackTraceElement.getClassName()', 'java.lang.Class<Tau_T>.getName()'), (False, False, False, False, False), ('java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.lang.StackTraceElement.getClassName()', 'java.lang.Class<Tau_T>.getName()', 'DStop')): [16, -13.5106398408534]}

counter: 20
num skipped: 0
{'include': ['javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'DStop')): [3, -19.64330765604973], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'DStop')): [8, -15.762442737817764], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)')): [19, -11.598010253161192], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringWriter.StringWriter()'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)')): [12, -12.972228318452835], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'DStop')): [4, -9.233609408140182], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.StringWriter.StringWriter()'), (False, False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)')): [4, -8.199752539396286]}

counter: 25
num skipped: 0
{'include': ['java.lang.Math.random()', 'java.lang.Long.toString(long)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.random()'), (False, False), ('java.lang.Math.random()', 'java.lang.Long.toString(long)')): [7, -6.000596582889557], (('DSubTree', 'java.lang.Math.random()', 'java.lang.Long.toString(long)'), (False, False, False), ('java.lang.Math.random()', 'java.lang.Long.toString(long)', 'DStop')): [8, -4.349185258150101], (('DSubTree', 'java.lang.Math.random()', 'java.lang.Math.round(double)'), (False, False, False), ('java.lang.Math.random()', 'java.lang.Math.round(double)', 'java.lang.Long.toString(long)')): [10, -3.1649424731731415], (('DSubTree', 'java.lang.Math.random()', 'java.lang.Math.round(double)', 'java.lang.Long.toString(long)'), (False, False, False, False), ('java.lang.Math.random()', 'java.lang.Math.round(double)', 'java.lang.Long.toString(long)', 'DStop')): [25, -5.218566669151187]}

counter: 30
num skipped: 0
{'include': ['java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.append(int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.append(int)'), (False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.append(int)', 'DStop')): [25, -17.768925948999822], (('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)'), (False, False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'DStop')): [4, -9.78972852230072], (('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [8, -12.000768899917603], (('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [8, -11.382167369127274], (('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.String.length()'), (False, False, False, False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.String.length()', 'DStop')): [3, -13.932318147271872], (('DSubTree', 'java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.append(int)'), (False, False, False, False, False, False), ('java.lang.Integer.toHexString(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.lang.String.length()', 'java.lang.StringBuilder.append(int)', 'DStop')): [2, -12.471132770180702]}

counter: 35
num skipped: 1
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)'), (False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()')): [8, -11.738531589508057], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.group()', 'java.util.regex.Pattern.compile(java.lang.String,int)')): [42, -8.751371398568153]}

counter: 40
num skipped: 1
{'include': ['DBranch', 'java.awt.geom.Point2D.getX()'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Math.abs(float)', 'java.awt.geom.Point2D.getX()', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.geom.Point2D.getX()', 'java.lang.Math.abs(float)', 'DStop', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -14.719452857971191]}

counter: 45
num skipped: 1
{'include': ['java.util.regex.Matcher.find()', 'java.lang.Double.valueOf(java.lang.String)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Matcher.find()'), (False, False), ('java.util.regex.Matcher.find()', 'java.lang.Double.valueOf(java.lang.String)')): [3, -6.539237022399902], (('DSubTree', 'java.util.regex.Matcher.find()', 'java.lang.Double.valueOf(java.lang.String)'), (False, False, False), ('java.util.regex.Matcher.find()', 'java.lang.Double.valueOf(java.lang.String)', 'DStop')): [34, -6.285501807928085], (('DSubTree', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.Double.valueOf(java.lang.String)'), (False, False, False, False), ('java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.Double.valueOf(java.lang.String)', 'DStop')): [13, -9.945310652256012]}

counter: 50
num skipped: 2
{'include': ['java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)')): [1, -7.047661304473877], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Throwable.getMessage()')): [15, -11.399590492248535], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Throwable.getMessage()'), (False, False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.lang.Throwable.getMessage()', 'DStop')): [2, -12.287019826471806], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [1, -10.800950407981873], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.read(byte[],int,int)'), (False, False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.read(byte[],int,int)', 'DStop')): [18, -12.057740926742554], (('DSubTree', 'java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.InputStream.available()', 'java.lang.String.String(byte[],int,int)', 'java.io.InputStream.read(byte[],int,int)')): [13, -7.450152575969696]}

counter: 55
num skipped: 2
{'include': ['java.awt.BorderLayout.BorderLayout()', 'javax.swing.JLabel.JLabel()'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.BorderLayout.BorderLayout()'), (False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.JLabel.JLabel()')): [5, -7.508807003498077], (('DSubTree', 'javax.swing.JLabel.JLabel()'), (False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.BorderLayout.BorderLayout()')): [3, -8.218911051750183], (('DSubTree', 'javax.swing.JLabel.JLabel()', 'java.awt.BorderLayout.BorderLayout()'), (False, False, False), ('javax.swing.JLabel.JLabel()', 'java.awt.BorderLayout.BorderLayout()', 'DStop')): [36, -3.301382614299655], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'javax.swing.JLabel.JLabel()'), (False, False, False), ('java.awt.BorderLayout.BorderLayout()', 'javax.swing.JLabel.JLabel()', 'DStop')): [6, -3.6307813096791506]}

counter: 60
num skipped: 2
{'include': ['DBranch', 'java.util.HashMap.get(java.lang.Object)'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.HashMap.get(java.lang.Object)', 'java.lang.Double.parseDouble(java.lang.String)', 'java.util.HashMap.get(java.lang.Object)', '$NOT$java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.HashMap.get(java.lang.Object)', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -7.379556655883789]}

counter: 65
num skipped: 2
{'include': ['java.lang.StackTraceElement.getClassName()', '$NOT$java.lang.String.startsWith(java.lang.String)'], 'exclude': ['DLoop'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StackTraceElement.getClassName()', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.lang.StackTraceElement.getClassName()', 'java.lang.String.split(java.lang.String)', '$NOT$java.lang.String.startsWith(java.lang.String)')): [5, -19.623697519302368], (('DSubTree', 'java.lang.StackTraceElement.getClassName()'), (False, False), ('java.lang.StackTraceElement.getClassName()', '$NOT$java.lang.String.startsWith(java.lang.String)')): [39, -13.156294822692871], (('DSubTree', 'java.lang.StackTraceElement.getClassName()', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False, False), ('java.lang.StackTraceElement.getClassName()', '$NOT$java.lang.String.startsWith(java.lang.String)', 'DStop')): [6, -3.740986220538616]}

counter: 70
num skipped: 2
{'include': ['java.lang.reflect.Field.getType()', 'java.lang.Class.isPrimitive()'], 'exclude': ['DExcept'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getType()'), (False, False), ('java.lang.reflect.Field.getType()', 'java.lang.Class.isPrimitive()')): [1, -18.96751880645752], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()')): [35, -18.98201334476471], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()'), (False, False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class.isPrimitive()', 'DStop')): [14, -10.383147664833814]}

counter: 75
num skipped: 2
{'include': ['java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.BasicStroke.BasicStroke(float)'], 'exclude': ['DBranch'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'java.awt.BasicStroke.BasicStroke(float)')): [2, -7.122232437133789], (('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)'), (False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)')): [41, -6.316543813794851], (('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'DStop')): [7, -8.732640288770199]}
