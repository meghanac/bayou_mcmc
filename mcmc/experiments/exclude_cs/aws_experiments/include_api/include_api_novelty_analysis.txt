data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_api
label: novelty
num test programs: 1000


counter: 0
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()'), (False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()')): [4, -26.543189525604248], (('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()')): [2, -16.866397857666016], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.awt.event.MouseEvent.getClickCount()')): [34, -15.75731897354126], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [10, -11.97395692646387]}

counter: 5
num skipped: 0
{'include': ['java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.Field.get(java.lang.Object)')): [7, -14.633463382720947], (('DSubTree', 'java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False), ('java.lang.Class.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)')): [43, -14.191448450088501]}

counter: 10
num skipped: 0
{'include': ['java.util.Locale.getDefault()', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)'), (False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.util.Locale.getDefault()')): [41, -15.679046154022217], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)'), (False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'java.util.Locale.getDefault()')): [1, -21.72181224822998], (('DSubTree', 'javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.util.Locale.getDefault()'), (False, False, False), ('javax.imageio.ImageIO.getImageWritersByFormatName(java.lang.String)', 'java.util.Locale.getDefault()', 'java.util.Locale.getDefault()')): [8, -6.646475821733475]}

counter: 15
num skipped: 0
{'include': ['java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readBoolean()'), (False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()')): [3, -27.540955543518066], (('DSubTree', 'java.io.DataInput.readUTF()'), (False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()')): [6, -13.479584813117981], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()', 'DStop')): [41, -14.936110134680348]}

counter: 20
num skipped: 0
{'include': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.readInt()')): [2, -16.152372121810913], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()')): [1, -15.10576343536377], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'DStop')): [1, -10.393727093935013], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [6, -11.872900910675526], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.FileInputStream.close()'), (False, False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.FileInputStream.close()', 'DStop')): [17, -8.376350916922092], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.FileInputStream.close()')): [17, -8.540939008817077], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.close()')): [6, -8.049666807055473]}

counter: 25
num skipped: 0
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)'), (False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()')): [5, -15.490448236465454], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()'), (False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Boolean.booleanValue()', 'DStop')): [45, -15.638015637174249]}

counter: 30
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [13, -17.316317319869995], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [5, -18.175085966824554], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)')): [19, -5.575219810009003], (('DSubTree', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'DStop')): [13, -5.219584001228213]}

counter: 35
num skipped: 0
{'include': ['java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.getStackTrace()'), (False, False), ('java.lang.Throwable.getStackTrace()', 'java.lang.StackTraceElement.getClassName()')): [3, -17.318934440612793], (('DSubTree', 'java.lang.StackTraceElement.getClassName()'), (False, False), ('java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.getStackTrace()')): [41, -10.537390232086182], (('DSubTree', 'java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.getStackTrace()'), (False, False, False), ('java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.getStackTrace()', 'DStop')): [6, -9.610256813466549]}

counter: 40
num skipped: 0
{'include': ['java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String)'), (False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [23, -13.780112028121948], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()'), (False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()', 'DStop')): [10, -11.022946834564209], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Class<Tau_T>.getSimpleName()'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Class<Tau_T>.getSimpleName()', 'java.util.concurrent.CountDownLatch.await()')): [2, -16.403902769088745], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.net.URI.URI(java.lang.String)'), (False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [3, -16.908167866058648], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.String.String(java.lang.String)', 'java.net.URI.URI(java.lang.String)'), (False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.String.String(java.lang.String)', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [2, -19.020604759454727], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.String.String(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.net.URI.URI(java.lang.String)'), (False, False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.String.String(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [10, -20.117091715335846]}

counter: 45
num skipped: 0
{'include': ['java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics2D.draw(java.awt.Shape)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)'), (False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [2, -19.127933979034424], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [14, -13.527467699721456], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [9, -14.181812360882759], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [6, -8.545427948236465], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop')): [3, -13.157906830310822], (('DSubTree', 'java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False, False, False), ('java.awt.Graphics2D.draw(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [16, -11.734085977077484]}

counter: 50
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)'), (False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()')): [40, -12.390484809875488], (('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'), (False, False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'DStop')): [10, -11.430750229861587]}

counter: 55
num skipped: 0
{'include': ['java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)'), (False, False, False), ('java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.append(java.lang.Object)')): [2, -16.639435827732086], (('DSubTree', 'java.lang.StringBuilder.length()'), (False, False), ('java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)')): [11, -9.872737407684326], (('DSubTree', 'java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False), ('java.lang.StringBuilder.length()', 'java.lang.Math.max(int,int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [37, -11.511305332183838]}

counter: 60
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()'), (False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getY()')): [8, -23.941697597503662], (('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()')): [4, -12.514830112457275], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [26, -11.213132100179791], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.lang.StringBuilder.StringBuilder(int)', 'java.awt.event.MouseEvent.getClickCount()', 'DStop')): [12, -13.124857989547309]}

counter: 65
num skipped: 0
{'include': ['java.util.TreeSet<java.lang.String>.TreeSet<String>()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()'), (False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [5, -7.979026794433594], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [7, -6.670233905315399], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [31, -7.282209442928433], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.util.Set<java.lang.String>.add(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.util.Set<java.lang.String>.add(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [7, -11.808486841619015]}

counter: 70
num skipped: 0
{'include': ['java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()'), (False, False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()', 'DStop')): [2, -24.612088796682656], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()', 'DStop')): [10, -10.243793727218872], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.util.LinkedList<Tau_E>.LinkedList()', 'java.io.DataInput.readBoolean()'), (False, False, False, False), ('java.io.DataInput.readUTF()', 'java.util.LinkedList<Tau_E>.LinkedList()', 'java.io.DataInput.readBoolean()', 'DStop')): [12, -18.350153606617823], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.io.DataInput.readBoolean()'), (False, False, False, False), ('java.io.DataInput.readUTF()', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.io.DataInput.readBoolean()', 'DStop')): [26, -14.554692205361789]}

counter: 75
num skipped: 0
{'include': ['java.awt.Component.getBounds()', 'java.awt.Component.setBounds(java.awt.Rectangle)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getBounds()', 'java.awt.Component.setBounds(java.awt.Rectangle)'), (False, False, False), ('java.awt.Component.getBounds()', 'java.awt.Component.setBounds(java.awt.Rectangle)', 'DStop')): [2, -25.709805557504296], (('DSubTree', 'java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.getBounds()'), (False, False, False), ('java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.getBounds()', 'DStop')): [3, -17.24190863966942], (('DSubTree', 'java.awt.Component.setBounds(java.awt.Rectangle)'), (False, False), ('java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.getBounds()')): [5, -8.127965863794088], (('DSubTree', 'java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.getBounds()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False), ('java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.getBounds()', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [40, -14.649941138923168]}

counter: 80
num skipped: 0
{'include': ['java.io.InputStream.available()', 'java.nio.Buffer.position(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.nio.Buffer.position(int)')): [5, -5.98248815536499], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.Buffer.position()'), (False, False, False), ('java.io.InputStream.available()', 'java.nio.Buffer.position()', 'java.nio.Buffer.position(int)')): [9, -11.266618728637695], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.io.InputStream.available()', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position(int)')): [10, -10.833046436309814], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()'), (False, False, False, False), ('java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position(int)')): [6, -12.871610060334206], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.Buffer.position(int)'), (False, False, False, False), ('java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.Buffer.position(int)', 'java.nio.ByteBuffer.array()')): [6, -12.481428980827332], (('DSubTree', 'java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'), (False, False, False), ('java.io.InputStream.available()', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.Buffer.position(int)')): [14, -10.539207756519318]}

counter: 85
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()'), (False, False, False), ('java.lang.RuntimeException.RuntimeException(java.lang.String)', 'java.lang.Throwable.fillInStackTrace()', 'DStop')): [50, -7.0149878934025764]}

counter: 90
num skipped: 0
{'include': ['java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.getPath()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.getPath()', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.getPath()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()')): [3, -9.967799246311188], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()')): [7, -7.234861597418785], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()'), (False, False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'DStop')): [9, -7.470471769571304], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [2, -8.885759890079498], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()'), (False, False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [1, -8.686868250370026], (('DSubTree', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[])')): [6, -12.620862592943013], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.String(byte[])')): [15, -10.390249609947205], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()'), (False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [5, -2.687012940645218], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [1, -6.476288318634033], (('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.File.getPath()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [1, -7.070550754666328]}

counter: 95
num skipped: 0
{'include': ['java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.Collections.unmodifiableList(java.util.List)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.remove(java.lang.Object)'), (False, False), ('java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.Collections.unmodifiableList(java.util.List)')): [3, -3.9781277179718018], (('DSubTree', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.Collections.unmodifiableList(java.util.List)'), (False, False, False), ('java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.Collections.unmodifiableList(java.util.List)', 'DStop')): [47, -5.842845857143402]}

counter: 100
num skipped: 0
{'include': ['java.util.Date.setTime(long)', 'java.text.DateFormat.parse(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.text.DateFormat.parse(java.lang.String)')): [2, -18.9880952835083], (('DSubTree', 'java.text.DateFormat.parse(java.lang.String)'), (False, False), ('java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.setTime(long)')): [1, -14.511601448059082], (('DSubTree', 'java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.setTime(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.setTime(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.parse(java.lang.String)')): [6, -14.96490965783596], (('DSubTree', 'java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.setTime(long)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False, False), ('java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.setTime(long)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.parse(java.lang.String)')): [20, -15.574261546134949], (('DSubTree', 'java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.getTime()', 'java.util.Date.setTime(long)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False, False, False), ('java.text.DateFormat.parse(java.lang.String)', 'java.util.Date.getTime()', 'java.util.Date.setTime(long)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.parse(java.lang.String)')): [21, -11.83521594107151]}

counter: 105
num skipped: 0
{'include': ['java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocate(int)'), (False, False), ('java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()')): [2, -7.06657338142395], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)')): [1, -5.843841791152954], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)'), (False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'DStop')): [14, -4.774973645806313], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'DStop')): [21, -9.505973648279905], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False, False, False), ('java.nio.ByteBuffer.array()', 'java.nio.ByteBuffer.allocate(int)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [4, -14.846682071685791], (('DSubTree', 'java.nio.ByteBuffer.array()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False, False, False), ('java.nio.ByteBuffer.array()', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.nio.ByteBuffer.allocate(int)')): [8, -13.718177497386932]}

counter: 110
num skipped: 0
{'include': ['java.io.FileInputStream.read(byte[])', 'java.io.FileOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileOutputStream.close()')): [5, -17.400810480117798], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.io.FileOutputStream.close()')): [2, -15.52095514535904], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()', 'java.io.FileOutputStream.close()')): [6, -12.874517440795898], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.io.FileInputStream.close()'), (False, False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.io.FileInputStream.close()', 'java.io.FileOutputStream.close()')): [3, -13.22170615196228], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.io.FileInputStream.close()', 'java.io.FileOutputStream.close()'), (False, False, False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.io.FileInputStream.close()', 'java.io.FileOutputStream.close()', 'DStop')): [34, -10.202083706855774]}

counter: 115
num skipped: 0
{'include': ['java.io.StringWriter.StringWriter()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)'), (False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.StringWriter.StringWriter()')): [6, -4.801313936710358], (('DSubTree', 'java.io.StringWriter.StringWriter()'), (False, False), ('java.io.StringWriter.StringWriter()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)')): [8, -5.338648319244385], (('DSubTree', 'java.io.StringWriter.StringWriter()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)'), (False, False, False), ('java.io.StringWriter.StringWriter()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.StringWriter.toString()')): [36, -5.689772300422192]}

counter: 120
num skipped: 1
{'include': ['java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.Point2D.getY()')): [14, -12.903167724609375], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()', 'java.lang.Math.max(double,double)'), (False, False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.lang.Math.max(double,double)', 'java.awt.geom.Point2D.getY()')): [23, -12.181631684303284], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()', 'java.lang.Math.max(double,double)', 'java.awt.geom.Point2D.getY()'), (False, False, False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.lang.Math.max(double,double)', 'java.awt.geom.Point2D.getY()', 'DStop')): [13, -9.57407664693892]}

counter: 125
num skipped: 1
{'include': ['java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()')): [36, -11.3023099899292], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()'), (False, False, False), ('java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DStop')): [14, -14.27516508102417]}

counter: 130
num skipped: 1
{'include': ['java.text.NumberFormat.getInstance()', 'javax.swing.JLabel.setText(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.NumberFormat.getInstance()'), (False, False), ('java.text.NumberFormat.getInstance()', 'javax.swing.JLabel.setText(java.lang.String)')): [1, -8.254370331764221], (('DSubTree', 'java.text.NumberFormat.getInstance()', 'javax.swing.JLabel.setText(java.lang.String)'), (False, False, False), ('java.text.NumberFormat.getInstance()', 'javax.swing.JLabel.setText(java.lang.String)', 'DStop')): [49, -1.0208530514501035]}

counter: 135
num skipped: 1
{'include': ['java.io.RandomAccessFile.seek(long)', 'java.io.RandomAccessFile.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.seek(long)'), (False, False), ('java.io.RandomAccessFile.seek(long)', 'java.io.RandomAccessFile.writeInt(int)')): [8, -27.00080870464444], (('DSubTree', 'java.io.RandomAccessFile.seek(long)', 'java.io.RandomAccessFile.writeInt(int)'), (False, False, False), ('java.io.RandomAccessFile.seek(long)', 'java.io.RandomAccessFile.writeInt(int)', 'DStop')): [42, -24.489926629234105]}

counter: 140
num skipped: 1
{'include': ['java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Collection.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Collection.add(java.lang.Object)')): [24, -4.568559112492949], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [26, -4.3262590598315]}

counter: 145
num skipped: 1
{'include': ['java.math.BigDecimal.BigDecimal(int)', 'java.lang.Float.Float(float)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigDecimal.BigDecimal(int)'), (False, False), ('java.math.BigDecimal.BigDecimal(int)', 'java.lang.Float.Float(float)')): [17, -9.896106719970703], (('DSubTree', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.Float.Float(float)'), (False, False, False), ('java.math.BigDecimal.BigDecimal(int)', 'java.lang.Float.Float(float)', 'DStop')): [33, -11.96578414645046]}

counter: 150
num skipped: 1
{'include': ['java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()'), (False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()', 'DStop')): [12, -10.727370008826256], (('DSubTree', 'java.security.SecureRandom.SecureRandom()'), (False, False), ('java.security.SecureRandom.SecureRandom()', 'java.util.Random.nextLong()')): [38, -9.312483966350555]}

counter: 155
num skipped: 1
{'include': ['java.awt.Color.getRed()', 'java.lang.StringBuilder.append(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.awt.Color.getRed()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(int)')): [2, -14.72848355770111], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()'), (False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.append(int)')): [15, -8.51879370212555], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.toString()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(int)')): [3, -17.374104976654053], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(int)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(int)', 'DStop')): [4, -16.280219480395317], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [4, -7.636145532131195], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.util.Calendar.get(int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.awt.Color.getGreen()', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.awt.Color.getRed()', 'java.util.Calendar.get(int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.awt.Color.getGreen()', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.toString()', 'DStop')): [22, -12.788362205028534]}

counter: 160
num skipped: 1
{'include': ['java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.valueOf(long)'), (False, False), ('java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.toString()')): [50, -4.1392082795500755]}

counter: 165
num skipped: 1
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [2, -19.762298583984375], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [4, -21.999534845352173], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [1, -26.718779802322388], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [20, -27.828902930021286], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [23, -25.761427596211433]}

counter: 170
num skipped: 1
{'include': ['$NOT$java.io.File.isDirectory()', 'java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.isDirectory()'), (False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.deleteOnExit()')): [4, -9.615497827529907], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', '$NOT$java.io.File.isDirectory()')): [1, -7.076190710067749], (('DSubTree', '$NOT$java.io.File.isDirectory()', 'java.io.File.deleteOnExit()', 'java.io.File.getParentFile()'), (False, False, False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.deleteOnExit()', 'java.io.File.getParentFile()', 'java.io.File.getAbsolutePath()')): [10, -10.346221327781677], (('DSubTree', '$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.deleteOnExit()', 'java.io.File.getParentFile()'), (False, False, False, False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.deleteOnExit()', 'java.io.File.getParentFile()', 'java.io.File.getAbsolutePath()')): [1, -14.14406132698059], (('DSubTree', '$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.deleteOnExit()'), (False, False, False, False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.deleteOnExit()', 'java.io.File.getAbsolutePath()')): [17, -10.237623393535614], (('DSubTree', '$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()'), (False, False, False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.deleteOnExit()')): [17, -8.127206265926361]}

counter: 175
num skipped: 1
{'include': ['javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)')): [17, -18.956453800201416], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.ArrayList.ArrayList(java.util.Collection)'), (False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.ArrayList.ArrayList(java.util.Collection)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)')): [12, -21.96950387954712], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.Collections.singleton(Tau_T)'), (False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.Collections.singleton(Tau_T)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)')): [3, -22.290090560913086], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.Collections.singleton(Tau_T)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'), (False, False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.util.Collections.singleton(Tau_T)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'DStop')): [18, -12.092115498555358]}
