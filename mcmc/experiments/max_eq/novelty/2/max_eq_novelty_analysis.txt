data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: max_eq
label: novelty
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.util.Calendar.set(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.Calendar.set(int,int)',)): [20, -7.520264625549316], (('DSubTree', 'java.util.Calendar.set(int,int)'), (False, False), ('java.util.Calendar.set(int,int)', 'DStop')): [9, -8.252447843551636], (('DSubTree', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [16, -7.729336977005005], (('DSubTree', 'java.util.Calendar.set(int,int)'), (False, False), ('java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()')): [5, -8.163914918899536]}

counter: 1
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getX()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.event.MouseEvent.getX()',)): [24, -20.455764770507812], (('DSubTree', 'java.awt.event.MouseEvent.getX()'), (False, False), ('java.awt.event.MouseEvent.getX()', 'java.awt.BasicStroke.BasicStroke(float)')): [6, -14.352766513824463], (('DSubTree', 'java.awt.event.MouseEvent.getX()'), (False, False), ('java.awt.event.MouseEvent.getX()', 'java.lang.Integer.toHexString(int)')): [7, -13.661034107208252], (('DSubTree', 'java.awt.event.MouseEvent.getX()'), (False, False), ('java.awt.event.MouseEvent.getX()', 'java.awt.Graphics.setColor(java.awt.Color)')): [13, -13.280632972717285]}

counter: 2
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()',)): [27, -14.146210670471191], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Integer.toString(int)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.Integer.toString(int)', 'DStop')): [1, -17.610072761774063], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'DStop')): [2, -15.485145568847656], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'DStop')): [4, -14.717165976762772], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()')): [11, -12.813044369220734], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.StringBuilder.StringBuilder()')): [5, -15.545104026794434]}

counter: 3
num skipped: 0
{'include': ['java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()')): [3, -5.811212569475174], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.lang.Thread.interrupt()')): [2, -5.980216950178146], (('DSubTree',), (False,), ('java.lang.Thread.interrupt()',)): [5, -4.809597969055176], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'DStop')): [19, -5.551960706710815], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.join()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()', 'DStop')): [2, -7.24166476726532], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.String.valueOf(long)'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.String.valueOf(long)', 'DStop')): [19, -8.992606692016125]}

counter: 4
num skipped: 0
{'include': ['java.lang.StringBuilder.append(long)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.append(long)',)): [12, -3.8547182083129883], (('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'DStop')): [16, -5.595805013552308], (('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.StringBuilder()')): [17, -6.08619225025177], (('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)')): [4, -5.4648866057395935], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(long)')): [1, -6.187144607305527]}

counter: 5
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [11, -5.183213710784912], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.max(int,int)')): [8, -10.034645795822144], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)')): [4, -9.878300666809082], (('DSubTree', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False), ('java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [10, -5.85491144657135], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.lang.String)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [5, -11.093156099319458], (('DSubTree', 'java.io.File.isDirectory()'), (False, False), ('java.io.File.isDirectory()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [7, -11.080527305603027], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.isDirectory()')): [2, -12.3311767578125], (('DSubTree', 'java.io.File.isDirectory()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False), ('java.io.File.isDirectory()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [3, -3.8108135014772415]}

counter: 6
num skipped: 0
{'include': ['java.lang.String.indexOf(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.indexOf(java.lang.String,int)',)): [39, -1.1265305280685425], (('DSubTree', 'java.lang.String.indexOf(java.lang.String,int)'), (False, False), ('java.lang.String.indexOf(java.lang.String,int)', 'java.lang.String.length()')): [11, -1.0771952271461487]}

counter: 7
num skipped: 0
{'include': ['java.lang.Thread.join()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Thread.join()',)): [7, -6.217008590698242], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'DStop')): [43, -3.6491968110203743]}

counter: 8
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)',)): [17, -7.237524509429932], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.net.URI.URI(java.lang.String)')): [2, -12.550674438476562], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.net.URI.URI(java.lang.String)'), (False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.net.URI.URI(java.lang.String)', 'DStop')): [16, -8.093546582385898], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()'), (False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()', 'DStop')): [8, -10.074088335037231], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [7, -7.203620539046824]}

counter: 9
num skipped: 0
{'include': ['java.io.InputStreamReader.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [17, -13.590190410614014], (('DSubTree', 'java.io.InputStreamReader.close()', 'java.io.File.File(java.lang.String)'), (False, False, False), ('java.io.InputStreamReader.close()', 'java.io.File.File(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [1, -15.47001576423645], (('DSubTree', 'java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)')): [4, -15.389164447784424], (('DSubTree', 'java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.equals(java.lang.Object)')): [15, -18.480674862861633], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStreamReader.close()')): [13, -14.651579290628433]}

counter: 10
num skipped: 0
{'include': ['java.sql.PreparedStatement.execute()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.execute()',)): [14, -3.042386531829834], (('DSubTree', 'java.sql.PreparedStatement.execute()'), (False, False), ('java.sql.PreparedStatement.execute()', 'DStop')): [4, -5.3225158751010895], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)')): [22, -6.169691622257233], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)')): [10, -3.9265502989292145]}

counter: 11
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)',)): [2, -6.611572742462158], (('DSubTree', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False), ('javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [21, -6.285362243652344], (('DSubTree', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False, False), ('javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'DStop')): [1, -4.553224116563797], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [26, -5.2510184943675995]}

counter: 12
num skipped: 0
{'include': ['java.util.zip.ZipEntry.getName()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.zip.ZipEntry.getName()',)): [8, -3.507607936859131], (('DSubTree', 'java.util.zip.ZipEntry.getName()'), (False, False), ('java.util.zip.ZipEntry.getName()', 'DStop')): [42, -3.725641280412674]}

counter: 13
num skipped: 0
{'include': ['java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.setLength(int)',)): [4, -5.967668056488037], (('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(int)')): [14, -2.057876840233803], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(int)')): [2, -7.367241859436035], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(int)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(int)', 'java.lang.StringBuilder.append(java.lang.Object)')): [6, -4.024040907621384], (('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)')): [5, -5.472886919975281], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.toString()')): [16, -4.234023213386536], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)')): [3, -3.203131824731827]}

counter: 14
num skipped: 0
{'include': ['java.lang.Thread.join()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Thread.join()',)): [4, -7.644480228424072], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.math.BigInteger.valueOf(long)')): [12, -11.806917667388916], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)')): [5, -8.245441436767578], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.lang.System.getProperty(java.lang.String)')): [9, -10.540121078491211], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)')): [16, -10.343700408935547], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.lang.Thread.sleep(long)')): [4, -9.047536849975586]}

counter: 15
num skipped: 0
{'include': ['java.awt.Color.getGreen()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.Color.getGreen()',)): [50, -7.710434436798096]}

counter: 16
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.size()',)): [28, -3.446458578109741], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()'), (False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DStop')): [22, -5.451293408870697]}

counter: 17
num skipped: 0
{'include': ['java.util.Calendar.setTimeInMillis(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.io.File.File(java.io.File,java.lang.String)')): [1, -13.059502124786377], (('DSubTree',), (False,), ('java.util.Calendar.setTimeInMillis(long)',)): [11, -11.144930839538574], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Locale.getDefault()')): [2, -14.461738586425781], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'DStop')): [36, -4.778121888637543]}

counter: 18
num skipped: 0
{'include': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)',)): [30, -7.506251811981201], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()')): [15, -8.421899229288101], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ObjectOutputStream.close()')): [5, -10.986725330352783]}

counter: 19
num skipped: 0
{'include': ['javax.swing.JComponent.getHeight()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.swing.JComponent.getHeight()',)): [45, -3.4121010303497314], (('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getWidth()')): [5, -0.5953181236982346]}

counter: 20
num skipped: 0
{'include': ['java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'DStop')): [37, -4.183244585990906], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)')): [7, -5.599569797515869], (('DSubTree',), (False,), ('java.io.File.deleteOnExit()',)): [6, -1.2721538543701172]}

counter: 21
num skipped: 0
{'include': ['java.awt.Color.getRed()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.Color.getRed()',)): [11, -6.3563690185546875], (('DSubTree', 'java.awt.Color.getRed()'), (False, False), ('java.awt.Color.getRed()', 'java.awt.Color.getGreen()')): [39, -6.274355411529541]}

counter: 22
num skipped: 0
{'include': ['java.io.FileWriter.FileWriter(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.FileWriter.FileWriter(java.io.File)',)): [34, -1.0856471061706543], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [16, -1.4243582487106323]}

counter: 23
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.indexOf(int,int)',)): [42, -6.917734622955322], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)')): [8, -7.275105237960815]}

counter: 24
num skipped: 0
{'include': ['java.io.BufferedReader.readLine()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.BufferedReader.readLine()',)): [29, -1.6951653957366943], (('DSubTree', 'java.io.BufferedReader.readLine()'), (False, False), ('java.io.BufferedReader.readLine()', 'DStop')): [21, -3.9087581634521484]}

counter: 25
num skipped: 0
{'include': ['javax.swing.UIManager.getSystemLookAndFeelClassName()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.swing.UIManager.getSystemLookAndFeelClassName()',)): [27, -9.132383346557617], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'java.lang.System.getProperty(java.lang.String)')): [6, -9.034394323825836], (('DSubTree', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False), ('javax.swing.UIManager.getSystemLookAndFeelClassName()', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)')): [17, -9.783687308430672]}

counter: 26
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.mkdir()',)): [1, -11.872690200805664], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'DStop')): [49, -6.692739263176918]}

counter: 27
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)',)): [50, -2.322629451751709]}

counter: 28
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)',)): [2, -10.503340721130371], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [6, -7.54808509349823], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()'), (False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.io.StringWriter.toString()', 'DStop')): [30, -10.135793388821185], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Integer.toHexString(int)'), (False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Integer.toHexString(int)', 'DStop')): [3, -10.739104025065899], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Integer.toHexString(int)')): [6, -10.657732963562012], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Class<>.getName()')): [3, -10.494097709655762]}

counter: 29
num skipped: 0
{'include': ['java.util.Calendar.setTime(java.util.Date)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.setTime(java.util.Date)',)): [14, -4.056886196136475], (('DSubTree', 'java.util.Calendar.setTime(java.util.Date)'), (False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.lang.StringBuffer.StringBuffer()')): [18, -9.424159526824951], (('DSubTree', 'java.util.Calendar.setTime(java.util.Date)'), (False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.lang.String.valueOf(long)')): [3, -6.214449167251587], (('DSubTree', 'java.util.Calendar.setTime(java.util.Date)'), (False, False), ('java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()')): [2, -1.9655470550060272], (('DSubTree', 'java.util.Calendar.getInstance()'), (False, False), ('java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)')): [13, -5.614976420998573]}

counter: 30
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.mkdir()',)): [16, -9.172821998596191], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'DStop')): [20, -11.081940650939941], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.lang.String)')): [8, -7.261639416217804], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.isDirectory()')): [4, -9.410327434539795], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.mkdir()')): [2, -7.239200592041016]}

counter: 31
num skipped: 0
{'include': ['java.util.regex.Pattern.quote(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.regex.Pattern.quote(java.lang.String)',)): [25, -3.2120299339294434], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)'), (False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.lang.String.split(java.lang.String)')): [25, -1.7092176675796509]}

counter: 32
num skipped: 0
{'include': ['javax.swing.JComponent.getHeight()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.swing.JComponent.getHeight()',)): [28, -3.052899122238159], (('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'DStop')): [22, -5.660750389099121]}

counter: 33
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.add(int,int)',)): [30, -5.501526355743408], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'DStop')): [20, -7.199424475431442]}

counter: 34
num skipped: 0
{'include': ['java.net.Socket.getInputStream()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.lang.Thread.sleep(long)')): [2, -3.187685489654541], (('DSubTree',), (False,), ('java.net.Socket.getInputStream()',)): [26, -1.4996856451034546], (('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()')): [7, -1.67302867770195], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()', 'java.lang.Thread.setName(java.lang.String)')): [15, -1.8598487675189972]}

counter: 35
num skipped: 0
{'include': ['java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(char)')): [5, -6.873697757720947], (('DSubTree', 'java.lang.StringBuilder.append(char)'), (False, False), ('java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.setLength(int)')): [7, -5.08948826789856], (('DSubTree',), (False,), ('java.lang.StringBuilder.setLength(int)',)): [38, -2.1730384826660156]}
