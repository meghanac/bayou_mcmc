data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: max_eq
label: novelty
num test programs: 64


counter: 0
num skipped: 0
{'include': ['java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.next()',)): [22, -4.618076801300049], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)')): [5, -5.674644470214844], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)')): [16, -3.338720440864563], (('DSubTree', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)'), (False, False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)')): [7, -4.2448731660842896]}

counter: 1
num skipped: 0
{'include': ['java.util.List.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.List.iterator()',)): [14, -8.688943862915039], (('DSubTree', 'java.util.List.iterator()'), (False, False), ('java.util.List.iterator()', 'java.lang.Throwable.printStackTrace()')): [1, -5.966134309768677], (('DSubTree', 'java.lang.Throwable.printStackTrace()'), (False, False), ('java.lang.Throwable.printStackTrace()', 'java.util.List.iterator()')): [26, -6.913721561431885], (('DSubTree', 'java.lang.Throwable.printStackTrace()', 'java.util.Vector.Vector()'), (False, False, False), ('java.lang.Throwable.printStackTrace()', 'java.util.Vector.Vector()', 'java.util.List.iterator()')): [9, -6.527371972799301]}

counter: 2
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.add(int,int)',)): [9, -7.356091022491455], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getInstance()')): [19, -6.529521465301514], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'DStop')): [22, -5.610976427793503]}

counter: 3
num skipped: 0
{'include': ['java.util.List<java.lang.String>.clear()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.List<java.lang.String>.clear()',)): [5, -7.565450191497803], (('DSubTree', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.isEmpty()'), (False, False, False), ('java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.isEmpty()', 'DStop')): [24, -8.076832994818687], (('DSubTree', 'java.util.List<java.lang.String>.clear()'), (False, False), ('java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.isEmpty()')): [2, -7.202191114425659], (('DSubTree', 'java.util.List<java.lang.String>.clear()'), (False, False), ('java.util.List<java.lang.String>.clear()', 'java.lang.String.split(java.lang.String)')): [3, -8.612205982208252], (('DSubTree', 'java.lang.String.split(java.lang.String)'), (False, False), ('java.lang.String.split(java.lang.String)', 'java.util.List<java.lang.String>.clear()')): [5, -8.742156982421875], (('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.clear()')): [2, -9.114301286637783], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.clear()')): [1, -8.33774709701538], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.clear()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [1, -10.878650084137917], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.clear()')): [4, -5.068433737382293], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Arrays.asList(T[])'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Arrays.asList(T[])', 'java.util.List<java.lang.String>.clear()')): [3, -4.770438492298126]}

counter: 4
num skipped: 0
{'include': ['java.io.InputStreamReader.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.InputStreamReader.close()',)): [11, -7.1623430252075195], (('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'java.util.List<java.io.File>.add(java.io.File)')): [2, -10.24670934677124], (('DSubTree', 'java.io.InputStreamReader.close()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.io.InputStreamReader.close()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)')): [11, -10.594165205955505], (('DSubTree', 'java.io.InputStreamReader.close()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.io.InputStreamReader.close()', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [1, -11.78727275133133], (('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'java.io.File.File(java.io.File,java.lang.String)')): [14, -10.8459792137146], (('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'java.io.File.File(java.lang.String)')): [9, -11.489365816116333], (('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [2, -9.38118839263916]}

counter: 5
num skipped: 0
{'include': ['$NOT$java.io.File.canRead()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('$NOT$java.io.File.canRead()',)): [33, -6.332037925720215], (('DSubTree', '$NOT$java.io.File.canRead()'), (False, False), ('$NOT$java.io.File.canRead()', 'java.io.File.toURI()')): [17, -4.744397113099694]}

counter: 6
num skipped: 0
{'include': ['java.sql.ResultSet.getString(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.sql.ResultSet.getString(java.lang.String)',)): [32, -2.7769861221313477], (('DSubTree', 'java.sql.ResultSet.getString(java.lang.String)'), (False, False), ('java.sql.ResultSet.getString(java.lang.String)', 'DStop')): [18, -1.7547883875668049]}

counter: 7
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.Integer>.get(int)',)): [26, -11.762242317199707], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [24, -9.039594240486622]}

counter: 8
num skipped: 0
{'include': ['java.lang.StringBuffer.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.setLength(int)',)): [6, -8.039817810058594], (('DSubTree', 'java.lang.StringBuffer.setLength(int)'), (False, False), ('java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(java.lang.Object)')): [2, -5.47615909576416], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.setLength(int)')): [5, -6.755093693733215], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.setLength(int)'), (False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(java.lang.String)')): [5, -6.85789281129837], (('DSubTree', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.setLength(int)')): [32, -8.394537329673767]}

counter: 9
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.size()',)): [7, -4.964086532592773], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()'), (False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DStop')): [43, -7.6519239991903305]}

counter: 10
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.close()',)): [28, -5.673721790313721], (('DSubTree', 'java.io.ByteArrayOutputStream.close()'), (False, False), ('java.io.ByteArrayOutputStream.close()', 'java.lang.String.lastIndexOf(java.lang.String)')): [22, -5.709221452474594]}

counter: 11
num skipped: 0
{'include': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)',)): [35, -3.4806466102600098], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()')): [3, -3.3060764148831367], (('DSubTree', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)'), (False, False), ('java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DStop')): [12, -4.758399248123169]}

counter: 12
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.get(int)',)): [11, -7.2897796630859375], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [24, -3.7336170971393585], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.lang.String.indexOf(java.lang.String)')): [15, -5.625628709793091]}

counter: 13
num skipped: 0
{'include': ['java.io.ObjectInputStream.readObject()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ObjectInputStream.readObject()',)): [12, -10.737947463989258], (('DSubTree', 'java.io.ObjectInputStream.readObject()'), (False, False), ('java.io.ObjectInputStream.readObject()', 'java.nio.ByteBuffer.array()')): [23, -7.690793514251709], (('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'java.io.ObjectInputStream.readObject()')): [6, -7.310490012168884], (('DSubTree', 'java.io.ObjectInputStream.readObject()'), (False, False), ('java.io.ObjectInputStream.readObject()', 'DStop')): [9, -3.0328593105077744]}

counter: 14
num skipped: 0
{'include': ['java.util.List<java.lang.Object>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.Object>.get(int)',)): [40, -3.058440685272217], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)'), (False, False), ('java.util.List<java.lang.Object>.get(int)', 'DStop')): [4, -6.023872375488281], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)'), (False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [6, -2.497652903199196]}

counter: 15
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()',)): [28, -13.818121910095215], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.lang.System.getProperty(java.lang.String)')): [7, -19.5326566696167], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.Arrays.asList(T[])'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.Arrays.asList(T[])', 'java.util.List<java.lang.String>.size()')): [5, -15.218679547309875], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.List<java.lang.String>.size()')): [1, -13.55986499786377], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.util.HashSet<java.lang.String>.HashSet<String>()')): [4, -13.44970989227295], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.io.File.File(java.lang.String)')): [2, -10.037192583084106], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()', 'java.io.File.File(java.lang.String)')): [3, -10.314581573009491]}

counter: 16
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.get(int)',)): [7, -8.839330673217773], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [43, -5.399863556027412]}

counter: 17
num skipped: 0
{'include': ['java.util.Date.setTime(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Date.setTime(long)',)): [21, -16.690759658813477], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.lang.Long.valueOf(long)')): [1, -11.440151333808899], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'DStop')): [28, -9.171242594718933]}

counter: 18
num skipped: 0
{'include': ['java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'DStop')): [1, -5.2081413716077805], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [49, -9.163106113672256]}

counter: 19
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.Integer>.size()',)): [50, -2.8856394290924072]}

counter: 20
num skipped: 0
{'include': ['java.util.Random.nextBytes(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Random.nextBytes(byte[])',)): [13, -10.205347061157227], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'DStop')): [4, -8.81469376385212], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [8, -8.562079191207886], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Random.nextBytes(byte[])')): [6, -13.772099494934082], (('DSubTree', 'java.util.Random.Random()'), (False, False), ('java.util.Random.Random()', 'java.util.Random.nextBytes(byte[])')): [19, -8.192161120474339]}

counter: 21
num skipped: 0
{'include': ['java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)',)): [5, -11.647361755371094], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'DStop')): [27, -10.430659085512161], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Calendar.getTime()')): [17, -12.858481228351593], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Calendar.getTime()'), (False, False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.text.DateFormat.format(java.util.Date)')): [1, -8.900352701544762]}

counter: 22
num skipped: 0
{'include': ['javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilder.newDocument()'), (False, False), ('javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.trim()')): [4, -13.848080158233643], (('DSubTree',), (False,), ('javax.xml.parsers.DocumentBuilder.newDocument()',)): [42, -9.033110618591309], (('DSubTree', 'javax.xml.parsers.DocumentBuilder.newDocument()'), (False, False), ('javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.equals(java.lang.Object)')): [4, -10.397162079811096]}

counter: 23
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getY()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.awt.event.MouseEvent.getY()',)): [2, -0.32724031805992126], (('DSubTree', 'java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()'), (False, False, False), ('java.awt.event.MouseEvent.getY()', 'java.awt.event.MouseEvent.getX()', 'DStop')): [48, -1.9053706526756287]}

counter: 24
num skipped: 0
{'include': ['java.io.BufferedWriter.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.BufferedWriter.close()',)): [7, -5.082143306732178], (('DSubTree', 'java.io.BufferedWriter.close()'), (False, False), ('java.io.BufferedWriter.close()', 'java.io.File.getPath()')): [5, -7.335345566272736], (('DSubTree', 'java.io.BufferedWriter.close()', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.io.BufferedWriter.close()', 'java.lang.StringBuilder.StringBuilder()', 'java.io.File.getPath()')): [38, -5.680797457695007]}

counter: 25
num skipped: 0
{'include': ['java.util.regex.Matcher.group(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.regex.Matcher.group(int)',)): [20, -5.359035968780518], (('DSubTree', 'java.util.regex.Matcher.group(int)'), (False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.Integer.parseInt(java.lang.String)')): [3, -6.420482158660889], (('DSubTree', 'java.util.regex.Matcher.group(int)'), (False, False), ('java.util.regex.Matcher.group(int)', 'DStop')): [7, -5.643816828727722], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)')): [11, -8.468222856521606], (('DSubTree', 'java.util.regex.Matcher.group(int)'), (False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.split(java.lang.String)')): [9, -2.719974994659424]}

counter: 26
num skipped: 0
{'include': ['java.util.regex.Matcher.group(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.regex.Matcher.group(int)',)): [1, -1.9666794538497925], (('DSubTree', 'java.util.regex.Matcher.group(int)'), (False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.substring(int)')): [48, -2.5745997428894043], (('DSubTree', 'java.util.regex.Matcher.group(int)', 'java.lang.String.substring(int,int)'), (False, False, False), ('java.util.regex.Matcher.group(int)', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)')): [1, -7.530248999595642]}

counter: 27
num skipped: 0
{'include': ['java.sql.PreparedStatement.execute()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.execute()',)): [18, -10.4558687210083], (('DSubTree', 'java.sql.PreparedStatement.execute()'), (False, False), ('java.sql.PreparedStatement.execute()', 'DStop')): [14, -5.770827770233154], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.lang.String.length()'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.lang.String.length()', 'DStop')): [6, -10.352680921554565], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.lang.String.toUpperCase()'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.lang.String.toUpperCase()', 'DStop')): [12, -4.283589869737625]}

counter: 28
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.charAt(int)')): [1, -9.297595977783203], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int)')): [4, -4.471663773059845], (('DSubTree',), (False,), ('java.lang.String.indexOf(int,int)',)): [45, -0.6778635382652283]}

counter: 29
num skipped: 0
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.setString(int,java.lang.String)',)): [42, -2.4964616298675537], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)')): [7, -2.6910816244781017], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.lang.Integer.toString()')): [1, -12.126740455627441]}

counter: 30
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.size()',)): [28, -2.742278575897217], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()'), (False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DStop')): [22, -1.2946063885465264]}

counter: 31
num skipped: 0
{'include': ['java.awt.Graphics.fillRect(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.Graphics.fillRect(int,int,int,int)',)): [1, -8.949010848999023], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)')): [7, -3.356233060359955], (('DSubTree', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False), ('java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)')): [42, -3.198413625359535]}

counter: 32
num skipped: 0
{'include': ['java.sql.ResultSet.getString(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.sql.ResultSet.getString(java.lang.String)',)): [10, -2.836088180541992], (('DSubTree', 'java.sql.ResultSet.getString(java.lang.String)'), (False, False), ('java.sql.ResultSet.getString(java.lang.String)', 'java.lang.Integer.Integer(java.lang.String)')): [40, -3.604353904724121]}

counter: 33
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.Integer>.size()',)): [31, -6.4060492515563965], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.size()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.size()', 'DStop')): [14, -7.559192895889282], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.size()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [5, -1.4631752669811249]}

counter: 34
num skipped: 0
{'include': ['java.awt.Color.getBlue()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.awt.Color.getBlue()',)): [22, -12.443367958068848], (('DSubTree', 'java.awt.Color.getBlue()'), (False, False), ('java.awt.Color.getBlue()', 'DStop')): [10, -12.666205316781998], (('DSubTree', 'java.awt.Color.getBlue()', 'java.lang.String.valueOf(double)'), (False, False, False), ('java.awt.Color.getBlue()', 'java.lang.String.valueOf(double)', 'DStop')): [4, -14.997403469635174], (('DSubTree', 'java.awt.Color.getBlue()'), (False, False), ('java.awt.Color.getBlue()', 'java.lang.String.valueOf(double)')): [14, -12.31731367111206]}

counter: 35
num skipped: 0
{'include': ['java.util.Date.setTime(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.math.BigInteger.BigInteger(java.lang.String)')): [7, -17.972572803497314], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.lang.Throwable.printStackTrace()')): [2, -14.144630432128906], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [5, -17.98124361038208], (('DSubTree',), (False,), ('java.util.Date.setTime(long)',)): [4, -13.573408126831055], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'DStop')): [32, -15.166576445102692]}

counter: 36
num skipped: 0
{'include': ['java.awt.image.BufferedImage.createGraphics()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.awt.image.BufferedImage.createGraphics()'), (False, False), ('java.awt.image.BufferedImage.createGraphics()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)')): [3, -5.719979405403137], (('DSubTree',), (False,), ('java.awt.image.BufferedImage.createGraphics()',)): [37, -3.750662326812744], (('DSubTree', 'java.awt.image.BufferedImage.createGraphics()'), (False, False), ('java.awt.image.BufferedImage.createGraphics()', 'java.util.Collection<T>.iterator()')): [10, -9.202665567398071]}

counter: 37
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [22, -5.893265247344971], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()')): [9, -6.728879928588867], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [19, -6.022464275360107]}

counter: 38
num skipped: 0
{'include': ['javax.swing.JComponent.getHeight()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.swing.JComponent.getHeight()',)): [46, -4.371922492980957], (('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'javax.swing.text.JTextComponent.getText()')): [4, -5.367838978767395]}

counter: 39
num skipped: 0
{'include': ['java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.next()',)): [45, -5.115921974182129], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.lang.String.equals(java.lang.Object)')): [3, -10.69385290145874], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)')): [2, -6.016979798674583]}

counter: 40
num skipped: 0
{'include': ['java.io.File.createNewFile()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.createNewFile()',)): [33, -1.9963407516479492], (('DSubTree', 'java.io.File.createNewFile()'), (False, False), ('java.io.File.createNewFile()', 'java.util.Calendar.get(int)')): [17, -3.726715922355652]}

counter: 41
num skipped: 0
{'include': ['java.lang.StringBuffer.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.append(char)',)): [8, -0.6966403126716614], (('DSubTree', 'java.lang.StringBuffer.append(char)'), (False, False), ('java.lang.StringBuffer.append(char)', 'DStop')): [14, -1.7170844972133636], (('DSubTree', 'java.lang.StringBuffer.append(char)'), (False, False), ('java.lang.StringBuffer.append(char)', 'java.lang.StringBuffer.append(java.lang.Object)')): [1, -6.278553485870361], (('DSubTree', 'java.lang.StringBuffer.append(char)'), (False, False), ('java.lang.StringBuffer.append(char)', 'java.lang.StringBuffer.toString()')): [27, -4.131965517997742]}

counter: 42
num skipped: 0
{'include': ['java.util.Calendar.set(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.util.Calendar.set(int,int)'), (False, False), ('java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [16, -8.833930313587189], (('DSubTree', 'java.util.Calendar.getTime()'), (False, False), ('java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)')): [26, -8.527928829193115], (('DSubTree', 'java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)'), (False, False, False), ('java.util.Calendar.getTime()', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTime()')): [8, -7.249321475625038]}

counter: 43
num skipped: 0
{'include': ['javax.xml.bind.JAXBContext.newInstance(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)',)): [50, -1.078943133354187]}

counter: 44
num skipped: 0
{'include': ['java.lang.StringBuilder.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.setLength(int)',)): [3, -2.0646262168884277], (('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()')): [2, -12.486802577972412], (('DSubTree', 'java.lang.StringBuilder.toString()'), (False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)')): [5, -11.92194378376007], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.toString()')): [2, -7.859191954135895], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [4, -4.923750936985016], (('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.append(char)')): [34, -6.927361965179443]}

counter: 45
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.write(byte[],int,int)',)): [17, -7.62807035446167], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', '$NOT$java.lang.Double.isNaN(double)'), (False, False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', '$NOT$java.lang.Double.isNaN(double)', 'DStop')): [28, -17.05914682894945], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', '$NOT$java.lang.Double.isNaN(double)')): [5, -14.000801086425781]}

counter: 46
num skipped: 0
{'include': ['java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'DStop')): [30, -8.636891543865204], (('DSubTree',), (False,), ('java.io.File.deleteOnExit()',)): [8, -4.441734790802002], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'java.io.File.toURI()')): [12, -3.466952681541443]}

counter: 47
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.indexOf(int,int)',)): [17, -1.887418508529663], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'DStop')): [33, -4.181992843747139]}

counter: 48
num skipped: 0
{'include': ['java.sql.Statement.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.Statement.close()',)): [3, -9.437212944030762], (('DSubTree', 'java.sql.Statement.close()'), (False, False), ('java.sql.Statement.close()', 'java.lang.Integer.parseInt(java.lang.String)')): [7, -11.77609920501709], (('DSubTree', 'java.sql.Statement.close()', 'java.lang.String.split(java.lang.String)'), (False, False, False), ('java.sql.Statement.close()', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)')): [40, -9.518078655004501]}

counter: 49
num skipped: 0
{'include': ['java.net.Socket.getInputStream()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.net.Socket.getInputStream()',)): [19, -1.7802491188049316], (('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)')): [7, -1.3094581961631775], (('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()')): [7, -0.6919138133525848], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()', 'DStop')): [17, -5.5691996812820435]}

counter: 50
num skipped: 0
{'include': ['java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)',)): [10, -10.59030818939209], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'DStop')): [6, -9.828384429216385], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date(java.lang.String)'), (False, False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date(java.lang.String)', 'DStop')): [4, -9.862852990627289], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date(java.lang.String)')): [21, -10.612618327140808], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date(java.lang.String)'), (False, False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [9, -9.628606230020523]}

counter: 51
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'DStop')): [3, -4.05701756477356], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.lang.String)')): [5, -6.245464086532593], (('DSubTree', 'java.io.File.File(java.lang.String)'), (False, False), ('java.io.File.File(java.lang.String)', 'java.io.File.mkdir()')): [42, -1.6695206761360168]}

counter: 52
num skipped: 0
{'include': ['java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.getLong(java.lang.String)',)): [1, -8.506484985351562], (('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)'), (False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'DStop')): [4, -6.509939461946487], (('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.Timestamp.Timestamp(long)', 'DStop')): [45, -4.52813248988241]}

counter: 53
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.valueOf(int)')): [3, -12.96526288986206], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.exists()'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.exists()', 'java.lang.String.valueOf(int)')): [6, -11.330965757369995], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.exists()')): [3, -8.538024425506592], (('DSubTree', 'java.io.File.exists()'), (False, False), ('java.io.File.exists()', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [11, -8.036417961120605], (('DSubTree', 'java.awt.Rectangle.Rectangle(int,int,int,int)'), (False, False), ('java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)')): [3, -5.147017747163773], (('DSubTree', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False, False), ('java.awt.Rectangle.Rectangle(int,int,int,int)', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [24, -3.3707851469516754]}

counter: 54
num skipped: 0
{'include': ['java.util.Random.nextBytes(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Random.nextBytes(byte[])',)): [23, -11.3956880569458], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'DStop')): [26, -13.146900668740273], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.io.File.length()')): [1, -7.021540641784668]}

counter: 55
num skipped: 0
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.setString(int,java.lang.String)',)): [5, -5.2207465171813965], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)')): [23, -2.841302540153265], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'DStop')): [10, -2.310602679848671], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()')): [12, -3.2552415132522583]}

counter: 56
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'DStop')): [18, -6.311255365610123], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()')): [13, -5.505019247531891], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTime()')): [3, -8.261350631713867], (('DSubTree', 'java.util.Calendar.getTime()'), (False, False), ('java.util.Calendar.getTime()', 'java.util.Calendar.add(int,int)')): [16, -4.709600925445557]}

counter: 57
num skipped: 0
{'include': ['java.io.FileInputStream.read(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.FileInputStream.read(byte[])',)): [7, -5.803244590759277], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()', 'java.io.FileInputStream.read(byte[])')): [8, -5.515359491109848], (('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.FileInputStream.close()')): [5, -6.047093670815229], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.lang.String.String(byte[],int,int)'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.lang.String.String(byte[],int,int)', 'java.io.FileInputStream.close()')): [30, -4.937956288456917]}

counter: 58
num skipped: 0
{'include': ['java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.Thread.interrupt()',)): [12, -3.6324069499969482], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.io.FileReader.FileReader(java.lang.String)')): [25, -8.469973087310791], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.io.File.length()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.io.File.length()', 'java.io.FileReader.FileReader(java.lang.String)')): [1, -12.379715919494629], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.join()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()', 'java.io.FileReader.FileReader(java.lang.String)')): [12, -8.271120131015778]}

counter: 59
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [1, -8.358573913574219], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getName()')): [2, -10.657926321029663], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [1, -10.076077699661255], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()', 'DStop')): [31, -9.27504289150238], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.io.File.getPath()', 'java.lang.Math.min(int,int)')): [3, -15.059769749641418], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)'), (False, False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)', 'java.io.File.getPath()')): [3, -15.201849937438965], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.Math.min(int,int)')): [9, -9.97854995727539]}

counter: 60
num skipped: 0
{'include': ['java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.next()',)): [7, -4.492045879364014], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)')): [26, -4.567115902900696], (('DSubTree', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)'), (False, False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)')): [7, -4.344542294740677], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getInt(java.lang.String)')): [10, -3.0684908628463745]}
