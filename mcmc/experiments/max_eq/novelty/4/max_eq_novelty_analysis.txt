data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: max_eq
label: novelty
num test programs: 19


counter: 0
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.write(byte[],int,int)',)): [8, -10.839137077331543], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop')): [9, -10.62427145242691], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'DStop')): [33, -8.699305951595306]}

counter: 1
num skipped: 0
{'include': ['java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.deleteOnExit()',)): [6, -4.819094657897949], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'DStop')): [44, -5.077216014266014]}

counter: 2
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.indexOf(int,int)',)): [18, -1.4281785488128662], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'DStop')): [32, -1.6202123761177063]}

counter: 3
num skipped: 0
{'include': ['java.sql.Statement.close()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.Statement.close()',)): [8, -10.865044593811035], (('DSubTree', 'java.sql.Statement.close()', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False), ('java.sql.Statement.close()', 'java.lang.String.startsWith(java.lang.String)', 'DStop')): [30, -13.060441970825195], (('DSubTree', 'java.sql.Statement.close()'), (False, False), ('java.sql.Statement.close()', 'DStop')): [12, -3.7921534180641174]}

counter: 4
num skipped: 0
{'include': ['java.net.Socket.getInputStream()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.lang.Thread.Thread(java.lang.Runnable)')): [1, -5.05517840385437], (('DSubTree',), (False,), ('java.net.Socket.getInputStream()',)): [24, -4.318048477172852], (('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)')): [1, -4.211118459701538], (('DSubTree', 'java.net.Socket.getInputStream()'), (False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()')): [11, -2.6786615550518036], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()', 'java.lang.Thread.setName(java.lang.String)')): [3, -4.152615636587143], (('DSubTree', 'java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.net.Socket.getInputStream()', 'java.net.Socket.getOutputStream()', 'java.io.PrintStream.PrintStream(java.io.OutputStream)')): [10, -5.622746147215366]}

counter: 5
num skipped: 0
{'include': ['java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)',)): [4, -11.183300971984863], (('DSubTree', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False), ('java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.getTime()')): [1, -12.61998176574707], (('DSubTree', 'java.util.Date.getTime()'), (False, False), ('java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)')): [7, -6.537700653076172], (('DSubTree', 'java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False), ('java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.Date()')): [1, -9.683854103088379], (('DSubTree', 'java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False), ('java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'DStop')): [33, -10.977479338645935], (('DSubTree', 'java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'), (False, False, False), ('java.util.Date.getTime()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Date.getTime()')): [4, -12.062924355268478]}

counter: 6
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.mkdir()',)): [40, -8.26984691619873], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'DStop')): [9, -5.991086006164551], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.delete()')): [1, -5.6311235427856445]}

counter: 7
num skipped: 0
{'include': ['java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.getLong(java.lang.String)',)): [21, -6.197577953338623], (('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)'), (False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'DStop')): [28, -6.100167453289032], (('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.Long.Long(long)'), (False, False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.Long.Long(long)', 'DStop')): [1, -5.719955667853355]}

counter: 8
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [25, -5.774539470672607], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [25, -5.663666874170303]}

counter: 9
num skipped: 0
{'include': ['java.util.Random.nextBytes(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Random.nextBytes(byte[])',)): [9, -11.614456176757812], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.String.String(byte[])')): [8, -12.680035829544067], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.Throwable.printStackTrace()')): [2, -11.048052787780762], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.util.Collections.singletonList(Tau_T)')): [10, -8.267317414283752], (('DSubTree', 'java.util.Random.nextBytes(byte[])'), (False, False), ('java.util.Random.nextBytes(byte[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [21, -3.8911070823669434]}

counter: 10
num skipped: 0
{'include': ['java.sql.PreparedStatement.setString(int,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'DStop')): [19, -5.284923434257507], (('DSubTree',), (False,), ('java.sql.PreparedStatement.setString(int,java.lang.String)',)): [4, -2.706374168395996], (('DSubTree', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False), ('java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)')): [12, -4.203842103481293], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)')): [15, -2.835836701095104]}

counter: 11
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.add(int,int)',)): [9, -9.866950035095215], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.getTimeInMillis()')): [5, -11.80031543970108], (('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.add(int,int)')): [3, -12.25556755065918], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.add(int,int)')): [16, -10.016155242919922], (('DSubTree', 'java.util.Calendar.getInstance()'), (False, False), ('java.util.Calendar.getInstance()', 'java.util.Calendar.add(int,int)')): [17, -5.976466417312622]}

counter: 12
num skipped: 0
{'include': ['java.io.FileInputStream.read(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.io.FileInputStream.read(byte[])',)): [4, -5.444911003112793], (('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'DStop')): [46, -6.111714631319046]}

counter: 13
num skipped: 0
{'include': ['java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.Thread.interrupt()',)): [8, -3.5792384147644043], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.io.File.length()')): [1, -9.360824584960938], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()')): [1, -9.072850584983826], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.join()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()', 'java.lang.Thread.interrupt()')): [18, -5.680706232786179], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.join()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()', 'java.lang.Thread.start()')): [1, -8.210380390286446], (('DSubTree', 'java.lang.Thread.interrupt()', 'java.lang.Thread.getName()'), (False, False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.getName()', 'java.lang.Thread.start()')): [21, -4.796574950218201]}

counter: 14
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [50, -3.962991714477539]}

counter: 15
num skipped: 0
{'include': ['java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.sql.ResultSet.next()',)): [24, -3.334366798400879], (('DSubTree', 'java.sql.ResultSet.next()'), (False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)')): [12, -3.630231738090515], (('DSubTree', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)'), (False, False, False), ('java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getString(java.lang.String)')): [14, -5.596037894487381]}

counter: 16
num skipped: 0
{'include': ['java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.Thread.interrupt()',)): [6, -5.0030670166015625], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'java.lang.Thread.join()')): [4, -5.543969035148621], (('DSubTree', 'java.lang.Thread.join()'), (False, False), ('java.lang.Thread.join()', 'java.lang.Thread.interrupt()')): [6, -5.569696307182312], (('DSubTree', 'java.lang.Thread.join()', 'java.lang.Thread.start()'), (False, False, False), ('java.lang.Thread.join()', 'java.lang.Thread.start()', 'java.lang.Thread.interrupt()')): [34, -6.6174726486206055]}

counter: 17
num skipped: 0
{'include': ['java.util.List<java.lang.Object>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.Object>.get(int)',)): [17, -9.642780303955078], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)'), (False, False), ('java.util.List<java.lang.Object>.get(int)', 'DStop')): [28, -11.677357584238052], (('DSubTree', 'java.util.List<java.lang.Object>.get(int)'), (False, False), ('java.util.List<java.lang.Object>.get(int)', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)')): [5, -12.06385087966919]}

counter: 18
num skipped: 0
{'include': ['java.lang.StringBuffer.append(int)'], 'exclude': [], 'min_length': 1, 'max_length': 4}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.append(int)',)): [1, -9.308245658874512], (('DSubTree', 'java.lang.StringBuffer.append(int)'), (False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(java.lang.String)')): [2, -10.338982224464417], (('DSubTree', 'java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [1, -8.395570859313011], (('DSubTree', 'java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.toString()'), (False, False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.toString()', 'DStop')): [10, -7.022788539528847], (('DSubTree', 'java.lang.StringBuffer.append(int)'), (False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.toString()')): [12, -5.830624284222722], (('DSubTree', 'java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(char)'), (False, False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(char)', 'java.lang.StringBuffer.toString()')): [23, -6.299672424793243], (('DSubTree', 'java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False), ('java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.toString()')): [1, -6.16033536195755]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.619298245614035, 'relevant_additions': 0.537719298245614, 'meets_constraints': 0.9999999999999996, 'in_set': 0.05263157894736842, 'test_set_relevant_additions': 0.5271929824561403}
