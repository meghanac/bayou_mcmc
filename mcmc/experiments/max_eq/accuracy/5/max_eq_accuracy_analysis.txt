data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: max_eq
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.close()',)): [13, -6.217670440673828], (('DSubTree', 'java.io.ByteArrayOutputStream.close()'), (False, False), ('java.io.ByteArrayOutputStream.close()', 'DStop')): [29, -8.967784943291917], (('DSubTree', 'java.io.ByteArrayOutputStream.close()'), (False, False), ('java.io.ByteArrayOutputStream.close()', 'java.io.StringWriter.StringWriter()')): [8, -3.6734614819288254]}

counter: 1
num skipped: 0
{'include': ['java.io.File.deleteOnExit()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'DStop')): [34, -1.6491119302809238], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'java.io.File.File(java.io.File,java.lang.String)')): [1, -2.8851593732833862], (('DSubTree', 'java.io.File.deleteOnExit()'), (False, False), ('java.io.File.deleteOnExit()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)')): [2, -7.272550106048584], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.deleteOnExit()')): [13, -0.3354540839791298]}

counter: 2
num skipped: 0
{'include': ['java.lang.StringBuffer.length()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree', 'java.lang.StringBuffer.length()'), (False, False), ('java.lang.StringBuffer.length()', 'DStop')): [50, -0.7164323009201325]}

counter: 3
num skipped: 0
{'include': ['java.io.File.listFiles()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.io.File.listFiles()',)): [21, -0.2424907237291336], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.io.File.getName()')): [3, -3.0493828654289246], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.util.Arrays.asList(T[])')): [5, -0.13548390148207545], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.util.ArrayList<Tau_E>.ArrayList()')): [4, -4.717850866727531], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'DStop')): [11, -0.14388760644942522], (('DSubTree', 'java.io.File.listFiles()', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.io.File.listFiles()', '$NOT$java.io.File.isDirectory()', 'DStop')): [2, -1.4314526617527008], (('DSubTree', 'java.io.File.listFiles()', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.io.File.listFiles()', '$NOT$java.io.File.isDirectory()', 'java.io.File.getName()')): [4, -0.35599636286497116]}

counter: 4
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.toByteArray()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.toByteArray()',)): [3, -7.212345600128174], (('DSubTree', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False), ('java.io.ByteArrayOutputStream.toByteArray()', 'DStop')): [47, -5.382035341113806]}

counter: 5
num skipped: 0
{'include': ['javax.swing.text.Element.getEndOffset()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.swing.text.Element.getEndOffset()',)): [21, -1.1749334335327148], (('DSubTree', 'javax.swing.text.Element.getEndOffset()'), (False, False), ('javax.swing.text.Element.getEndOffset()', 'DStop')): [29, -2.872792527079582]}

counter: 6
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.FileInputStream.FileInputStream(java.io.File)',)): [17, -0.332074910402298], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'DStop')): [30, -1.8610781133174896], (('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [3, -2.970067523419857]}

counter: 7
num skipped: 0
{'include': ['javax.swing.JComponent.getHeight()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'javax.swing.JComponent.getHeight()'), (False, False), ('javax.swing.JComponent.getHeight()', 'DStop')): [41, -0.0859062522649765], (('DSubTree',), (False,), ('javax.swing.JComponent.getHeight()',)): [9, -0.9440608024597168]}

counter: 8
num skipped: 0
{'include': ['java.util.ArrayList.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.ArrayList.get(int)'), (False, False), ('java.util.ArrayList.get(int)', 'DStop')): [50, -2.6110997175928787]}

counter: 9
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()'), (False, False), ('java.awt.event.MouseEvent.getClickCount()', 'DStop')): [20, -1.618156237527728], (('DSubTree',), (False,), ('java.awt.event.MouseEvent.getClickCount()',)): [30, -0.9733185768127441]}

counter: 10
num skipped: 0
{'include': ['java.util.Date.setTime(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Date.setTime(long)',)): [10, -2.530085563659668], (('DSubTree', 'java.util.Date.setTime(long)'), (False, False), ('java.util.Date.setTime(long)', 'DStop')): [40, -2.439869910478592]}

counter: 11
num skipped: 0
{'include': ['java.util.List<java.lang.String>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.String>.addAll(java.util.Collection)',)): [13, -0.9514064192771912], (('DSubTree', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'), (False, False), ('java.util.List<java.lang.String>.addAll(java.util.Collection)', 'DStop')): [37, -1.0695310272276402]}

counter: 12
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()',)): [16, -1.5148537158966064], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'DStop')): [29, -1.2665164396166801], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.lang.String.trim()')): [5, -0.8573977947235107]}

counter: 13
num skipped: 0
{'include': ['java.util.Scanner.hasNextLine()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.Scanner.hasNextLine()',)): [39, -3.7395308017730713], (('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'DStop')): [5, -5.677438370883465], (('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.util.Scanner.nextLine()')): [6, -2.0485085248947144]}

counter: 14
num skipped: 0
{'include': ['java.io.File.listFiles()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.io.File.isDirectory()')): [15, -0.7067028656601906], (('DSubTree',), (False,), ('java.io.File.listFiles()',)): [19, -3.2425765991210938], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'DStop')): [9, -0.25672290474176407], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.io.File.getPath()')): [5, -3.8723048865795135], (('DSubTree', 'java.io.File.listFiles()'), (False, False), ('java.io.File.listFiles()', 'java.io.File.File(java.io.File,java.lang.String)')): [2, -3.961913526058197]}

counter: 15
num skipped: 0
{'include': ['java.util.List<java.lang.Long>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.Long>.get(int)',)): [16, -7.381649494171143], (('DSubTree', 'java.util.List<java.lang.Long>.get(int)'), (False, False), ('java.util.List<java.lang.Long>.get(int)', 'DStop')): [34, -0.18533115554600954]}

counter: 16
num skipped: 0
{'include': ['java.lang.Thread.interrupt()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Thread.interrupt()',)): [8, -0.2755327522754669], (('DSubTree', 'java.lang.Thread.interrupt()'), (False, False), ('java.lang.Thread.interrupt()', 'DStop')): [42, -0.4764527305960655]}

counter: 17
num skipped: 0
{'include': ['java.util.StringTokenizer.StringTokenizer(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)',)): [1, -0.12498146295547485], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'), (False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DStop')): [49, -1.1221588347107172]}

counter: 18
num skipped: 0
{'include': ['java.io.InputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.InputStream.close()',)): [8, -0.9688906669616699], (('DSubTree', 'java.io.InputStream.close()'), (False, False), ('java.io.InputStream.close()', 'DStop')): [42, -1.536378595046699]}

counter: 19
num skipped: 0
{'include': ['java.lang.String.toCharArray()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.toCharArray()',)): [10, -0.5521621108055115], (('DSubTree', 'java.lang.String.toCharArray()'), (False, False), ('java.lang.String.toCharArray()', 'DStop')): [40, -0.3345826268196106]}

counter: 20
num skipped: 0
{'include': ['java.util.List.iterator()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.List.iterator()',)): [20, -2.0972185134887695], (('DSubTree', 'java.util.List.iterator()'), (False, False), ('java.util.List.iterator()', 'DStop')): [22, -3.455618515610695], (('DSubTree', 'java.util.List.iterator()', 'java.util.List.size()'), (False, False, False), ('java.util.List.iterator()', 'java.util.List.size()', 'DStop')): [8, -1.8081309162080288]}

counter: 21
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.add(int,int)',)): [1, -0.21740315854549408], (('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'DStop')): [49, -0.7635107673704624]}

counter: 22
num skipped: 0
{'include': ['java.util.Collection.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Collection.addAll(java.util.Collection)',)): [2, -0.18781612813472748], (('DSubTree', 'java.util.Collection.addAll(java.util.Collection)'), (False, False), ('java.util.Collection.addAll(java.util.Collection)', 'DStop')): [48, -0.6761291828006506]}

counter: 23
num skipped: 0
{'include': ['java.util.Collection.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Collection.add(java.lang.Object)',)): [45, -0.3841634690761566], (('DSubTree', 'java.util.Collection.add(java.lang.Object)'), (False, False), ('java.util.Collection.add(java.lang.Object)', 'DStop')): [5, -1.4057491347193718]}

counter: 24
num skipped: 0
{'include': ['java.lang.String.indexOf(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.String.indexOf(int,int)',)): [16, -0.9342527389526367], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.Math.max(int,int)')): [1, -5.258296173065901], (('DSubTree', 'java.lang.String.indexOf(int,int)', 'java.lang.Math.max(int,int)'), (False, False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.Math.max(int,int)', 'java.lang.String.substring(int,int)')): [4, -1.988892823457718], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int,int)')): [2, -0.7126852599903941], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'java.lang.String.substring(int)')): [5, -4.424318061675876], (('DSubTree', 'java.lang.String.indexOf(int,int)'), (False, False), ('java.lang.String.indexOf(int,int)', 'DStop')): [22, -0.3009825153276324]}

counter: 25
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getWidth()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.geom.RectangularShape.getWidth()',)): [32, -1.4268819093704224], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'DStop')): [2, -1.8065118491649628], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.RectangularShape.getHeight()')): [16, -0.4516380038112402]}

counter: 26
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getY()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.awt.event.MouseEvent.getY()'), (False, False), ('java.awt.event.MouseEvent.getY()', 'DStop')): [47, -1.8782418405171484], (('DSubTree',), (False,), ('java.awt.event.MouseEvent.getY()',)): [3, -0.2851952016353607]}

counter: 27
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.size()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.size()',)): [6, -0.32576021552085876], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()'), (False, False), ('java.util.ArrayList<java.lang.String>.size()', 'DStop')): [30, -0.8591065823857207], (('DSubTree', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.String>.size()', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [14, -1.8733191561750573]}

counter: 28
num skipped: 0
{'include': ['java.lang.String.length()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.length()',)): [8, -0.5251635313034058], (('DSubTree', 'java.lang.String.length()'), (False, False), ('java.lang.String.length()', 'DStop')): [42, -0.759396955370903]}

counter: 29
num skipped: 0
{'include': ['java.lang.Integer.parseInt(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Integer.parseInt(java.lang.String)',)): [5, -0.4065243899822235], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [45, -0.4359360933303833]}

counter: 30
num skipped: 0
{'include': ['java.lang.StringBuffer.append(char)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.append(char)',)): [38, -0.1349804848432541], (('DSubTree', 'java.lang.StringBuffer.append(char)'), (False, False), ('java.lang.StringBuffer.append(char)', 'java.lang.StringBuffer.toString()')): [1, -1.0020244270563126], (('DSubTree', 'java.lang.StringBuffer.append(char)'), (False, False), ('java.lang.StringBuffer.append(char)', 'DStop')): [11, -3.8477602005004883]}

counter: 31
num skipped: 0
{'include': ['java.util.List.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List.get(int)',)): [4, -0.0051820483058691025], (('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'DStop')): [46, -0.8429715351376217]}

counter: 32
num skipped: 0
{'include': ['java.io.InputStream.available()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.InputStream.available()',)): [6, -3.642153263092041], (('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'DStop')): [18, -0.33268273167777807], (('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.net.URL.toString()')): [15, -5.67232470959425], (('DSubTree', 'java.net.URL.toString()'), (False, False), ('java.net.URL.toString()', 'java.io.InputStream.available()')): [5, -7.811680316925049], (('DSubTree', 'java.io.InputStream.available()'), (False, False), ('java.io.InputStream.available()', 'java.io.InputStream.read(byte[],int,int)')): [6, -1.8760998472571373]}

counter: 33
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.mkdir()',)): [4, -2.556278705596924], (('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'DStop')): [46, -0.7775003463029861]}

counter: 34
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.io.ByteArrayOutputStream.write(byte[],int,int)',)): [26, -0.34688204526901245], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop')): [17, -0.49393513798713684], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'DStop')): [4, -1.865370586514473], (('DSubTree', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False), ('java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()')): [3, -0.09106534533202648]}

counter: 35
num skipped: 0
{'include': ['java.lang.String.charAt(int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.String.charAt(int)',)): [24, -0.1366756558418274], (('DSubTree', 'java.lang.String.charAt(int)'), (False, False), ('java.lang.String.charAt(int)', 'DStop')): [13, -0.6677876859903336], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'DStop')): [12, -6.059844430536032], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)'), (False, False, False, False), ('java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'DStop')): [1, -2.937953514046967]}

counter: 36
num skipped: 0
{'include': ['java.lang.StringBuffer.toString()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.toString()',)): [21, -0.7329646348953247], (('DSubTree', 'java.lang.StringBuffer.toString()'), (False, False), ('java.lang.StringBuffer.toString()', 'DStop')): [29, -0.5444253279129043]}

counter: 37
num skipped: 0
{'include': ['java.io.File.File(java.io.File,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.File.File(java.io.File,java.lang.String)',)): [5, -1.0114169120788574], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [44, -0.8479247251525521], (('DSubTree', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False), ('java.io.File.File(java.io.File,java.lang.String)', 'java.lang.Throwable.printStackTrace()')): [1, -3.2557765431702137]}

counter: 38
num skipped: 0
{'include': ['java.lang.Class.forName(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Class.forName(java.lang.String)',)): [19, -2.1435751914978027], (('DSubTree', 'java.lang.Class.forName(java.lang.String)'), (False, False), ('java.lang.Class.forName(java.lang.String)', 'DStop')): [31, -1.3286785595119]}

counter: 39
num skipped: 0
{'include': ['java.util.ArrayList.size()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList.size()',)): [16, -0.7776680588722229], (('DSubTree', 'java.util.ArrayList.size()'), (False, False), ('java.util.ArrayList.size()', 'DStop')): [34, -1.7859338060952723]}

counter: 40
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.Calendar.add(int,int)'), (False, False), ('java.util.Calendar.add(int,int)', 'DStop')): [43, -0.8294986039400101], (('DSubTree',), (False,), ('java.util.Calendar.add(int,int)',)): [7, -0.3628039062023163]}

counter: 41
num skipped: 0
{'include': ['java.util.Map.put(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.Map.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.Map.put(java.lang.Object,java.lang.Object)', 'DStop')): [42, -0.7831416522385553], (('DSubTree',), (False,), ('java.util.Map.put(java.lang.Object,java.lang.Object)',)): [8, -1.0764042139053345]}

counter: 42
num skipped: 0
{'include': ['java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)',)): [9, -1.7784297466278076], (('DSubTree', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False), ('java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'DStop')): [41, -1.17243325405434]}

counter: 43
num skipped: 0
{'include': ['java.util.StringTokenizer.nextToken()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.StringTokenizer.nextToken()',)): [18, -2.7509913444519043], (('DSubTree', 'java.util.StringTokenizer.nextToken()'), (False, False), ('java.util.StringTokenizer.nextToken()', 'DStop')): [32, -1.9220504267141223]}

counter: 44
num skipped: 0
{'include': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)',)): [9, -0.5291433930397034], (('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'DStop')): [10, -0.4479944407939911], (('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.TimeZone.getTimeZone(java.lang.String)')): [31, -0.4055324690416455]}

counter: 45
num skipped: 0
{'include': ['java.io.OutputStreamWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.OutputStreamWriter.flush()'), (False, False), ('java.io.OutputStreamWriter.flush()', 'DStop')): [43, -2.418938919901848], (('DSubTree',), (False,), ('java.io.OutputStreamWriter.flush()',)): [7, -0.0724925771355629]}

counter: 46
num skipped: 0
{'include': ['$NOT$java.io.File.isDirectory()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('$NOT$java.io.File.isDirectory()',)): [3, -2.518981456756592], (('DSubTree', '$NOT$java.io.File.isDirectory()'), (False, False), ('$NOT$java.io.File.isDirectory()', 'DStop')): [40, -1.3545815832912922], (('DSubTree', '$NOT$java.io.File.isDirectory()'), (False, False), ('$NOT$java.io.File.isDirectory()', 'java.io.File.getParentFile()')): [7, -5.6137886717915535]}

counter: 47
num skipped: 0
{'include': ['java.sql.Timestamp.Timestamp(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.sql.Timestamp.Timestamp(long)',)): [14, -2.629955291748047], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)'), (False, False), ('java.sql.Timestamp.Timestamp(long)', 'DStop')): [36, -2.2144191935658455]}

counter: 48
num skipped: 0
{'include': ['java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])',)): [12, -0.18610984086990356], (('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'DStop')): [38, -0.6544860452413559]}

counter: 49
num skipped: 0
{'include': ['java.lang.StringBuilder.append(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.append(long)',)): [8, -0.8298262357711792], (('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'DStop')): [42, -0.3536619716323912]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.19899999999999995, 'relevant_additions': 0.18366666666666662, 'meets_constraints': 1.0000000000000004, 'in_set': 0.02, 'test_set_relevant_additions': 0.16699999999999995}
