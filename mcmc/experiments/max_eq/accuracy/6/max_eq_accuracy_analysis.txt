data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: max_eq
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.List<java.lang.String>.remove(java.lang.Object)'), (False, False), ('java.util.List<java.lang.String>.remove(java.lang.Object)', 'DStop')): [37, -1.7219702517613769], (('DSubTree',), (False,), ('java.util.List<java.lang.String>.remove(java.lang.Object)',)): [13, -0.008323621936142445]}

counter: 1
num skipped: 0
{'include': ['java.util.List<java.lang.String>.clear()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.String>.clear()',)): [30, -0.25131896138191223], (('DSubTree', 'java.util.List<java.lang.String>.clear()'), (False, False), ('java.util.List<java.lang.String>.clear()', 'DStop')): [20, -0.2819526265375316]}

counter: 2
num skipped: 0
{'include': ['java.lang.StringBuilder.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.substring(int,int)',)): [9, -2.4210758209228516], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)'), (False, False), ('java.lang.StringBuilder.substring(int,int)', 'DStop')): [41, -1.0197506910189986]}

counter: 3
num skipped: 0
{'include': ['javax.xml.bind.JAXBContext.createMarshaller()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.xml.bind.JAXBContext.createMarshaller()',)): [10, -2.7803168296813965], (('DSubTree', 'javax.xml.bind.JAXBContext.createMarshaller()'), (False, False), ('javax.xml.bind.JAXBContext.createMarshaller()', 'DStop')): [40, -0.7382960021495819]}

counter: 4
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.get(int)',)): [9, -3.763643980026245], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [40, -3.358918819576502], (('DSubTree', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.get(int)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)')): [1, -10.467221736907959]}

counter: 5
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getWidth()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'java.awt.geom.RectangularShape.getHeight()')): [20, -1.981267735362053], (('DSubTree',), (False,), ('java.awt.geom.RectangularShape.getWidth()',)): [3, -0.12205346673727036], (('DSubTree', 'java.awt.geom.RectangularShape.getWidth()'), (False, False), ('java.awt.geom.RectangularShape.getWidth()', 'DStop')): [27, -0.6396096125245094]}

counter: 6
num skipped: 0
{'include': ['java.lang.Integer.Integer(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.lang.Integer.Integer(int)'), (False, False), ('java.lang.Integer.Integer(int)', 'DStop')): [42, -2.916079342365265], (('DSubTree', 'java.lang.Integer.Integer(int)'), (False, False), ('java.lang.Integer.Integer(int)', 'java.lang.Double.Double(double)')): [8, -1.1568522825837135]}

counter: 7
num skipped: 0
{'include': ['java.sql.PreparedStatement.setInt(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.setInt(int,int)',)): [12, -0.4967603385448456], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'DStop')): [29, -0.23253130167722702], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.executeUpdate()', 'DStop')): [3, -0.39672841964056715], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.executeUpdate()')): [3, -0.30593758821487427], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()')): [3, -2.156414272263646]}

counter: 8
num skipped: 0
{'include': ['java.io.InputStreamReader.close()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.InputStreamReader.close()',)): [5, -0.13529269397258759], (('DSubTree', 'java.io.InputStreamReader.close()'), (False, False), ('java.io.InputStreamReader.close()', 'DStop')): [45, -0.6288304962217808]}

counter: 9
num skipped: 0
{'include': ['java.net.Socket.getOutputStream()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.net.Socket.getOutputStream()',)): [14, -4.613176345825195], (('DSubTree', 'java.net.Socket.getOutputStream()'), (False, False), ('java.net.Socket.getOutputStream()', 'DStop')): [36, -2.990223922068253]}

counter: 10
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)',)): [25, -1.2556202411651611], (('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'), (False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'DStop')): [25, -0.2655937713570893]}

counter: 11
num skipped: 0
{'include': ['java.nio.ByteBuffer.array()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.nio.ByteBuffer.array()'), (False, False), ('java.nio.ByteBuffer.array()', 'DStop')): [50, -0.23170166555792093]}

counter: 12
num skipped: 0
{'include': ['java.util.Vector.addElement(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Vector.addElement(java.lang.Object)',)): [16, -4.878466606140137], (('DSubTree', 'java.util.Vector.addElement(java.lang.Object)'), (False, False), ('java.util.Vector.addElement(java.lang.Object)', 'DStop')): [26, -3.6723214938829187], (('DSubTree', 'java.util.Vector.addElement(java.lang.Object)'), (False, False), ('java.util.Vector.addElement(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)')): [8, -5.004882335662842]}

counter: 13
num skipped: 0
{'include': ['java.lang.StringBuilder.length()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.length()',)): [7, -0.5618382096290588], (('DSubTree', 'java.lang.StringBuilder.length()'), (False, False), ('java.lang.StringBuilder.length()', 'DStop')): [43, -1.953172955662012]}

counter: 14
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuffer.StringBuffer()',)): [10, -1.2335201501846313], (('DSubTree', 'java.lang.StringBuffer.StringBuffer()'), (False, False), ('java.lang.StringBuffer.StringBuffer()', 'DStop')): [40, -0.7072189450263977]}

counter: 15
num skipped: 0
{'include': ['java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.append(java.lang.Object)',)): [13, -3.781200408935547], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False), ('java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [37, -4.052693942561746]}

counter: 16
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)',)): [15, -0.09642960131168365], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'DStop')): [2, -0.6215434223413467], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)')): [2, -6.222656607627869], (('DSubTree', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.lang.String.substring(int)')): [3, -3.8130571842193604], (('DSubTree', 'java.lang.String.substring(int)'), (False, False), ('java.lang.String.substring(int)', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)')): [28, -5.5726065039634705]}

counter: 17
num skipped: 0
{'include': ['java.io.File.length()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.io.File.length()'), (False, False), ('java.io.File.length()', 'DStop')): [44, -0.9479038044810295], (('DSubTree',), (False,), ('java.io.File.length()',)): [6, -0.6845580339431763]}

counter: 18
num skipped: 0
{'include': ['java.awt.geom.AffineTransform.getScaleX()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.awt.geom.AffineTransform.getScaleX()',)): [29, -8.200791358947754], (('DSubTree', 'java.awt.geom.AffineTransform.getScaleX()'), (False, False), ('java.awt.geom.AffineTransform.getScaleX()', 'DStop')): [21, -6.73611196805723]}

counter: 19
num skipped: 0
{'include': ['java.sql.PreparedStatement.setInt(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.sql.PreparedStatement.setInt(int,int)',)): [9, -1.6418657302856445], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'DStop')): [23, -1.1935009500011802], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.close()')): [7, -0.520227711647749], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.close()'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.close()', 'DStop')): [2, -2.0598146514967084], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DStop')): [9, -2.2002500351518393]}

counter: 20
num skipped: 0
{'include': ['javax.imageio.ImageIO.read(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.read(java.io.InputStream)',)): [14, -5.207148551940918], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'DStop')): [35, -1.9507203996181488], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)'), (False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.io.InputStream.close()')): [1, -3.9203699827194214]}

counter: 21
num skipped: 0
{'include': ['java.lang.String.String(byte[],java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.String(byte[],java.lang.String)',)): [12, -2.7874484062194824], (('DSubTree', 'java.lang.String.String(byte[],java.lang.String)'), (False, False), ('java.lang.String.String(byte[],java.lang.String)', 'DStop')): [35, -1.7943183351308107], (('DSubTree', 'java.lang.String.String(byte[],java.lang.String)'), (False, False), ('java.lang.String.String(byte[],java.lang.String)', 'java.io.File.File(java.lang.String)')): [3, -7.737547422060743]}

counter: 22
num skipped: 0
{'include': ['java.lang.String.split(java.lang.String,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.String.split(java.lang.String,int)',)): [11, -0.151564821600914], (('DSubTree', 'java.lang.String.split(java.lang.String,int)'), (False, False), ('java.lang.String.split(java.lang.String,int)', 'DStop')): [31, -2.6629118341952562], (('DSubTree', 'java.lang.String.split(java.lang.String,int)'), (False, False), ('java.lang.String.split(java.lang.String,int)', 'java.lang.Integer.parseInt(java.lang.String)')): [8, -2.0239421986043453]}

counter: 23
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.Collections.sort(java.util.List)')): [3, -0.46994560211896896], (('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)',)): [18, -0.15165220201015472], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'DStop')): [11, -0.09233832359313965], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', '$NOT$java.util.List<java.lang.String>.isEmpty()')): [16, -4.228760480880737], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)')): [2, -0.3859623372554779]}

counter: 24
num skipped: 0
{'include': ['java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'DStop')): [12, -0.5535911023616791], (('DSubTree', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False), ('java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [38, -1.401919273128442]}

counter: 25
num skipped: 0
{'include': ['java.util.zip.ZipEntry.getName()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.zip.ZipEntry.getName()',)): [8, -0.11035094410181046], (('DSubTree', 'java.util.zip.ZipEntry.getName()'), (False, False), ('java.util.zip.ZipEntry.getName()', 'DStop')): [42, -0.5840957388281822]}

counter: 26
num skipped: 0
{'include': ['java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)',)): [29, -1.2644703388214111], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [21, -0.39339566975831985]}

counter: 27
num skipped: 0
{'include': ['java.util.Calendar.setTimeInMillis(long)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.setTimeInMillis(long)',)): [27, -0.5617477297782898], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'DStop')): [22, -1.1764435172080994], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.set(int,int)')): [1, -0.5836353413760662]}

counter: 28
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()',)): [19, -0.8536182641983032], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop')): [31, -2.4713618755340576]}

counter: 29
num skipped: 0
{'include': ['java.lang.String.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.String.substring(int,int)',)): [2, -4.371789932250977], (('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'DStop')): [42, -1.7825358523987234], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int,int)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.lang.String.substring(int,int)', 'DStop')): [6, -1.6761884070001543]}

counter: 30
num skipped: 0
{'include': ['java.lang.String.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.lang.String.substring(int,int)',)): [10, -1.29489266872406], (('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'DStop')): [17, -1.942566268146038], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.lang.String.startsWith(java.lang.String)', 'DStop')): [1, -4.096837864795816], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.lang.String.length()'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.lang.String.length()', 'DStop')): [9, -1.663118064403534], (('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'java.lang.String.length()')): [2, -0.8262349963188171], (('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'java.util.Collection.add(java.lang.Object)')): [4, -6.513394607231021], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [7, -0.2540339273400605]}

counter: 31
num skipped: 0
{'include': ['java.util.List<java.lang.String>.add(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List<java.lang.String>.add(java.lang.String)',)): [20, -3.089813232421875], (('DSubTree', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False), ('java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [30, -0.3975587338209152]}

counter: 32
num skipped: 0
{'include': ['java.util.Iterator.hasNext()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.Iterator.hasNext()',)): [7, -2.5687079429626465], (('DSubTree', 'java.util.Iterator.hasNext()'), (False, False), ('java.util.Iterator.hasNext()', 'DStop')): [43, -0.3457064274698496]}

counter: 33
num skipped: 0
{'include': ['java.util.Calendar.getInstance()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Calendar.getInstance()',)): [19, -0.07075612246990204], (('DSubTree', 'java.util.Calendar.getInstance()'), (False, False), ('java.util.Calendar.getInstance()', 'DStop')): [29, -1.5055000931024551], (('DSubTree', 'java.util.Calendar.getInstance()'), (False, False), ('java.util.Calendar.getInstance()', 'java.sql.Timestamp.Timestamp(long)')): [2, -1.5427030324935913]}

counter: 34
num skipped: 0
{'include': ['java.util.Random.Random()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.Random.Random()',)): [20, -0.4389643669128418], (('DSubTree', 'java.util.Random.Random()'), (False, False), ('java.util.Random.Random()', 'DStop')): [30, -0.18318352149799466]}

counter: 35
num skipped: 0
{'include': ['javax.swing.JComponent.setMinimumSize(java.awt.Dimension)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)'), (False, False), ('javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'DStop')): [42, -1.7389485816165688], (('DSubTree',), (False,), ('javax.swing.JComponent.setMinimumSize(java.awt.Dimension)',)): [8, -0.16503006219863892]}

counter: 36
num skipped: 0
{'include': ['java.util.Scanner.hasNextLine()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.Scanner.hasNextLine()',)): [1, -2.003201961517334], (('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.split(java.lang.String)')): [8, -3.5290626287460327], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.split(java.lang.String)')): [16, -3.5350052416324615], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.split(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.split(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.split(java.lang.String)')): [25, -4.452489107847214]}

counter: 37
num skipped: 0
{'include': ['java.util.List.get(int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.List.get(int)',)): [8, -0.041796859353780746], (('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'DStop')): [42, -0.1819561868906021]}

counter: 38
num skipped: 0
{'include': ['java.sql.PreparedStatement.executeUpdate()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.sql.PreparedStatement.executeUpdate()'), (False, False), ('java.sql.PreparedStatement.executeUpdate()', 'DStop')): [37, -2.6780283036641777], (('DSubTree',), (False,), ('java.sql.PreparedStatement.executeUpdate()',)): [13, -0.4195629358291626]}

counter: 39
num skipped: 0
{'include': ['java.lang.System.getenv(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.System.getenv(java.lang.String)',)): [9, -0.547307014465332], (('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', 'DStop')): [41, -1.670942097902298]}

counter: 40
num skipped: 0
{'include': ['java.util.ArrayList.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.util.ArrayList.add(java.lang.Object)',)): [20, -0.21414417028427124], (('DSubTree', 'java.util.ArrayList.add(java.lang.Object)'), (False, False), ('java.util.ArrayList.add(java.lang.Object)', 'DStop')): [30, -0.24245560495182872]}

counter: 41
num skipped: 0
{'include': ['javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)',)): [27, -8.603880882263184], (('DSubTree', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'), (False, False), ('javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DStop')): [23, -0.0957490315195173]}

counter: 42
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)',)): [12, -0.035821106284856796], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'DStop')): [20, -0.34332016855478287], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [18, -4.335629850625992]}

counter: 43
num skipped: 0
{'include': ['java.lang.StackTraceElement.getClassName()'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StackTraceElement.getClassName()',)): [5, -0.6207438111305237], (('DSubTree', 'java.lang.StackTraceElement.getClassName()'), (False, False), ('java.lang.StackTraceElement.getClassName()', 'DStop')): [45, -0.7781464010477066]}

counter: 44
num skipped: 0
{'include': ['java.lang.StringBuffer.StringBuffer(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'), (False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'DStop')): [30, -0.8828462511301041], (('DSubTree',), (False,), ('java.lang.StringBuffer.StringBuffer(java.lang.String)',)): [17, -0.18867143988609314], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(java.lang.String)'), (False, False), ('java.lang.StringBuffer.StringBuffer(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)')): [3, -0.3209969103336334]}

counter: 45
num skipped: 0
{'include': ['java.util.regex.Matcher.group()'], 'exclude': [], 'min_length': 1, 'max_length': 6}
{(('DSubTree',), (False,), ('java.util.regex.Matcher.group()',)): [9, -5.5509467124938965], (('DSubTree', 'java.util.regex.Matcher.group()'), (False, False), ('java.util.regex.Matcher.group()', 'DStop')): [16, -4.583788707852364], (('DSubTree', 'java.util.regex.Matcher.group()', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False), ('java.util.regex.Matcher.group()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [9, -4.672084049670957], (('DSubTree', 'java.util.regex.Matcher.group()'), (False, False), ('java.util.regex.Matcher.group()', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [16, -4.143727719783783]}

counter: 46
num skipped: 0
{'include': ['java.security.Signature.initSign(java.security.PrivateKey)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.security.Signature.initSign(java.security.PrivateKey)',)): [31, -1.2522615194320679], (('DSubTree', 'java.security.Signature.initSign(java.security.PrivateKey)'), (False, False), ('java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])')): [2, -1.1344425212591887], (('DSubTree', 'java.security.Signature.initSign(java.security.PrivateKey)'), (False, False), ('java.security.Signature.initSign(java.security.PrivateKey)', 'DStop')): [17, -0.9076880998909473]}

counter: 47
num skipped: 0
{'include': ['java.lang.Long.parseLong(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree', 'java.lang.Long.parseLong(java.lang.String)'), (False, False), ('java.lang.Long.parseLong(java.lang.String)', 'DStop')): [42, -0.4422302544116974], (('DSubTree',), (False,), ('java.lang.Long.parseLong(java.lang.String)',)): [8, -1.8287564516067505]}

counter: 48
num skipped: 0
{'include': ['java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)',)): [15, -1.3892734050750732], (('DSubTree', 'java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'), (False, False), ('java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)', 'DStop')): [35, -1.721502591855824]}

counter: 49
num skipped: 0
{'include': ['java.lang.StringBuilder.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': 3}
{(('DSubTree',), (False,), ('java.lang.StringBuilder.substring(int,int)',)): [29, -0.686211347579956], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)'), (False, False), ('java.lang.StringBuilder.substring(int,int)', 'DStop')): [21, -0.2911820405861363]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.22733333333333325, 'relevant_additions': 0.20833333333333326, 'meets_constraints': 1.0000000000000004, 'in_set': 0.08, 'test_set_relevant_additions': 0.1916666666666666}
