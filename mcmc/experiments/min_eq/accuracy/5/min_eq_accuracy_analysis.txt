data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: min_eq
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.lang.Exception.Exception()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Exception.Exception()', 'java.lang.Throwable.getLocalizedMessage()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()'), (False, False, False, False, False), ('java.lang.Exception.Exception()', 'java.lang.Throwable.getLocalizedMessage()', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.lang.Throwable.printStackTrace()')): [50, -0.13350306451320648]}

counter: 1
num skipped: 0
{'include': ['java.util.List<java.lang.Object>.add(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.Calendar.getInstance()'), (False, False, False, False, False), ('java.util.List<java.lang.Object>.add(java.lang.Object)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.Calendar.getInstance()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [50, -0.08322584629058838]}

counter: 2
num skipped: 0
{'include': ['java.lang.Long.toString(long)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.toString(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.Date()', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False, False, False), ('java.lang.Long.toString(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.Date()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [50, -0.3565581440925598]}

counter: 3
num skipped: 0
{'include': ['$NOT$java.io.File.exists()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.exists()', 'java.io.File.getParentFile()', 'java.io.File.File(java.lang.String)', 'java.io.File.getParentFile()'), (False, False, False, False, False), ('$NOT$java.io.File.exists()', 'java.io.File.getParentFile()', 'java.io.File.File(java.lang.String)', 'java.io.File.getParentFile()', '$NOT$java.io.File.isDirectory()')): [50, -0.05058788135647774]}

counter: 4
num skipped: 0
{'include': ['java.awt.Graphics.fillRect(int,int,int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.isDirectory()')): [50, -1.5991315841674805]}

counter: 5
num skipped: 0
{'include': ['javax.swing.text.Caret.getDot()'], 'exclude': [], 'min_length': 4, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.Caret.getDot()', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('javax.swing.text.Caret.getDot()', 'java.lang.System.currentTimeMillis()', 'java.lang.String.valueOf(long)')): [50, -4.062285900115967]}

counter: 6
num skipped: 0
{'include': ['java.lang.Class<T>.isAssignableFrom(java.lang.Class)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<T>.isAssignableFrom(java.lang.Class)', 'java.net.URL.openStream()', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)'), (False, False, False, False, False), ('java.lang.Class<T>.isAssignableFrom(java.lang.Class)', 'java.net.URL.openStream()', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)', 'java.lang.String.equals(java.lang.Object)')): [50, -0.1529371440410614]}

counter: 7
num skipped: 0
{'include': ['java.awt.Graphics.fillRect(int,int,int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.getClipBounds()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'), (False, False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.getClipBounds()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Graphics.dispose()')): [50, -0.1692117303609848]}

counter: 8
num skipped: 0
{'include': ['$NOT$java.util.List<java.lang.String>.isEmpty()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.List<java.lang.String>.isEmpty()')): [50, -0.002347691683098674]}

counter: 9
num skipped: 0
{'include': ['java.io.InputStream.available()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False, False), ('java.io.InputStream.available()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.File.File(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)')): [50, -0.31330469250679016]}

counter: 10
num skipped: 0
{'include': ['javax.swing.text.Element.getEndOffset()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.Element.getEndOffset()', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.String.lastIndexOf(java.lang.String)'), (False, False, False, False, False), ('javax.swing.text.Element.getEndOffset()', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)')): [50, -0.26278284192085266]}

counter: 11
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [50, -0.011696215718984604]}

counter: 12
num skipped: 0
{'include': ['java.sql.ResultSet.getTimestamp(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.sql.ResultSet.getTimestamp(int)', 'java.lang.String.String()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.util.Calendar.getInstance()'), (False, False, False, False, False), ('java.sql.ResultSet.getTimestamp(int)', 'java.lang.String.String()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.util.Calendar.getInstance()', 'java.lang.String.String(java.lang.String)')): [50, -6.971518516540527]}

counter: 13
num skipped: 0
{'include': ['java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.lang.String.split(java.lang.String)'), (False, False, False, False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.lang.String.split(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()')): [50, -0.025765130296349525]}

counter: 14
num skipped: 0
{'include': ['javax.swing.JFrame.JFrame()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.JFrame.JFrame()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False, False, False, False), ('javax.swing.JFrame.JFrame()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)')): [50, -2.5305731296539307]}

counter: 15
num skipped: 0
{'include': ['$NOT$java.lang.String.isEmpty()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.isEmpty()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()'), (False, False, False, False, False), ('$NOT$java.lang.String.isEmpty()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Throwable.printStackTrace()', 'java.lang.Throwable.getMessage()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()')): [50, -0.7406039834022522]}

counter: 16
num skipped: 0
{'include': ['java.io.FileInputStream.FileInputStream(java.io.File)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)'), (False, False, False, False, False), ('java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.lang.String.equals(java.lang.Object)')): [50, -0.056932028383016586]}

counter: 17
num skipped: 0
{'include': ['java.lang.String.split(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False), ('java.lang.String.split(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.String.equals(java.lang.Object)')): [50, -23.396170932799578]}

counter: 18
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getName()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getName()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Throwable.printStackTrace()', 'java.util.Date.Date()'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getName()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Throwable.printStackTrace()', 'java.util.Date.Date()', 'java.util.ArrayList<Tau_E>.ArrayList()')): [50, -0.0005613181856460869]}

counter: 19
num skipped: 0
{'include': ['java.util.Iterator<javax.imageio.ImageWriter>.next()'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.lang.String.valueOf(long)'), (False, False, False, False), ('java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'java.lang.String.valueOf(long)', 'java.io.File.File(java.lang.String)')): [50, -14.022873878479004]}

counter: 20
num skipped: 0
{'include': ['java.util.Collection.add(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collection.add(java.lang.Object)', 'java.lang.String.substring(int)', 'java.util.ArrayList.ArrayList()', 'java.lang.String.length()'), (False, False, False, False, False), ('java.util.Collection.add(java.lang.Object)', 'java.lang.String.substring(int)', 'java.util.ArrayList.ArrayList()', 'java.lang.String.length()', 'java.util.ArrayList.ArrayList()')): [50, -0.0049795894883573055]}

counter: 21
num skipped: 0
{'include': ['java.lang.reflect.Field.getName()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.getType()')): [50, -0.038340892642736435]}

counter: 22
num skipped: 0
{'include': ['java.awt.geom.AffineTransform.getTranslateY()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getTranslateY()', 'java.lang.Double.Double(double)', 'java.lang.Integer.Integer(int)', 'java.lang.Boolean.Boolean(boolean)'), (False, False, False, False, False), ('java.awt.geom.AffineTransform.getTranslateY()', 'java.lang.Double.Double(double)', 'java.lang.Integer.Integer(int)', 'java.lang.Boolean.Boolean(boolean)', 'java.lang.Double.Double(double)')): [16, -59.844133377075195], (('DSubTree', 'java.awt.geom.AffineTransform.getTranslateY()', 'java.lang.Double.Double(double)', 'java.lang.Integer.Integer(int)', 'java.lang.Double.Double(double)'), (False, False, False, False, False), ('java.awt.geom.AffineTransform.getTranslateY()', 'java.lang.Double.Double(double)', 'java.lang.Integer.Integer(int)', 'java.lang.Double.Double(double)', 'java.lang.Boolean.Boolean(boolean)')): [34, -20.008997041732073]}

counter: 23
num skipped: 0
{'include': ['java.nio.charset.Charset.name()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.charset.Charset.name()', 'java.io.BufferedWriter.newLine()', 'java.nio.charset.Charset.name()', 'java.lang.String.length()'), (False, False, False, False, False), ('java.nio.charset.Charset.name()', 'java.io.BufferedWriter.newLine()', 'java.nio.charset.Charset.name()', 'java.lang.String.length()', 'java.nio.charset.Charset.name()')): [50, -0.00010477947944309562]}

counter: 24
num skipped: 0
{'include': ['java.net.URL.openStream()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.net.URL.openStream()', 'java.lang.String.endsWith(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.lang.String.endsWith(java.lang.String)'), (False, False, False, False, False), ('java.net.URL.openStream()', 'java.lang.String.endsWith(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.lang.String.endsWith(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)')): [50, -0.3521828055381775]}

counter: 25
num skipped: 0
{'include': ['java.awt.Component.getBounds()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getBounds()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False), ('java.awt.Component.getBounds()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.dispose()')): [50, -0.10492294281721115]}

counter: 26
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getX()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)'), (False, False, False, False, False), ('java.awt.event.MouseEvent.getX()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'java.awt.event.MouseEvent.getY()')): [49, -1.6905942088924348], (('DSubTree', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'java.awt.event.MouseEvent.getY()'), (False, False, False, False, False, False), ('java.awt.event.MouseEvent.getX()', 'java.lang.Math.max(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.max(int,int)', 'java.awt.event.MouseEvent.getY()', 'java.lang.Math.max(int,int)')): [1, -3.1292778961360455]}

counter: 27
num skipped: 0
{'include': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextLong()', 'java.lang.String.indexOf(java.lang.String)', 'java.util.Random.Random()'), (False, False, False, False, False), ('java.security.SecureRandom.getInstance(java.lang.String)', 'java.util.Random.nextLong()', 'java.lang.String.indexOf(java.lang.String)', 'java.util.Random.Random()', 'java.util.Random.nextLong()')): [50, -0.7475345134735107]}

counter: 28
num skipped: 0
{'include': ['java.util.Collection<java.net.InetAddress>.size()'], 'exclude': [], 'min_length': 4, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<java.net.InetAddress>.size()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Collections.singletonList(Tau_T)'), (False, False, False, False), ('java.util.Collection<java.net.InetAddress>.size()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singleton(Tau_T)')): [1, -6.085260924883187], (('DSubTree', 'java.util.Collection<java.net.InetAddress>.size()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singleton(Tau_T)'), (False, False, False, False, False), ('java.util.Collection<java.net.InetAddress>.size()', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'DStop')): [49, -4.81030913151335]}

counter: 29
num skipped: 0
{'include': ['java.util.Collections.enumeration(java.util.Collection)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.InputStream.read(byte[])'), (False, False, False, False, False), ('java.util.Collections.enumeration(java.util.Collection)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.close()')): [50, -0.18278342485427856]}

counter: 30
num skipped: 0
{'include': ['java.io.File.getName()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.io.File.getName()', 'java.io.File.getParentFile()', 'java.io.File.File(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False, False, False), ('java.io.File.getName()', 'java.io.File.getParentFile()', 'java.io.File.File(java.lang.String)', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.File.getParentFile()')): [50, -0.18703918159008026]}

counter: 31
num skipped: 0
{'include': ['java.util.Hashtable.Hashtable(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Hashtable.Hashtable(int)', 'java.lang.Integer.Integer(int)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)', 'java.util.Vector.Vector()'), (False, False, False, False, False), ('java.util.Hashtable.Hashtable(int)', 'java.lang.Integer.Integer(int)', 'java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)', 'java.util.Vector.Vector()', 'java.lang.Integer.Integer(int)')): [50, -0.0009801351698115468]}

counter: 32
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)')): [16, -0.6371860504150391], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.File(java.lang.String)')): [34, -3.764589276863262]}

counter: 33
num skipped: 0
{'include': ['java.nio.channels.SocketChannel.connect(java.net.SocketAddress)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.lang.Long.toString(long)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.lang.Long.toString(long)'), (False, False, False, False, False), ('java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.lang.Long.toString(long)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.lang.Long.toString(long)', 'java.lang.String.split(java.lang.String)')): [50, -3.9455556869506836]}

counter: 34
num skipped: 0
{'include': ['java.lang.reflect.Method.getAnnotation(java.lang.Class)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getType()', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.reflect.Method.getReturnType()')): [50, -0.0004970983718521893]}

counter: 35
num skipped: 0
{'include': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])')): [20, -5.733257092535496], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'DStop')): [7, -2.7012807885184884], (('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'DStop')): [23, -1.0152299217879772]}

counter: 36
num skipped: 0
{'include': ['java.util.List<>.size()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.List<>.size()', 'java.util.Random.nextInt(int)', 'java.util.List<>.get(int)', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False), ('java.util.List<>.size()', 'java.util.Random.nextInt(int)', 'java.util.List<>.get(int)', 'java.util.Arrays.asList(T[])', 'java.util.List<>.get(int)')): [50, -1.5908374786376953]}

counter: 37
num skipped: 0
{'include': ['java.io.File.mkdir()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()', 'java.io.ObjectInputStream.readObject()', 'java.io.File.getPath()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()'), (False, False, False, False, False, False), ('java.io.File.mkdir()', 'java.io.ObjectInputStream.readObject()', 'java.io.File.getPath()', 'java.io.File.File(java.lang.String)', 'java.io.File.exists()', 'java.io.File.getAbsolutePath()')): [50, -1.0492010116577148]}

counter: 38
num skipped: 0
{'include': ['java.lang.System.getenv(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Class<Tau_T>.getClassLoader()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.lang.Class<Tau_T>.getClassLoader()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)')): [50, -0.1018136590719223]}

counter: 39
num skipped: 0
{'include': ['java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.lang.StringBuilder.StringBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False, False), ('java.util.TreeMap<Tau_K,Tau_V>.TreeMap()', 'java.lang.StringBuilder.StringBuilder()', 'java.util.ArrayList<Tau_E>.ArrayList(int)', 'java.lang.Throwable.printStackTrace()', 'java.util.LinkedList<Tau_E>.LinkedList()')): [50, -0.000929519534111023]}

counter: 40
num skipped: 0
{'include': ['java.util.HashSet<java.lang.Integer>.HashSet<Integer>()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<java.lang.Integer>.HashSet<Integer>()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.util.ArrayList.ArrayList()', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False), ('java.util.HashSet<java.lang.Integer>.HashSet<Integer>()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.util.ArrayList.ArrayList()', 'java.util.Arrays.asList(T[])', 'java.util.ArrayList.ArrayList()')): [50, -0.04315885528922081]}

counter: 41
num skipped: 0
{'include': ['java.lang.String.equalsIgnoreCase(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.lang.String.toUpperCase()', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.lang.String.toUpperCase()', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.length()', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [50, -0.00043418517452664673]}

counter: 42
num skipped: 0
{'include': ['java.lang.System.exit(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.System.exit(int)', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.split(java.lang.String)'), (False, False, False, False, False), ('java.lang.System.exit(int)', 'java.lang.String.split(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.lang.String.trim()')): [50, -2.678467035293579]}

counter: 43
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getClassLoader()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()', 'java.net.URL.openStream()', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.util.Properties.Properties()'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'java.net.URL.openStream()', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.util.Properties.Properties()', 'java.io.InputStream.close()')): [50, -0.3458268642425537]}

counter: 44
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.entrySet()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.entrySet()', 'java.lang.StringBuffer.StringBuffer()', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.String.indexOf(int)'), (False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.entrySet()', 'java.lang.StringBuffer.StringBuffer()', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.String.indexOf(int)', 'java.lang.String.toLowerCase()')): [50, -0.1873866617679596]}
