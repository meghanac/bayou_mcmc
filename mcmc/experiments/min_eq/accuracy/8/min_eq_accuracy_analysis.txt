data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: min_eq
label: accuracy
num test programs: 35


counter: 0
num skipped: 0
{'include': ['java.io.StringWriter.toString()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.toString()', 'java.lang.String.length()', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.io.StringWriter.toString()', 'java.lang.String.length()', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.length()', 'java.lang.String.getBytes(java.lang.String)')): [50, -0.7787837386131287]}

counter: 1
num skipped: 0
{'include': ['java.net.URI.getPath()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.net.URI.getPath()', 'java.lang.String.endsWith(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.lang.String.split(java.lang.String)'), (False, False, False, False, False), ('java.net.URI.getPath()', 'java.lang.String.endsWith(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.lang.String.split(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)')): [50, -2.4140100479125977]}

counter: 2
num skipped: 0
{'include': ['java.awt.Font.getSize()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Font.getSize()', 'java.io.BufferedReader.readLine()', 'java.lang.String.charAt(int)', 'java.lang.Character.isJavaIdentifierStart(char)'), (False, False, False, False, False), ('java.awt.Font.getSize()', 'java.io.BufferedReader.readLine()', 'java.lang.String.charAt(int)', 'java.lang.Character.isJavaIdentifierStart(char)', 'java.lang.String.equals(java.lang.Object)')): [50, -1.910337209701538]}

counter: 3
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.String>.add(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False), ('java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.Arrays.asList(T[])')): [50, -0.7111759781837463]}

counter: 4
num skipped: 0
{'include': ['java.net.URL.URL(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.net.URL.URL(java.lang.String)', 'java.util.UUID.randomUUID()', 'java.net.URL.openStream()', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.net.URL.URL(java.lang.String)', 'java.util.UUID.randomUUID()', 'java.net.URL.openStream()', 'java.io.File.File(java.lang.String)', 'java.net.URL.openStream()')): [50, -0.01907610334455967]}

counter: 5
num skipped: 0
{'include': ['java.lang.Thread.Thread(java.lang.Runnable)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.setDaemon(boolean)'), (False, False, False, False, False), ('java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.setDaemon(boolean)', 'java.lang.Thread.start()')): [7, -0.00120936194434762], (('DSubTree', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.setDaemon(boolean)'), (False, False, False, False, False, False), ('java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.setDaemon(boolean)', 'java.lang.Thread.start()')): [13, -2.308466861024499], (('DSubTree', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)'), (False, False, False, False, False), ('java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()')): [17, -2.958146200980991], (('DSubTree', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()'), (False, False, False, False, False, False), ('java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.setName(java.lang.String)', 'java.lang.Thread.start()', 'DStop')): [13, -1.1201729625463486]}

counter: 6
num skipped: 0
{'include': ['javax.imageio.ImageIO.read(java.io.InputStream)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.System.exit(int)'), (False, False, False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.System.exit(int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)')): [50, -2.716895580291748]}

counter: 7
num skipped: 0
{'include': ['java.util.Collections.singleton(Tau_T)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'java.lang.String.indexOf(int)'), (False, False, False, False, False), ('java.util.Collections.singleton(Tau_T)', 'java.util.Collections.singletonList(Tau_T)', 'java.util.Collections.singleton(Tau_T)', 'java.lang.String.indexOf(int)', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [50, -0.017078476026654243]}

counter: 8
num skipped: 0
{'include': ['java.util.Collections.unmodifiableList(java.util.List)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.List<java.lang.Integer>.size()', 'java.util.Random.Random()', 'java.lang.String.length()'), (False, False, False, False, False), ('java.util.Collections.unmodifiableList(java.util.List)', 'java.util.List<java.lang.Integer>.size()', 'java.util.Random.Random()', 'java.lang.String.length()', 'java.lang.Math.min(int,int)')): [50, -0.018606645986437798]}

counter: 9
num skipped: 0
{'include': ['javax.imageio.ImageIO.read(java.io.InputStream)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.System.exit(int)', 'java.io.File.File(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.System.exit(int)', 'java.io.File.File(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)', 'java.io.File.File(java.lang.String)')): [50, -0.17594857513904572]}

counter: 10
num skipped: 0
{'include': ['java.math.BigInteger.valueOf(long)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.valueOf(long)', 'java.util.Date.getTime()', 'java.util.Date.Date()', 'java.math.BigInteger.BigInteger(java.lang.String)'), (False, False, False, False, False), ('java.math.BigInteger.valueOf(long)', 'java.util.Date.getTime()', 'java.util.Date.Date()', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.util.Collections.singletonList(Tau_T)')): [50, -0.7370544075965881]}

counter: 11
num skipped: 0
{'include': ['java.nio.ByteBuffer.wrap(byte[])'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()')): [50, -0.1184978261590004]}

counter: 12
num skipped: 0
{'include': ['java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.Collections.sort(java.util.List)', 'java.util.HashSet<java.lang.String>.HashSet<String>()'), (False, False, False, False, False), ('java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.List<java.lang.Integer>.add(java.lang.Integer)', 'java.util.Collections.sort(java.util.List)', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [50, -0.11464062333106995]}

counter: 13
num skipped: 0
{'include': ['java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)'), (False, False, False, False, False, False), ('java.sql.ResultSet.getLong(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.sql.ResultSet.getString(java.lang.String)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Long.Long(long)')): [50, -0.8590803146362305]}

counter: 14
num skipped: 0
{'include': ['javax.swing.JComboBox.getSelectedItem()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComboBox.getSelectedItem()', 'java.awt.Component.getHeight()', 'java.util.Arrays.copyOfRange(T[],int,int)', 'javax.swing.text.JTextComponent.getText()'), (False, False, False, False, False), ('javax.swing.JComboBox.getSelectedItem()', 'java.awt.Component.getHeight()', 'java.util.Arrays.copyOfRange(T[],int,int)', 'javax.swing.text.JTextComponent.getText()', 'java.lang.Integer.parseInt(java.lang.String)')): [50, -0.31757354736328125]}

counter: 15
num skipped: 0
{'include': ['$NOT$java.lang.String.equals(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.lang.String.endsWith(java.lang.String)', 'java.util.List<>.size()', 'java.util.List<>.get(int)'), (False, False, False, False, False), ('$NOT$java.lang.String.equals(java.lang.Object)', 'java.lang.String.endsWith(java.lang.String)', 'java.util.List<>.size()', 'java.util.List<>.get(int)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)')): [50, -2.7665510177612305]}

counter: 16
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getHeight()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getWidth()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getWidth()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)')): [50, -0.39706847071647644]}

counter: 17
num skipped: 0
{'include': ['java.util.LinkedList<Tau_E>.LinkedList()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedList<Tau_E>.LinkedList()', 'java.util.HashMap.HashMap()', 'java.lang.System.getProperty(java.lang.String)', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.util.LinkedList<Tau_E>.LinkedList()', 'java.util.HashMap.HashMap()', 'java.lang.System.getProperty(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)')): [50, -0.010933845303952694]}

counter: 18
num skipped: 0
{'include': ['java.lang.Throwable.printStackTrace(java.io.PrintStream)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)', 'java.io.File.File(java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.lang.System.exit(int)'), (False, False, False, False, False), ('java.lang.Throwable.printStackTrace(java.io.PrintStream)', 'java.io.File.File(java.lang.String)', 'java.lang.Throwable.getMessage()', 'java.lang.System.exit(int)', 'java.lang.Throwable.getMessage()')): [50, -2.984569549560547]}

counter: 19
num skipped: 0
{'include': ['java.util.Collection<java.lang.String>.contains(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.length()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Random.Random()'), (False, False, False, False, False), ('java.util.Collection<java.lang.String>.contains(java.lang.Object)', 'java.lang.String.length()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Random.Random()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)')): [50, -3.390535354614258]}

counter: 20
num skipped: 0
{'include': ['javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Character.toUpperCase(char)', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.compareTo(java.math.BigInteger)'), (False, False, False, False, False), ('javax.imageio.ImageIO.createImageOutputStream(java.lang.Object)', 'java.lang.Character.toUpperCase(char)', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.awt.Container.add(java.awt.Component)')): [50, -1.6600961685180664]}

counter: 21
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'javax.swing.JComponent.getWidth()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.awt.event.MouseEvent.getClickCount()', 'java.lang.String.length()'), (False, False, False, False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'javax.swing.JComponent.getWidth()', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.awt.event.MouseEvent.getClickCount()', 'java.lang.String.length()', 'java.awt.event.MouseEvent.getClickCount()')): [50, -0.022466424852609634]}

counter: 22
num skipped: 0
{'include': ['java.lang.reflect.Field.getName()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.get(java.lang.Object)', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.get(java.lang.Object)')): [50, -5.4834770708112046e-05]}

counter: 23
num skipped: 0
{'include': ['java.util.Arrays.copyOfRange(T[],int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.String.trim()', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)'), (False, False, False, False, False), ('java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.String.trim()', '$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [50, -1.4288573265075684]}

counter: 24
num skipped: 0
{'include': ['java.util.List<>.get(int)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.util.List<>.get(int)', 'java.lang.Integer.Integer(int)', 'java.util.List<>.get(int)', 'java.lang.Integer.Integer(int)', 'java.util.List<>.get(int)'), (False, False, False, False, False, False), ('java.util.List<>.get(int)', 'java.lang.Integer.Integer(int)', 'java.util.List<>.get(int)', 'java.lang.Integer.Integer(int)', 'java.util.List<>.get(int)', 'java.lang.Integer.Integer(int)')): [50, -0.2746685743331909]}

counter: 25
num skipped: 0
{'include': ['javax.swing.tree.DefaultMutableTreeNode.DefaultMutableTreeNode(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.tree.DefaultMutableTreeNode.DefaultMutableTreeNode(java.lang.Object)', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'java.io.File.File(java.lang.String)', 'java.io.File.listFiles()'), (False, False, False, False, False), ('javax.swing.tree.DefaultMutableTreeNode.DefaultMutableTreeNode(java.lang.Object)', 'java.util.Arrays.sort(T[],java.util.Comparator)', 'java.io.File.File(java.lang.String)', 'java.io.File.listFiles()', 'java.util.Arrays.sort(T[],java.util.Comparator)')): [50, -8.804447174072266]}

counter: 26
num skipped: 0
{'include': ['java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'), (False, False), ('java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [50, -0.7388587594032288]}

counter: 27
num skipped: 0
{'include': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.Date(java.lang.String)'), (False, False, False, False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [50, -0.0031329141929745674]}

counter: 28
num skipped: 0
{'include': ['javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)'), (False, False, False, False, False), ('javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'java.awt.Rectangle.Rectangle(int,int,int,int)')): [50, -2.7217366695404053]}

counter: 29
num skipped: 0
{'include': ['java.lang.Class<>.isPrimitive()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.isPrimitive()', 'java.lang.String.String(byte[])', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)'), (False, False, False, False, False), ('java.lang.Class<>.isPrimitive()', 'java.lang.String.String(byte[])', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)', 'java.lang.Throwable.getMessage()')): [50, -0.05659695342183113]}

counter: 30
num skipped: 0
{'include': ['java.util.HashSet.HashSet()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet.HashSet()', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.util.HashMap.HashMap()'), (False, False, False, False, False), ('java.util.HashSet.HashSet()', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.Integer(int)', 'java.util.HashMap.HashMap()', 'java.lang.Integer.Integer(int)')): [50, -0.11349227279424667]}

counter: 31
num skipped: 0
{'include': ['java.awt.Color.Color(int,int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.Color(int,int,int)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.util.Set<java.lang.String>.size()', 'java.util.HashSet<java.lang.String>.HashSet<String>()'), (False, False, False, False, False), ('java.awt.Color.Color(int,int,int)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.util.Set<java.lang.String>.size()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.util.Set<java.lang.String>.size()')): [50, -1.6631505489349365]}

counter: 32
num skipped: 0
{'include': ['java.util.List<java.lang.Class>.isEmpty()'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Class>.isEmpty()'), (False, False), ('java.util.List<java.lang.Class>.isEmpty()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)')): [3, -7.919886589050293], (('DSubTree', 'java.util.List<java.lang.Class>.isEmpty()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)'), (False, False, False), ('java.util.List<java.lang.Class>.isEmpty()', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'DStop')): [47, -1.3787402212201414]}

counter: 33
num skipped: 0
{'include': ['java.awt.Point.Point(int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Point.Point(int,int)', 'java.io.File.File(java.lang.String)', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.awt.Point.Point(int,int)', 'java.io.File.File(java.lang.String)', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.File.File(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)')): [50, -0.43260443210601807]}

counter: 34
num skipped: 0
{'include': ['java.util.Arrays.asList(T[])'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False, False, False, False), ('java.util.Arrays.asList(T[])', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [50, -0.0007911174325272441]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 1.0000000000000002, 'relevant_additions': 0.8190476190476191, 'meets_constraints': 0.04285714285714286, 'in_set': 0.0, 'test_set_relevant_additions': 0.5142857142857142}
