data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: min_eq
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.util.List<>.size()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.List<>.size()', 'java.lang.StringBuffer.StringBuffer()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False, False, False), ('java.util.List<>.size()', 'java.lang.StringBuffer.StringBuffer()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.String.equals(java.lang.Object)')): [50, -0.9613831043243408]}

counter: 1
num skipped: 0
{'include': ['java.lang.String.intern()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.String.intern()', 'java.lang.Character.toUpperCase(char)', 'java.lang.System.getProperty(java.lang.String)', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.lang.String.intern()', 'java.lang.Character.toUpperCase(char)', 'java.lang.System.getProperty(java.lang.String)', 'java.io.File.File(java.lang.String)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)')): [50, -5.022174835205078]}

counter: 2
num skipped: 0
{'include': ['javax.swing.JTable.getColumnModel()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.JTable.getColumnModel()', 'java.util.Random.Random()', 'java.util.List<java.lang.String>.size()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False, False, False), ('javax.swing.JTable.getColumnModel()', 'java.util.Random.Random()', 'java.util.List<java.lang.String>.size()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.Collections.synchronizedMap(java.util.Map)')): [50, -0.5636173486709595]}

counter: 3
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.lang.String>.isEmpty()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.util.List<java.lang.String>.size()', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.lang.Boolean.booleanValue()')): [50, -0.21254278719425201]}

counter: 4
num skipped: 0
{'include': ['java.lang.String.endsWith(java.lang.String)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.String.indexOf(int,int)', 'java.lang.String.length()', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.String.lastIndexOf(int)'), (False, False, False, False, False, False), ('java.lang.String.endsWith(java.lang.String)', 'java.lang.String.indexOf(int,int)', 'java.lang.String.length()', 'java.lang.String.endsWith(java.lang.String)', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.startsWith(java.lang.String)')): [50, -0.0005228344234637916]}

counter: 5
num skipped: 0
{'include': ['java.awt.Rectangle.Rectangle(int,int,int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.awt.event.MouseEvent.getX()', 'java.awt.Component.getWidth()', 'java.awt.Component.setBounds(java.awt.Rectangle)'), (False, False, False, False, False), ('java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.awt.event.MouseEvent.getX()', 'java.awt.Component.getWidth()', 'java.awt.Component.setBounds(java.awt.Rectangle)', 'java.awt.Component.setBounds(java.awt.Rectangle)')): [50, -0.006448295433074236]}

counter: 6
num skipped: 0
{'include': ['java.lang.management.ManagementFactory.getPlatformMBeanServer()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'java.net.URL.URL(java.lang.String)', 'java.lang.Integer.Integer(int)', 'javax.management.ObjectName.ObjectName(java.lang.String)'), (False, False, False, False, False), ('java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'java.net.URL.URL(java.lang.String)', 'java.lang.Integer.Integer(int)', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'java.lang.Throwable.printStackTrace(java.io.PrintStream)')): [50, -0.11620186269283295]}

counter: 7
num skipped: 0
{'include': ['java.security.Security.getProvider(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.security.Security.getProvider(java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.File.File(java.lang.String)', 'java.io.IOException.IOException(java.lang.String)'), (False, False, False, False, False), ('java.security.Security.getProvider(java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.File.File(java.lang.String)', 'java.io.IOException.IOException(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)')): [50, -0.012947657145559788]}

counter: 8
num skipped: 0
{'include': ['java.lang.Math.max(double,double)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.max(double,double)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.lang.Math.abs(int)', 'java.awt.Color.Color(int,int,int)'), (False, False, False, False, False), ('java.lang.Math.max(double,double)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.lang.Math.abs(int)', 'java.awt.Color.Color(int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)')): [50, -0.27166110277175903]}

counter: 9
num skipped: 0
{'include': ['$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False, False, False), ('$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [50, -0.46218910813331604]}

counter: 10
num skipped: 0
{'include': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False, False), ('java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.TimeZone.getTimeZone(java.lang.String)')): [50, -6.544376083184034e-05]}

counter: 11
num skipped: 0
{'include': ['java.awt.Component.getHeight()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getHeight()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Throwable.getMessage()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.awt.Component.getHeight()', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)', 'java.lang.Throwable.getMessage()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.Throwable.getMessage()')): [50, -4.411949634552002]}

counter: 12
num skipped: 0
{'include': ['java.util.Arrays.fill(double[],double)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(double[],double)', 'java.awt.geom.Point2D.getX()', 'java.lang.Math.abs(double)', 'java.lang.Math.min(double,double)'), (False, False, False, False, False), ('java.util.Arrays.fill(double[],double)', 'java.awt.geom.Point2D.getX()', 'java.lang.Math.abs(double)', 'java.lang.Math.min(double,double)', 'java.lang.Math.abs(double)')): [50, -0.00012146688823122531]}

counter: 13
num skipped: 0
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(char)')): [3, -4.904852524399757], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [9, -5.441840268671513], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [11, -5.063833597814664], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [6, -3.2503483295440674], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [14, -5.483398720622063], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [7, -3.2430012561380863]}

counter: 14
num skipped: 0
{'include': ['java.io.File.delete()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.io.File.delete()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.createNewFile()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.createNewFile()'), (False, False, False, False, False, False), ('java.io.File.delete()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.createNewFile()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.createNewFile()', 'java.io.File.toPath()')): [50, -1.5977783203125]}

counter: 15
num skipped: 0
{'include': ['java.io.DataOutputStream.writeInt(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeInt(int)', 'javax.swing.text.JTextComponent.getText()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)'), (False, False, False, False, False), ('java.io.DataOutputStream.writeInt(int)', 'javax.swing.text.JTextComponent.getText()', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)', 'java.lang.Number.doubleValue()')): [50, -0.2379922866821289]}

counter: 16
num skipped: 0
{'include': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('javax.swing.text.JTextComponent.setText(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [50, -6.018399715423584]}

counter: 17
num skipped: 0
{'include': ['java.util.Collections.reverse(java.util.List)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.reverse(java.util.List)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Character.toUpperCase(char)', 'java.util.Collections.addAll(java.util.Collection,T[])'), (False, False, False, False, False), ('java.util.Collections.reverse(java.util.List)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.Character.toUpperCase(char)', 'java.util.Collections.addAll(java.util.Collection,T[])', 'java.lang.Throwable.getMessage()')): [50, -0.5560477375984192]}

counter: 18
num skipped: 0
{'include': ['java.lang.Boolean.valueOf(boolean)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.Integer.Integer(int)', 'java.lang.StringBuffer.StringBuffer()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False, False), ('java.lang.Boolean.valueOf(boolean)', 'java.lang.Integer.Integer(int)', 'java.lang.StringBuffer.StringBuffer()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.lang.StringBuffer.StringBuffer()')): [50, -8.019449234008789]}

counter: 19
num skipped: 0
{'include': ['java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [17, -0.49401992559432983], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False, False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'DStop')): [1, -3.1294346917420626], (('DSubTree', 'java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False, False, False, False), ('java.security.AccessController.doPrivileged(java.security.PrivilegedAction)', 'java.lang.String.substring(int,int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'DStop')): [32, -4.20061897020787]}

counter: 20
num skipped: 0
{'include': ['java.util.Collections.sort(java.util.List,java.util.Comparator)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.util.List<java.lang.String>.size()', 'java.lang.Math.min(int,int)'), (False, False, False, False, False), ('java.util.Collections.sort(java.util.List,java.util.Comparator)', 'java.util.Collections.sort(java.util.List)', 'java.util.List<java.lang.String>.size()', 'java.lang.Math.min(int,int)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()')): [50, -0.5140359997749329]}

counter: 21
num skipped: 0
{'include': ['java.net.URLEncoder.encode(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.net.URLEncoder.encode(java.lang.String,java.lang.String)')): [50, -0.0002908283786382526]}

counter: 22
num skipped: 0
{'include': ['java.lang.Exception.Exception(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Exception.Exception(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.lang.Exception.Exception(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()', 'java.lang.Throwable.toString()')): [50, -3.8730785846710205]}

counter: 23
num skipped: 0
{'include': ['java.nio.Buffer.position(int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.nio.FloatBuffer.put(float[])'), (False, False, False, False, False), ('java.nio.Buffer.position(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.nio.FloatBuffer.put(float[])', 'java.nio.Buffer.flip()')): [50, -0.5081374049186707]}

counter: 24
num skipped: 0
{'include': ['java.lang.reflect.Method.getReturnType()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getReturnType()', 'java.lang.String.length()', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False), ('java.lang.reflect.Method.getReturnType()', 'java.lang.String.length()', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)')): [50, -2.8984055519104004]}

counter: 25
num skipped: 0
{'include': ['java.util.Map<java.lang.Integer,java.lang.Long>.get(java.lang.Object)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.Integer,java.lang.Long>.get(java.lang.Object)'), (False, False), ('java.util.Map<java.lang.Integer,java.lang.Long>.get(java.lang.Object)', 'javax.swing.JComponent.getHeight()')): [47, -7.187199711799622], (('DSubTree', 'java.util.Map<java.lang.Integer,java.lang.Long>.get(java.lang.Object)', 'javax.swing.JComponent.getHeight()'), (False, False, False), ('java.util.Map<java.lang.Integer,java.lang.Long>.get(java.lang.Object)', 'javax.swing.JComponent.getHeight()', 'DStop')): [3, -7.915688410401344]}

counter: 26
num skipped: 0
{'include': ['java.util.ArrayList<java.security.cert.CertStore>.ArrayList<CertStore>(java.util.Collection)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.security.cert.CertStore>.ArrayList<CertStore>(java.util.Collection)', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.Arrays.asList(T[])'), (False, False, False, False), ('java.util.ArrayList<java.security.cert.CertStore>.ArrayList<CertStore>(java.util.Collection)', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.Arrays.asList(T[])', 'java.util.Collections.unmodifiableList(java.util.List)')): [36, -0.35252758860588074], (('DSubTree', 'java.util.ArrayList<java.security.cert.CertStore>.ArrayList<CertStore>(java.util.Collection)', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.Arrays.asList(T[])', 'java.util.Collections.unmodifiableList(java.util.List)'), (False, False, False, False, False), ('java.util.ArrayList<java.security.cert.CertStore>.ArrayList<CertStore>(java.util.Collection)', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.Arrays.asList(T[])', 'java.util.Collections.unmodifiableList(java.util.List)', 'java.util.Collections.enumeration(java.util.Collection)')): [14, -3.555909499526024]}

counter: 27
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.add(int,int)')): [50, -0.04493781179189682]}

counter: 28
num skipped: 0
{'include': ['java.awt.image.BufferedImage.createGraphics()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.createGraphics()', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Throwable.printStackTrace()'), (False, False, False, False, False), ('java.awt.image.BufferedImage.createGraphics()', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.Throwable.printStackTrace()', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)')): [50, -0.12873932719230652]}

counter: 29
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.String.valueOf(int)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.String.valueOf(int)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [50, -0.4479006230831146]}

counter: 30
num skipped: 0
{'include': ['java.nio.Buffer.position()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.position()', 'java.lang.String.length()', 'java.lang.Math.min(int,int)', 'java.nio.Buffer.position(int)'), (False, False, False, False, False), ('java.nio.Buffer.position()', 'java.lang.String.length()', 'java.lang.Math.min(int,int)', 'java.nio.Buffer.position(int)', 'java.nio.Buffer.limit(int)')): [50, -0.6983857750892639]}

counter: 31
num skipped: 0
{'include': ['java.util.Collection<java.lang.Object>.add(java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.substring(int)', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False), ('java.util.Collection<java.lang.Object>.add(java.lang.Object)', 'java.lang.String.substring(int)', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.String.String(java.lang.String)')): [50, -1.5734907388687134]}

counter: 32
num skipped: 0
{'include': ['java.awt.Graphics.drawLine(int,int,int,int)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False), ('java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [49, -1.34701868891716], (('DSubTree', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False, False, False, False), ('java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [1, -1.271510185673833]}

counter: 33
num skipped: 0
{'include': ['java.nio.Buffer.limit()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.nio.Buffer.limit()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.String.getBytes(java.lang.String)'), (False, False, False, False, False), ('java.nio.Buffer.limit()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.nio.ByteBuffer.allocate(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.nio.Buffer.position()')): [50, -0.10963383316993713]}

counter: 34
num skipped: 0
{'include': ['java.lang.StringBuilder.toString()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [25, -3.182435989379883], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'DStop')): [2, -5.3518928829580545], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()'), (False, False, False, False, False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'DStop')): [4, -5.403014367446303], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.toString()')): [19, -3.254233150742948]}

counter: 35
num skipped: 0
{'include': ['java.lang.String.lastIndexOf(java.lang.String)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)'), (False, False, False, False, False, False), ('java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'java.lang.String.length()')): [50, -0.03678492456674576]}

counter: 36
num skipped: 0
{'include': ['java.util.Vector<java.lang.Object>.size()'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Vector<java.lang.Object>.size()', 'java.util.List<java.lang.String>.size()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.Math.abs(double)'), (False, False, False, False, False), ('java.util.Vector<java.lang.Object>.size()', 'java.util.List<java.lang.String>.size()', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.Math.abs(double)', 'javax.swing.tree.DefaultMutableTreeNode.getUserObject()')): [50, -2.2370080947875977]}

counter: 37
num skipped: 0
{'include': ['java.util.Set<T>.add(Tau_T)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.util.Set<T>.add(Tau_T)', 'java.util.Arrays.asList(T[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False), ('java.util.Set<T>.add(Tau_T)', 'java.util.Arrays.asList(T[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Arrays.asList(T[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])')): [50, -0.05881931632757187]}

counter: 38
num skipped: 0
{'include': ['javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)', 'java.util.ArrayList.ArrayList()', 'java.lang.System.getProperty(java.lang.String)', 'java.util.ArrayList.ArrayList()'), (False, False, False, False, False), ('javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)', 'java.util.ArrayList.ArrayList()', 'java.lang.System.getProperty(java.lang.String)', 'java.util.ArrayList.ArrayList()', 'java.lang.Integer.Integer(int)')): [50, -0.4956114590167999]}

counter: 39
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getTime()'), (False, False, False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getTime()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)')): [50, -1.6132419109344482]}

counter: 40
num skipped: 0
{'include': ['java.sql.Timestamp.Timestamp(long)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Date.Date()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getInstance()'), (False, False, False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.util.Date.Date()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.getInstance()', 'java.util.Date.Date()')): [50, -1.4251155853271484]}

counter: 41
num skipped: 0
{'include': ['java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False, False), ('java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.indexOf(java.lang.String)')): [50, -0.0027821664698421955]}

counter: 42
num skipped: 0
{'include': ['java.lang.String.String(byte[],java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False, False, False), ('java.lang.String.String(byte[],java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.lastIndexOf(java.lang.String)')): [50, -0.057957738637924194]}

counter: 43
num skipped: 0
{'include': ['java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)'), (False, False), ('java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)', 'java.lang.System.currentTimeMillis()')): [50, -16.047867946326733]}

counter: 44
num skipped: 0
{'include': ['java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.StringBuilder.append(double)', 'java.lang.StringBuilder.append(java.lang.String)')): [50, -0.15784557163715363]}
