data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: min_eq
label: novelty
num test programs: 30


counter: 0
num skipped: 0
{'include': ['java.nio.ByteBuffer.getInt(int)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.getInt(int)', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.Double(java.lang.String)'), (False, False, False, False), ('java.nio.ByteBuffer.getInt(int)', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Double.Double(java.lang.String)', 'java.nio.Buffer.position(int)')): [50, -3.3018476963043213]}

counter: 1
num skipped: 0
{'include': ['java.math.BigInteger.BigInteger(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)'), (False, False, False, False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.math.BigInteger.valueOf(long)')): [50, -2.9444261599564925e-05]}

counter: 2
num skipped: 0
{'include': ['java.io.StringWriter.StringWriter(int)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.StringWriter(int)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False), ('java.io.StringWriter.StringWriter(int)', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.io.StringWriter.toString()')): [50, -6.716163635253906]}

counter: 3
num skipped: 0
{'include': ['java.util.HashSet<java.lang.Integer>.HashSet<Integer>()'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet<java.lang.Integer>.HashSet<Integer>()', 'java.lang.String.split(java.lang.String)', 'java.lang.String.trim()'), (False, False, False, False), ('java.util.HashSet<java.lang.Integer>.HashSet<Integer>()', 'java.lang.String.split(java.lang.String)', 'java.lang.String.trim()', 'java.net.InetAddress.getByName(java.lang.String)')): [50, -0.17850220203399658]}

counter: 4
num skipped: 0
{'include': ['java.lang.management.ManagementFactory.getPlatformMBeanServer()'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()'), (False, False), ('java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'java.io.InputStream.close()')): [50, -3.3648698329925537]}

counter: 5
num skipped: 0
{'include': ['javax.swing.JLabel.setText(java.lang.String)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'javax.swing.JLabel.setText(java.lang.String)', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getHeight()'), (False, False, False, False), ('javax.swing.JLabel.setText(java.lang.String)', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.getHeight()', 'javax.swing.JComponent.setForeground(java.awt.Color)')): [50, -0.1035790666937828]}

counter: 6
num skipped: 0
{'include': ['$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.util.HashMap.HashMap()', 'java.lang.String.length()', 'java.util.HashMap.HashMap()', 'java.lang.String.length()'), (False, False, False, False, False, False), ('$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.util.HashMap.HashMap()', 'java.lang.String.length()', 'java.util.HashMap.HashMap()', 'java.lang.String.length()', 'java.lang.String.split(java.lang.String)')): [50, -0.17778335511684418]}

counter: 7
num skipped: 0
{'include': ['java.util.TreeSet<Tau_E>.TreeSet(java.util.Collection)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.TreeSet<Tau_E>.TreeSet(java.util.Collection)'), (False, False), ('java.util.TreeSet<Tau_E>.TreeSet(java.util.Collection)', 'java.nio.ByteBuffer.array()')): [50, -3.815704107284546]}

counter: 8
num skipped: 0
{'include': ['java.io.DataInput.readBoolean()'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readBoolean()'), (False, False), ('java.io.DataInput.readBoolean()', 'java.lang.Throwable.initCause(java.lang.Throwable)')): [50, -0.00235661119222641]}

counter: 9
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.lang.Thread.sleep(long)')): [50, -1.2188853025436401]}

counter: 10
num skipped: 0
{'include': ['java.lang.Class<T>.isAssignableFrom(java.lang.Class)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<T>.isAssignableFrom(java.lang.Class)'), (False, False), ('java.lang.Class<T>.isAssignableFrom(java.lang.Class)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [50, -6.917532920837402]}

counter: 11
num skipped: 0
{'include': ['java.lang.ClassLoader.getResource(java.lang.String)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.File.File(java.lang.String)'), (False, False, False, False, False), ('java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.ClassLoader.getResource(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.net.URL.URL(java.lang.String)')): [50, -0.14493948221206665]}

counter: 12
num skipped: 0
{'include': ['java.util.concurrent.Executors.newSingleThreadScheduledExecutor()'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.Executors.newSingleThreadScheduledExecutor()'), (False, False), ('java.util.concurrent.Executors.newSingleThreadScheduledExecutor()', 'java.lang.String.compareTo(java.lang.String)')): [50, -8.044573783874512]}

counter: 13
num skipped: 0
{'include': ['java.util.List<java.lang.Integer>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()', 'java.util.Collections.sort(java.util.List)'), (False, False, False, False), ('java.util.List<java.lang.Integer>.addAll(java.util.Collection)', 'java.util.List<java.lang.Integer>.size()', 'java.util.Collections.sort(java.util.List)', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)')): [50, -0.27991682291030884]}

counter: 14
num skipped: 0
{'include': ['java.io.RandomAccessFile.seek(long)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.seek(long)'), (False, False), ('java.io.RandomAccessFile.seek(long)', 'java.sql.ResultSet.getLong(java.lang.String)')): [50, -1.6403508186340332]}

counter: 15
num skipped: 0
{'include': ['java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'), (False, False), ('java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.util.Arrays.equals(byte[],byte[])')): [50, -0.3212803304195404]}

counter: 16
num skipped: 0
{'include': ['java.security.SecureRandom.SecureRandom()'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.security.SecureRandom.SecureRandom()', 'java.lang.Class<Tau_T>.getName()', 'java.util.Random.nextInt(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False, False, False, False), ('java.security.SecureRandom.SecureRandom()', 'java.lang.Class<Tau_T>.getName()', 'java.util.Random.nextInt(int)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.lang.StringBuilder.StringBuilder()', 'java.util.Random.nextInt(int)')): [50, -1.2933708429336548]}

counter: 17
num skipped: 0
{'include': ['java.awt.Graphics2D.setStroke(java.awt.Stroke)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False), ('java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)')): [28, -7.464879725128412], (('DSubTree', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False, False), ('java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.setColor(java.awt.Color)')): [8, -9.214120373129845], (('DSubTree', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False, False), ('java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawLine(int,int,int,int)')): [14, -7.552875574212521]}

counter: 18
num skipped: 0
{'include': ['javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'), (False, False), ('javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)')): [50, -1.1255006790161133]}

counter: 19
num skipped: 0
{'include': ['javax.swing.tree.DefaultMutableTreeNode.getUserObject()'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.toLowerCase()'), (False, False, False, False), ('javax.swing.tree.DefaultMutableTreeNode.getUserObject()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.toLowerCase()', 'java.lang.String.equals(java.lang.Object)')): [50, -0.1448616236448288]}

counter: 20
num skipped: 0
{'include': ['java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.lang.String.indexOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()'), (False, False, False, False), ('java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()', 'java.lang.String.indexOf(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'java.lang.String.equals(java.lang.Object)')): [50, -5.402737617492676]}

counter: 21
num skipped: 0
{'include': ['java.lang.Byte.valueOf(byte)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.lang.Byte.valueOf(byte)', 'java.lang.String.valueOf(int)', 'java.lang.Integer.valueOf(int)'), (False, False, False, False), ('java.lang.Byte.valueOf(byte)', 'java.lang.String.valueOf(int)', 'java.lang.Integer.valueOf(int)', 'java.lang.String.valueOf(int)')): [50, -0.11286600679159164]}

counter: 22
num skipped: 0
{'include': ['java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)'), (False, False), ('java.util.concurrent.Executors.newCachedThreadPool(java.util.concurrent.ThreadFactory)', 'java.lang.String.valueOf(char[])')): [50, -0.21189574897289276]}

counter: 23
num skipped: 0
{'include': ['java.util.concurrent.TimeUnit.toMillis(long)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.String.valueOf(long)', 'java.lang.String.valueOf(java.lang.Object)'), (False, False, False, False), ('java.util.concurrent.TimeUnit.toMillis(long)', 'java.lang.String.valueOf(long)', 'java.lang.String.valueOf(java.lang.Object)', 'java.lang.Thread.sleep(long)')): [50, -0.1048898845911026]}

counter: 24
num skipped: 0
{'include': ['javax.swing.ImageIcon.ImageIcon(java.awt.Image)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.System.getProperty(java.lang.String)'), (False, False, False, False), ('javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'java.io.File.File(java.lang.String,java.lang.String)', 'java.lang.System.getProperty(java.lang.String)', 'java.io.File.File(java.lang.String,java.lang.String)')): [50, -0.3882858455181122]}

counter: 25
num skipped: 0
{'include': ['java.lang.String.compareToIgnoreCase(java.lang.String)'], 'exclude': [], 'min_length': 7, 'max_length': inf}
{(('DSubTree', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False, False), ('java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.System.getProperty(java.lang.String)', 'java.lang.String.split(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.io.File.File(java.lang.String)')): [50, -2.868565559387207]}

counter: 26
num skipped: 0
{'include': ['java.util.Collection.contains(java.lang.Object)'], 'exclude': [], 'min_length': 3, 'max_length': inf}
{(('DSubTree', 'java.util.Collection.contains(java.lang.Object)'), (False, False), ('java.util.Collection.contains(java.lang.Object)', 'java.lang.Throwable.initCause(java.lang.Throwable)')): [50, -3.5285427570343018]}

counter: 27
num skipped: 0
{'include': ['java.lang.reflect.Method.getAnnotation(java.lang.Class)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False), ('java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [50, -0.8469803333282471]}

counter: 28
num skipped: 0
{'include': ['java.awt.Container.add(java.awt.Component)'], 'exclude': [], 'min_length': 6, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.add(java.awt.Component)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False, False, False, False), ('java.awt.Container.add(java.awt.Component)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.lang.String.indexOf(int)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.lang.Thread.Thread(java.lang.Runnable)')): [50, -1.6736732721328735]}

counter: 29
num skipped: 0
{'include': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'exclude': [], 'min_length': 5, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.String.split(java.lang.String)'), (False, False, False, False), ('$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.String.split(java.lang.String)', 'java.util.ArrayList<Tau_E>.ArrayList()')): [50, -5.032785415649414]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.9999999999999999, 'relevant_additions': 0.3916666666666666, 'meets_constraints': 0.0, 'in_set': 0.0, 'test_set_relevant_additions': 0.5}
