data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 35


counter: 0
num skipped: 0
{'include': ['DExcept', 'java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': ['java.text.MessageFormat.format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.System.nanoTime()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.System.nanoTime()', 'DStop', 'DStop')): [50, -11.416637730551884]}

counter: 1
num skipped: 0
{'include': ['java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'], 'exclude': ['java.lang.System.getProperty(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)'), (False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)')): [9, -13.635703593492508], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)'), (False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.MessageDigest.update(java.nio.ByteBuffer)', 'java.security.MessageDigest.digest()')): [41, -16.71719390153885]}

counter: 3
num skipped: 1
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': ['java.nio.Buffer.position(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)')): [13, -4.2194154262542725], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [33, -4.226808212697506], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [4, -7.3351829051971436]}

counter: 4
num skipped: 1
{'include': ['java.awt.Font.getStyle()', 'java.awt.Font.Font(java.lang.String,int,int)'], 'exclude': ['javax.swing.UIManager.setLookAndFeel(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Font.getStyle()'), (False, False), ('java.awt.Font.getStyle()', 'java.awt.Font.Font(java.lang.String,int,int)')): [3, -23.883684635162354], (('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.Font.getStyle()')): [12, -17.449288368225098], (('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.io.OutputStream.write(int)'), (False, False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'java.io.OutputStream.write(int)', 'java.awt.Font.getStyle()')): [1, -15.041684240102768], (('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.io.OutputStream.write(int)', 'java.awt.Font.getStyle()'), (False, False, False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'java.io.OutputStream.write(int)', 'java.awt.Font.getStyle()', 'DStop')): [5, -16.867781386361457], (('DSubTree', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.Font.getStyle()'), (False, False, False), ('java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.Font.getStyle()', 'DStop')): [29, -12.951689962064847]}

counter: 6
num skipped: 2
{'include': ['java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['java.text.DateFormat.parse(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)', 'DStop')): [2, -19.161439984950448], (('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)')): [10, -18.36272931098938], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.List<java.lang.Long>.get(int)')): [7, -19.883466485887766], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.List<java.lang.Long>.get(int)')): [1, -23.306837417185307], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Integer>.size()'), (False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Long>.get(int)')): [1, -21.690642300993204], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Long>.get(int)'), (False, False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.String>.size()', 'java.util.List<java.lang.Integer>.size()', 'java.util.List<java.lang.Long>.get(int)', 'DStop')): [29, -19.530720095935976]}

counter: 7
num skipped: 2
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.security.MessageDigest.digest()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DStop', 'DStop')): [10, -13.429432153701782], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop')): [40, -10.681668305303901]}

counter: 8
num skipped: 2
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'DStop', 'DStop')): [35, -14.392626225948334], (('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'DStop', 'DStop')): [15, -8.747604015516117]}

counter: 9
num skipped: 2
{'include': ['java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)'], 'exclude': ['java.sql.ResultSet.getDate(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)'), (False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)')): [1, -7.1299920082092285], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)'), (False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Calendar.setTime(java.util.Date)')): [4, -6.005553603172302], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Calendar.setTime(java.util.Date)', 'DStop')): [30, -9.720352053642273], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Calendar.setTime(java.util.Date)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.toUpperCase()', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, False, False, False, True, True, True, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.sql.Timestamp.Timestamp(long)', 'java.util.Calendar.setTime(java.util.Date)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.toUpperCase()', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [15, -17.504078356083483]}

counter: 10
num skipped: 2
{'include': ['java.util.List.size()', 'java.math.BigInteger.intValue()'], 'exclude': ['java.io.StringWriter.StringWriter()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.size()', 'java.lang.Number.intValue()'), (False, False, False), ('java.util.List.size()', 'java.lang.Number.intValue()', 'java.math.BigInteger.intValue()')): [50, -26.01987075805664]}

counter: 11
num skipped: 2
{'include': ['javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)'], 'exclude': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)')): [5, -6.652736961841583], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DStop')): [12, -5.398971781134605], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [9, -4.769775614142418], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'java.awt.Font.Font(java.lang.String,int,int)', 'javax.swing.JLabel.JLabel(java.lang.String)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [24, -6.036186754703522]}

counter: 12
num skipped: 2
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.Integer(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.Integer(java.lang.String)', 'DStop', 'DStop')): [24, -13.129234075546265], (('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DStop', 'DStop')): [21, -14.016092593192297], (('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DStop')): [5, -14.889403744367883]}

counter: 13
num skipped: 2
{'include': ['java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'], 'exclude': ['java.lang.String.String(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(int)'), (False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [16, -6.2711538672447205], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.length()'), (False, False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.length()', 'DStop')): [26, -7.573171645402908], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [8, -6.832829490303993]}

counter: 14
num skipped: 2
{'include': ['java.lang.String.toUpperCase()', 'java.net.URL.URL(java.lang.String)'], 'exclude': ['java.sql.Statement.executeQuery(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toUpperCase()'), (False, False), ('java.lang.String.toUpperCase()', 'java.net.URL.URL(java.lang.String)')): [16, -2.5975210070610046], (('DSubTree', 'java.lang.String.toUpperCase()', 'java.net.URL.URL(java.lang.String)'), (False, False, False), ('java.lang.String.toUpperCase()', 'java.net.URL.URL(java.lang.String)', 'DStop')): [34, -3.0788148045539856]}

counter: 15
num skipped: 2
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [26, -38.74236345291138], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()')): [1, -33.94224214553833], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()', 'DStop')): [2, -28.200461983768037], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [21, -27.42921066551935]}

counter: 16
num skipped: 2
{'include': ['java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'], 'exclude': ['java.lang.Class<Tau_T>.isInstance(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)')): [2, -7.348070479929447], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)')): [2, -9.662872657179832], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'DStop')): [6, -9.186027348041534], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [3, -9.037933610379696], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)')): [4, -9.613460540771484], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop')): [1, -10.638948298990726], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [32, -7.857067441334948]}

counter: 17
num skipped: 2
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [7, -31.00748610446317], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [43, -20.38420695066452]}

counter: 18
num skipped: 2
{'include': ['DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])'], 'exclude': ['java.sql.ResultSet.getTimestamp(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.Double.parseDouble(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.Double.parseDouble(java.lang.String)', 'DStop', 'DStop')): [50, -15.762832552194595]}

counter: 20
num skipped: 3
{'include': ['java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.lang.Class<Tau_T>.isInstance(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])')): [50, -1.4639631733298302]}

counter: 21
num skipped: 3
{'include': ['DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -8.58882063627243]}

counter: 22
num skipped: 3
{'include': ['java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)'], 'exclude': ['java.util.regex.Matcher.group(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedWriter.close()'), (False, False), ('java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)')): [1, -16.486350059509277], (('DSubTree', 'java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'DStop', 'java.io.OutputStream.write(byte[])', 'DStop', 'DStop')): [3, -27.4639997954946], (('DSubTree', 'java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'DBranch'), (False, False, False, True, True, False, False), ('java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'DStop', 'java.io.OutputStream.write(byte[])', 'DStop')): [33, -26.558236652286723], (('DSubTree', 'java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.io.File.exists()', 'java.io.File.delete()', 'java.io.File.getName()', 'java.io.File.getName()', 'java.io.File.exists()', 'DBranch'), (False, False, False, True, True, True, True, False, False, False), ('java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.io.File.exists()', 'java.io.File.delete()', 'java.io.File.getName()', 'java.io.File.getName()', 'DStop', 'DStop', 'DStop')): [10, -23.95996685931459], (('DSubTree', 'java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.io.File.exists()', 'java.io.File.delete()', 'java.io.File.getName()', 'java.io.File.exists()', 'DBranch'), (False, False, False, True, True, True, True, False, False), ('java.io.BufferedWriter.close()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DBranch', 'java.io.File.exists()', 'java.io.File.delete()', 'java.io.File.getName()', 'java.io.File.getName()', 'DStop', 'DStop')): [3, -21.440656835213304]}

counter: 23
num skipped: 3
{'include': ['java.lang.Float.Float(float)', 'java.lang.Float.floatValue()'], 'exclude': ['javax.naming.InitialContext.InitialContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Float.Float(float)', 'java.lang.Float.floatValue()'), (False, False, False), ('java.lang.Float.Float(float)', 'java.lang.Float.floatValue()', 'DStop')): [50, -2.2858511954545975]}

counter: 24
num skipped: 3
{'include': ['java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'], 'exclude': ['java.lang.Integer.intValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeByte(int)'), (False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)')): [33, -31.695021152496338], (('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)'), (False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'DStop')): [14, -29.50582652736921], (('DSubTree', 'java.io.DataOutputStream.writeInt(int)'), (False, False), ('java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)')): [3, -29.546040773391724]}

counter: 25
num skipped: 3
{'include': ['java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['java.text.DateFormat.parse(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.get(int)'), (False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()')): [3, -22.89323902130127], (('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)')): [6, -21.16094446182251], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.util.List<java.lang.Long>.get(int)')): [6, -20.609167486429214], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.List<java.lang.Long>.get(int)')): [11, -18.128526210784912], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.List<java.lang.Long>.get(int)'), (False, False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.List<java.lang.Long>.get(int)', 'DStop')): [24, -16.94729518343229]}

counter: 26
num skipped: 3
{'include': ['java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)'], 'exclude': ['java.sql.ResultSet.getDate(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)'), (False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)')): [2, -4.392555125057697], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getInstance()'), (False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)')): [5, -6.103254199028015], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.util.Calendar.getInstance()'), (False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.util.Calendar.getInstance()', 'java.util.Calendar.setTime(java.util.Date)')): [16, -3.071212287992239], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getTime()'), (False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.getTime()', 'java.util.Calendar.setTime(java.util.Date)')): [27, -1.4049255549907684]}

counter: 27
num skipped: 3
{'include': ['java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'], 'exclude': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()')): [10, -8.42341423034668], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [20, -6.822919104248285], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.Class<>.getName()'), (False, False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.Class<>.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [3, -6.197495311498642], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'), (False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'DStop')): [1, -7.038057386875153], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [10, -7.407529026269913], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.Math.min(int,int)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.Math.min(int,int)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [3, -11.627773374319077], (('DSubTree', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [3, -8.186853855848312]}

counter: 28
num skipped: 3
{'include': ['DExcept', 'java.lang.System.getenv(java.lang.String)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop', 'DStop')): [50, -6.797847867012024]}

counter: 29
num skipped: 3
{'include': ['java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'], 'exclude': ['java.io.OutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Dimension.Dimension(int,int)'), (False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)')): [6, -2.891710877418518], (('DSubTree', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'DStop')): [7, -5.2629265785217285], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [37, -5.436067283153534]}

counter: 30
num skipped: 3
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.security.MessageDigest.digest()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.endsWith(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.endsWith(java.lang.String)', 'DStop', 'DStop')): [50, -14.65382054755537]}

counter: 31
num skipped: 3
{'include': ['DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])'], 'exclude': ['java.sql.ResultSet.getTimestamp(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.Math.max(int,int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[])', 'java.lang.Math.max(int,int)', 'DStop', 'DStop')): [50, -18.126007556915283]}

counter: 33
num skipped: 4
{'include': ['java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'], 'exclude': ['java.util.HashSet<java.lang.Integer>.HashSet<Integer>()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()', 'DStop')): [50, -14.754829263547435]}

counter: 34
num skipped: 4
{'include': ['java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'], 'exclude': ['java.util.HashSet<java.lang.Integer>.HashSet<Integer>()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)'), (False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()')): [15, -10.494659066200256], (('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()', 'DStop')): [35, -9.182735050097108]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6142857142857144, 'relevant_additions': 0.5642857142857144, 'meets_constraints': 0.8857142857142859, 'in_set': 0.11428571428571428, 'test_set_relevant_additions': 0.5614285714285715}
