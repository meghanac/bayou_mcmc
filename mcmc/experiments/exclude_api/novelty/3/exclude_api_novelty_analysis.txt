data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 57


counter: 0
num skipped: 0
{'include': ['DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.String.split(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.String.split(java.lang.String)', 'DStop', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop', 'DStop')): [50, -11.737292557954788]}

counter: 1
num skipped: 0
{'include': ['java.util.Calendar.add(int,int)', 'java.util.Calendar.set(int,int)'], 'exclude': ['java.lang.StringBuffer.append(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)'), (False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)')): [34, -12.36892819404602], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.util.Calendar.set(int,int)')): [4, -13.057863891124725], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [2, -12.87729462236166], (('DSubTree', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)'), (False, False, False, False), ('java.util.Calendar.add(int,int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()')): [2, -12.63274496793747], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.set(int,int)'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()')): [5, -14.280949354171753], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.set(int,int)', 'DBranch', 'java.util.Calendar.get(int)', 'java.util.Calendar.get(int)', 'java.util.Calendar.get(int)', 'DBranch'), (False, False, False, False, True, True, True, False, False), ('java.util.Calendar.get(int)', 'java.util.Calendar.add(int,int)', 'java.util.Calendar.set(int,int)', 'DBranch', 'java.util.Calendar.get(int)', 'java.util.Calendar.get(int)', 'DStop', 'DStop', 'java.util.Calendar.getTimeInMillis()')): [3, -25.95164129883051]}

counter: 2
num skipped: 0
{'include': ['DLoop', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)'], 'exclude': ['javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.util.List<java.lang.String>.isEmpty()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Class<>.isAssignableFrom(java.lang.Class)', 'java.util.List<java.lang.String>.isEmpty()', 'DStop', 'DStop')): [50, -10.963947772979736]}

counter: 3
num skipped: 0
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [20, -28.576247990131378], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [30, -24.947339620208368]}

counter: 4
num skipped: 0
{'include': ['java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.setAutoCommit(boolean)'], 'exclude': ['java.sql.PreparedStatement.executeUpdate()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'), (False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.setAutoCommit(boolean)')): [10, -16.929341554641724], (('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.setAutoCommit(boolean)', 'DStop')): [10, -16.383278082270408], (('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()'), (False, False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.sql.Connection.setAutoCommit(boolean)')): [1, -20.70465874671936], (('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()'), (False, False, False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()', 'java.sql.Connection.setAutoCommit(boolean)')): [6, -18.761545538902283], (('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False, False, False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.nio.Buffer.position()', 'java.sql.Connection.setAutoCommit(boolean)', 'DStop')): [11, -20.91070685329032], (('DSubTree', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.sql.Connection.setAutoCommit(boolean)'), (False, False, False, False), ('java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.nio.ByteBuffer.array()', 'java.sql.Connection.setAutoCommit(boolean)', 'DStop')): [12, -17.75382413447369]}

counter: 5
num skipped: 0
{'include': ['java.lang.Thread.start()', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)'], 'exclude': ['java.lang.String.substring(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.start()'), (False, False), ('java.lang.Thread.start()', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)')): [1, -21.784936904907227], (('DSubTree', 'java.lang.Thread.start()', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)'), (False, False, False), ('java.lang.Thread.start()', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'DStop')): [12, -19.666921217925847], (('DSubTree', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.start()'), (False, False, False), ('java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.start()', 'DStop')): [14, -17.886424243450165], (('DSubTree', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.start()'), (False, False, False, False), ('java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.start()', 'DStop')): [8, -14.241610124707222], (('DSubTree', 'java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.Thread(java.lang.Runnable)'), (False, False, False), ('java.util.List<java.lang.Thread>.add(java.lang.Thread)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'java.lang.Thread.start()')): [15, -15.195262134075165]}

counter: 6
num skipped: 0
{'include': ['DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.Collections.addAll(java.util.Collection,T[])', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.Collections.addAll(java.util.Collection,T[])', 'DStop', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop', 'DStop')): [50, -21.654980282415636]}

counter: 7
num skipped: 0
{'include': ['DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.isEmpty()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.util.List<java.lang.String>.isEmpty()', 'DStop', 'DStop')): [50, -12.954347727820277]}

counter: 9
num skipped: 1
{'include': ['java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)'], 'exclude': ['java.lang.Long.intValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [46, -7.07597734592855], (('DSubTree', 'java.util.Map.values()'), (False, False), ('java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)')): [4, -3.552768809371628]}

counter: 10
num skipped: 1
{'include': ['DBranch', 'java.util.Vector<Tau_E>.Vector(int)'], 'exclude': ['java.util.UUID.fromString(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Vector<Tau_E>.Vector(int)', 'java.util.List.size()', 'java.util.Vector<Tau_E>.Vector(int)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Vector<Tau_E>.Vector(int)', 'java.util.List.size()', 'DStop', 'java.util.Collections.sort(java.util.List,java.util.Comparator)', 'DStop', 'DStop')): [50, -24.0619215965271]}

counter: 11
num skipped: 1
{'include': ['java.util.List<T>.add(Tau_T)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'], 'exclude': ['java.util.TreeSet<Tau_E>.TreeSet()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<T>.add(Tau_T)'), (False, False), ('java.util.List<T>.add(Tau_T)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)')): [9, -7.4343039989471436], (('DSubTree', 'java.util.List<T>.add(Tau_T)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'), (False, False, False), ('java.util.List<T>.add(Tau_T)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)', 'DStop')): [41, -3.1282156044617295]}

counter: 12
num skipped: 1
{'include': ['java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.append(char)'], 'exclude': ['java.lang.StringBuffer.append(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.append(char)', 'DStop')): [1, -14.785402432084084], (('DSubTree', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False), ('java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.append(char)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [1, -24.404860973358154], (('DSubTree', 'java.lang.StringBuilder.append(char)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(char)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [13, -16.88210093975067], (('DSubTree', 'java.lang.System.exit(int)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False, False, False), ('java.lang.System.exit(int)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'DStop')): [1, -13.307249546051025], (('DSubTree', 'java.lang.System.exit(int)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False, False), ('java.lang.System.exit(int)', 'java.lang.Class<>.getCanonicalName()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)')): [34, -12.292485117912292]}

counter: 13
num skipped: 1
{'include': ['javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)', 'java.math.BigInteger.valueOf(long)'], 'exclude': ['java.math.BigInteger.BigInteger(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)'), (False, False), ('javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)', 'java.math.BigInteger.valueOf(long)')): [4, -24.101776123046875], (('DSubTree', 'java.math.BigInteger.valueOf(long)'), (False, False), ('java.math.BigInteger.valueOf(long)', 'javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)')): [2, -19.699009895324707], (('DSubTree', 'java.math.BigInteger.valueOf(long)', 'java.io.InputStream.read(byte[])'), (False, False, False), ('java.math.BigInteger.valueOf(long)', 'java.io.InputStream.read(byte[])', 'javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)')): [5, -15.240062195807695], (('DSubTree', 'java.math.BigInteger.valueOf(long)', 'java.io.InputStream.read(byte[])', 'javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)'), (False, False, False, False), ('java.math.BigInteger.valueOf(long)', 'java.io.InputStream.read(byte[])', 'javax.security.auth.x500.X500Principal.X500Principal(java.lang.String)', 'DStop')): [39, -12.18229807773605]}

counter: 14
num skipped: 1
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.lang.Thread.setDaemon(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [49, -21.171133048832417], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [1, -23.045830674585886]}

counter: 15
num skipped: 1
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [3, -35.16175174713135], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [16, -36.40871159173548], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()', 'DStop')): [31, -27.121114677807782]}

counter: 16
num skipped: 1
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.security.MessageDigest.digest()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.endsWith(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.String.endsWith(java.lang.String)', 'DStop', 'DStop')): [50, -9.61351078748703]}

counter: 17
num skipped: 1
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()')): [14, -16.155145168304443], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()')): [7, -14.090435266494751], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()'), (False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DStop')): [26, -10.12940064072609], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [3, -8.96114775724709]}

counter: 18
num skipped: 1
{'include': ['DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -6.210208415985107]}

counter: 19
num skipped: 1
{'include': ['java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()'], 'exclude': ['java.io.File.isDirectory()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)'), (False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()')): [1, -1.619480937719345], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()'), (False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [9, -6.3604117929935455], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)')): [1, -9.180271655321121], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [5, -6.203902170062065], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [1, -13.844122897833586], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Collections.emptyList()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [10, -7.584778621792793], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [8, -8.472615972161293], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [1, -14.6205153465271], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'java.util.Collections.unmodifiableList(java.util.List)')): [7, -10.775353491306305], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [6, -5.97942841053009], (('DSubTree', 'java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()'), (False, False, False), ('java.io.File.listFiles(java.io.FilenameFilter)', 'java.util.Collections.emptyList()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)')): [1, -5.894341707229614]}

counter: 20
num skipped: 1
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'DStop', 'DStop')): [50, -8.434720203280449]}

counter: 21
num skipped: 1
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'DStop')): [1, -17.548879027366638], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.sql.PreparedStatement.setInt(int,int)', 'DStop')): [3, -19.102417469024658], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.close()'), (False, False, False, False), ('java.sql.PreparedStatement.execute()', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.Statement.close()', 'DStop')): [1, -19.553762018680573], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [5, -20.283495627343655], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'java.lang.Throwable.getMessage()')): [30, -15.72554175555706], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'java.lang.Throwable.getMessage()')): [10, -13.827337216585875]}

counter: 22
num skipped: 1
{'include': ['java.lang.Integer.valueOf(int)', 'java.lang.String.getBytes(java.lang.String)'], 'exclude': ['java.util.Collections.reverse(java.util.List)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.valueOf(int)'), (False, False), ('java.lang.Integer.valueOf(int)', 'java.lang.String.getBytes(java.lang.String)')): [49, -1.8471763134002686], (('DSubTree', 'java.lang.Integer.valueOf(int)', 'java.lang.String.getBytes(java.lang.String)'), (False, False, False), ('java.lang.Integer.valueOf(int)', 'java.lang.String.getBytes(java.lang.String)', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])')): [1, -4.182277143001556]}

counter: 23
num skipped: 1
{'include': ['java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()'], 'exclude': ['java.lang.Long.Long(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'), (False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()')): [22, -3.5870227850973606], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.Vector()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DStop', 'DStop')): [28, -10.359083863906562]}

counter: 24
num skipped: 1
{'include': ['$NOT$java.lang.String.matches(java.lang.String)', 'DBranch'], 'exclude': ['java.net.InetAddress.isAnyLocalAddress()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.matches(java.lang.String)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.split(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('$NOT$java.lang.String.matches(java.lang.String)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.split(java.lang.String)', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [50, -16.80947882507462]}

counter: 25
num skipped: 1
{'include': ['java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': ['java.lang.StringBuilder.StringBuilder(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)')): [9, -14.954895496368408], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)'), (False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)', 'DStop')): [1, -17.01313281059265], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.append(long)'), (False, False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.append(long)', 'DStop')): [36, -16.69291925430298], (('DSubTree', 'java.lang.StringBuilder.substring(int,int)'), (False, False), ('java.lang.StringBuilder.substring(int,int)', 'java.lang.StringBuilder.append(long)')): [4, -13.224640846252441]}

counter: 26
num skipped: 1
{'include': ['java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['java.text.DateFormat.parse(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)')): [1, -23.89420461654663], (('DSubTree', 'java.util.List<java.lang.Long>.get(int)'), (False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()')): [2, -23.394909381866455], (('DSubTree', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()', 'DStop')): [47, -18.85101959388703]}

counter: 27
num skipped: 1
{'include': ['java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()'], 'exclude': ['java.awt.Shape.getBounds2D()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(int,int)'), (False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()')): [5, -11.968504190444946], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.max(int,int)'), (False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.max(int,int)', 'DStop')): [2, -15.199996262788773], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.abs(int)'), (False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.abs(int)', 'DStop')): [14, -17.86603444488719], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'DStop')): [5, -14.39625434577465], (('DSubTree', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()'), (False, False, False, False), ('java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'DStop')): [1, -14.72522920370102], (('DSubTree', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.OutputStream.close()'), (False, False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.OutputStream.close()', 'DStop')): [3, -27.668537329882383], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.OutputStream.close()'), (False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.io.OutputStream.close()', 'DStop')): [3, -20.3024760033004], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [4, -16.42375999689102], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [5, -18.276121839880943], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [1, -21.324049290269613], (('DSubTree', 'java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False, False, False, False, False, False), ('java.lang.Math.min(int,int)', 'javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [7, -16.250080049037933]}

counter: 28
num skipped: 1
{'include': ['java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'], 'exclude': ['java.lang.Class<Tau_T>.getCanonicalName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DStop')): [48, -4.107247807085514], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DBranch', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Boolean.booleanValue()', 'DBranch'), (False, False, False, True, True, True, True, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DBranch', 'java.lang.Boolean.booleanValue()', 'java.lang.Boolean.valueOf(boolean)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop', 'DStop')): [2, -16.98418431309983]}

counter: 29
num skipped: 1
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.util.Calendar.getTime()')): [1, -20.63513422012329], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.StringWriter.StringWriter()')): [8, -18.14780020713806], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [19, -18.273935556411743], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.lang.String.replace(char,char)')): [6, -17.122300624847412], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.File.getPath()')): [7, -17.32659912109375], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.File.getPath()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.io.File.getPath()', 'java.io.File.getPath()')): [9, -14.82532049715519]}

counter: 30
num skipped: 1
{'include': ['DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.System.nanoTime()', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.System.nanoTime()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.System.nanoTime()', 'DStop', 'java.lang.System.nanoTime()', 'DStop', 'DStop')): [50, -5.97638738155365]}

counter: 31
num skipped: 1
{'include': ['DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -10.198299143463373]}

counter: 32
num skipped: 1
{'include': ['java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()'], 'exclude': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.Class<>.newInstance()')): [1, -6.644804954528809], (('DSubTree', 'java.lang.Class<>.getName()'), (False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()')): [27, -3.8887901604175568], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class.forName(java.lang.String)'), (False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class<>.newInstance()')): [4, -5.441976726055145], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class<>.newInstance()'), (False, False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class<>.newInstance()', 'DStop')): [5, -6.355012245476246], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()'), (False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'DStop')): [4, -5.490454196929932], (('DSubTree', 'java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False, False), ('java.lang.Class<>.getName()', 'java.lang.Class<>.newInstance()', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [9, -7.721430718898773]}

counter: 33
num skipped: 1
{'include': ['java.util.HashMap.HashMap()', 'java.util.Map.putAll(java.util.Map)'], 'exclude': ['java.lang.Integer.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.HashMap()'), (False, False), ('java.util.HashMap.HashMap()', 'java.util.Map.putAll(java.util.Map)')): [15, -13.604570388793945], (('DSubTree', 'java.util.HashMap.HashMap()', 'java.util.Map.putAll(java.util.Map)'), (False, False, False), ('java.util.HashMap.HashMap()', 'java.util.Map.putAll(java.util.Map)', 'DStop')): [35, -10.85410391385085]}

counter: 34
num skipped: 1
{'include': ['java.net.URL.toString()', 'java.util.regex.Matcher.find()'], 'exclude': ['java.util.regex.Matcher.start()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.toString()'), (False, False), ('java.net.URL.toString()', 'java.util.regex.Matcher.find()')): [6, -12.594268798828125], (('DSubTree', 'java.net.URL.toString()', 'java.util.regex.Matcher.find()'), (False, False, False), ('java.net.URL.toString()', 'java.util.regex.Matcher.find()', 'DStop')): [44, -11.666959300637245]}

counter: 36
num skipped: 2
{'include': ['java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'], 'exclude': ['java.util.Arrays.copyOf(T[],int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)')): [9, -9.908575296401978], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'DStop')): [4, -9.098016882315278], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)'), (False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)')): [14, -5.603722095489502], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [4, -4.866717025637627], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'DBranch', 'java.lang.String.contains(java.lang.CharSequence)', 'java.lang.String.valueOf(char)', 'java.lang.String.trim()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, False, True, True, True, True, False, False), ('java.util.regex.Pattern.compile(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)', 'DBranch', 'java.lang.String.contains(java.lang.CharSequence)', 'java.lang.String.valueOf(char)', 'java.lang.String.trim()', 'DStop', 'DStop', 'DStop')): [19, -30.890403169207275]}

counter: 37
num skipped: 2
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.lang.StringBuffer.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [3, -11.863458290696144], (('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [47, -16.176987974904478]}

counter: 38
num skipped: 2
{'include': ['DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [37, -8.265989303588867], (('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop', 'DStop', 'DStop')): [13, -7.353742653271183]}

counter: 39
num skipped: 2
{'include': ['$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)'], 'exclude': ['java.lang.Double.Double(double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)', 'DStop')): [3, -8.32528194412589], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)')): [18, -7.981145858764648], (('DSubTree', 'java.lang.Math.abs(double)'), (False, False), ('java.lang.Math.abs(double)', '$NOT$java.lang.Double.isNaN(double)')): [5, -8.747731804847717], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)'), (False, False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.abs(double)')): [15, -7.81742662191391], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.abs(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.abs(double)', 'java.lang.Math.exp(double)')): [8, -8.368778228759766], (('DSubTree', '$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.exp(double)'), (False, False, False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.exp(double)', 'java.lang.Math.abs(double)')): [1, -8.44571140408516]}

counter: 40
num skipped: 2
{'include': ['java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)'], 'exclude': ['java.lang.Integer.intValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeInt(int)'), (False, False), ('java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)')): [12, -23.60879035294056], (('DSubTree', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)'), (False, False, False), ('java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DStop')): [38, -23.171857943292707]}

counter: 41
num skipped: 2
{'include': ['DBranch', '$NOT$java.lang.String.matches(java.lang.String)'], 'exclude': ['java.net.InetAddress.isAnyLocalAddress()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -13.000431060791016]}

counter: 42
num skipped: 2
{'include': ['java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap.get(java.lang.Object)'], 'exclude': ['java.io.File.getAbsolutePath()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap.get(java.lang.Object)')): [21, -8.171000719070435], (('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap.get(java.lang.Object)'), (False, False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.HashMap.get(java.lang.Object)', 'DStop')): [29, -6.70236204736284]}

counter: 44
num skipped: 3
{'include': ['DBranch', 'javax.swing.JLabel.setText(java.lang.String)'], 'exclude': ['java.lang.Math.max(double,double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.JLabel.setText(java.lang.String)', 'java.awt.Graphics.setColor(java.awt.Color)', 'javax.swing.JLabel.setText(java.lang.String)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.JLabel.setText(java.lang.String)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'DStop')): [50, -13.899178504943848]}

counter: 45
num skipped: 3
{'include': ['DBranch', 'java.util.Random.nextLong()'], 'exclude': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Random.nextLong()', 'java.io.File.getName()', 'java.util.Random.nextLong()', 'java.io.File.File(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Random.nextLong()', 'java.io.File.getName()', 'DStop', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -13.970737755298615]}

counter: 46
num skipped: 3
{'include': ['java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'], 'exclude': ['java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False), ('java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)')): [2, -33.84067726135254], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'), (False, False), ('java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)')): [26, -24.711792469024658], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'), (False, False, False), ('java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)', 'DStop')): [22, -24.931448326751706]}

counter: 47
num skipped: 3
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()')): [3, -26.87830638885498], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()')): [47, -3.8605451993644238]}

counter: 48
num skipped: 3
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -6.569271914660931]}

counter: 49
num skipped: 3
{'include': ['java.lang.reflect.Field.getType()', 'java.lang.String.equals(java.lang.Object)'], 'exclude': ['java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getType()'), (False, False), ('java.lang.reflect.Field.getType()', 'java.lang.String.equals(java.lang.Object)')): [17, -9.11429738998413], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()'), (False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)')): [5, -7.211642026901245], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [6, -4.878024443984032], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getName()'), (False, False, False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getName()', 'DStop')): [7, -6.607434909790754], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getName()', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getName()', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [3, -11.16533563658595], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False, False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.getName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'DStop')): [12, -10.358325621113181]}

counter: 50
num skipped: 3
{'include': ['java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)'], 'exclude': ['java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getPath()'), (False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)')): [19, -5.6416380405426025], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'DStop')): [31, -4.494974572211504]}

counter: 51
num skipped: 3
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [50, -10.08896541595459]}

counter: 52
num skipped: 3
{'include': ['java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['java.text.DateFormat.parse(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)')): [31, -19.600100994110107], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.lang.Thread.currentThread()'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.lang.Thread.currentThread()', 'java.util.List<java.lang.Long>.get(int)')): [3, -17.164573669433594], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.List<java.lang.Long>.get(int)')): [16, -13.673726174980402]}

counter: 53
num skipped: 3
{'include': ['java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()'], 'exclude': ['java.lang.String.valueOf(char[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getX()'), (False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()')): [50, -6.845701269805431]}

counter: 54
num skipped: 3
{'include': ['java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch'], 'exclude': ['java.awt.geom.Point2D.getY()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'java.lang.String.equals(java.lang.Object)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'DStop', 'javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)', 'DStop', 'DStop')): [50, -14.873804330825806]}

counter: 55
num skipped: 3
{'include': ['java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)'], 'exclude': ['java.lang.Long.intValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map.values()'), (False, False), ('java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)')): [43, -7.803888216614723], (('DSubTree', 'java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.util.Map.values()', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [7, -8.175639031920582]}

counter: 56
num skipped: 3
{'include': ['DExcept', 'java.nio.Buffer.flip()'], 'exclude': ['java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.Buffer.flip()', 'java.nio.ByteBuffer.wrap(byte[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.Buffer.flip()', 'java.nio.ByteBuffer.wrap(byte[])', 'DStop', 'DStop')): [9, -13.862823743489571], (('DSubTree', 'DExcept', 'java.nio.Buffer.flip()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.nio.Buffer.flip()', 'java.nio.ByteBuffer.wrap(byte[])', 'DStop')): [41, -10.908489042893052]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6538011695906436, 'relevant_additions': 0.615497076023392, 'meets_constraints': 0.947368421052633, 'in_set': 0.10526315789473684, 'test_set_relevant_additions': 0.5994152046783625}
