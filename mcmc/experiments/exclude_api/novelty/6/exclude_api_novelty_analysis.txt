data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 200


counter: 0
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getY()'], 'exclude': ['java.lang.Double.doubleValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getHeight()'), (False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getY()')): [2, -18.90103816986084], (('DSubTree', 'java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getY()'), (False, False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.awt.geom.RectangularShape.getY()', 'DStop')): [23, -14.378133580088615], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.awt.geom.RectangularShape.getHeight()'), (False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.geom.RectangularShape.getHeight()', 'DStop')): [6, -16.47556695342064], (('DSubTree', 'java.awt.geom.RectangularShape.getHeight()', 'java.awt.Graphics2D.getDeviceConfiguration()', 'java.awt.geom.RectangularShape.getY()'), (False, False, False, False), ('java.awt.geom.RectangularShape.getHeight()', 'java.awt.Graphics2D.getDeviceConfiguration()', 'java.awt.geom.RectangularShape.getY()', 'DStop')): [19, -15.862766553414986]}

counter: 1
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.lang.Thread.setDaemon(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [49, -24.79658530652523], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [1, -23.506955082906643]}

counter: 2
num skipped: 0
{'include': ['java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': ['java.lang.StringBuilder.StringBuilder(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(long)'), (False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)')): [8, -15.507261276245117], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()'), (False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()', 'java.lang.StringBuilder.substring(int,int)')): [2, -16.467612266540527], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.round(double)'), (False, False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.round(double)', 'DStop')): [8, -26.814624100923538], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.Math.round(double)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.Thread.currentThread()', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.Math.round(double)', 'DStop')): [11, -21.37552459537983], (('DSubTree', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.Math.round(double)'), (False, False, False, False, False), ('java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.append(long)', 'java.lang.StringBuilder.substring(int,int)', 'java.lang.Math.round(double)', 'DStop')): [21, -10.140009805560112]}

counter: 3
num skipped: 0
{'include': ['java.lang.Exception.Exception(java.lang.String)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)'], 'exclude': ['java.lang.Class<Tau_T>.getClassLoader()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Exception.Exception(java.lang.String)'), (False, False), ('java.lang.Exception.Exception(java.lang.String)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [50, -13.946505308151245]}

counter: 4
num skipped: 0
{'include': ['DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])'], 'exclude': ['java.util.List<T>.addAll(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop', 'DStop')): [50, -13.832758894655854]}

counter: 5
num skipped: 0
{'include': ['DBranch', 'java.lang.StackTraceElement.getClassName()'], 'exclude': ['javax.swing.table.TableColumnModel.getColumnCount()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StackTraceElement.getClassName()', 'java.util.Date.Date()', 'java.lang.StackTraceElement.getClassName()', 'java.util.logging.Logger.getLogger(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StackTraceElement.getClassName()', 'java.util.Date.Date()', 'DStop', 'java.util.logging.Logger.getLogger(java.lang.String)', 'DStop', 'DStop')): [50, -8.590169906616211]}

counter: 6
num skipped: 0
{'include': ['java.io.StringWriter.StringWriter(int)', 'java.io.StringReader.StringReader(java.lang.String)'], 'exclude': ['java.util.Arrays.asList(java.lang.Object[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.StringWriter.StringWriter(int)'), (False, False), ('java.io.StringWriter.StringWriter(int)', 'java.io.StringReader.StringReader(java.lang.String)')): [8, -10.014342546463013], (('DSubTree', 'java.io.StringWriter.StringWriter(int)', 'java.io.StringWriter.toString()'), (False, False, False), ('java.io.StringWriter.StringWriter(int)', 'java.io.StringWriter.toString()', 'java.io.StringReader.StringReader(java.lang.String)')): [42, -13.82105016708374]}

counter: 7
num skipped: 0
{'include': ['DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)'], 'exclude': ['javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.Object)', 'DStop', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [50, -12.634927779436111]}

counter: 8
num skipped: 0
{'include': ['DBranch', 'java.lang.Thread.isAlive()'], 'exclude': ['java.util.ArrayList<java.lang.Integer>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Thread.isAlive()', 'java.io.PrintStream.print(java.lang.String)', 'java.lang.Thread.isAlive()', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Thread.isAlive()', 'java.io.PrintStream.print(java.lang.String)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -6.720747768878937]}

counter: 9
num skipped: 0
{'include': ['javax.swing.JComponent.getClientProperty(java.lang.Object)', 'java.awt.Component.getParent()'], 'exclude': ['java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getClientProperty(java.lang.Object)', 'java.awt.Component.getParent()'), (False, False, False), ('javax.swing.JComponent.getClientProperty(java.lang.Object)', 'java.awt.Component.getParent()', 'DStop')): [50, -8.95941008371301]}

counter: 10
num skipped: 0
{'include': ['java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()'], 'exclude': ['java.lang.String.valueOf(char[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()'), (False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'DStop')): [23, -13.41923088207841], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.util.StringTokenizer.nextToken()', 'java.awt.geom.RectangularShape.getWidth()'), (False, False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.util.StringTokenizer.nextToken()', 'java.awt.geom.RectangularShape.getWidth()', 'DStop')): [14, -14.22577728703618], (('DSubTree', 'java.awt.geom.RectangularShape.getX()'), (False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()')): [13, -10.59015953540802]}

counter: 11
num skipped: 0
{'include': ['java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'], 'exclude': ['java.text.DateFormat.parse(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.Long>.size()'), (False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)')): [5, -17.14668568968773], (('DSubTree', 'java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)'), (False, False, False), ('java.util.List<java.lang.Long>.size()', 'java.util.List<java.lang.Long>.get(int)', 'DStop')): [34, -17.360130603497964], (('DSubTree', 'java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()'), (False, False, False), ('java.util.List<java.lang.Long>.get(int)', 'java.util.List<java.lang.Long>.size()', 'DStop')): [11, -19.64748129050713]}

counter: 12
num skipped: 0
{'include': ['java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()'], 'exclude': ['java.util.Collections.sort(java.util.List,java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()')): [11, -10.83495283126831], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()'), (False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()', 'DStop')): [14, -8.684726417064667], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [7, -10.891262341290712], (('DSubTree', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)'), (False, False, False, False), ('java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'java.net.Socket.getOutputStream()', 'java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [18, -11.611248761415482]}

counter: 14
num skipped: 1
{'include': ['java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.limit(int)'], 'exclude': ['java.io.File.toPath()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])'), (False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.limit(int)')): [29, -7.359433144330978], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.limit(int)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.limit(int)', 'DStop')): [15, -7.487020127475262], (('DSubTree', 'java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.position(int)'), (False, False, False), ('java.nio.ByteBuffer.wrap(byte[])', 'java.nio.Buffer.position(int)', 'java.nio.Buffer.limit(int)')): [6, -5.526631414890289]}

counter: 15
num skipped: 1
{'include': ['DBranch', 'java.io.File.renameTo(java.io.File)'], 'exclude': ['$NOT$java.util.HashSet<java.lang.String>.add(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.File.renameTo(java.io.File)', 'java.lang.Throwable.getMessage()', 'java.io.File.renameTo(java.io.File)', 'java.io.File.delete()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.File.renameTo(java.io.File)', 'java.lang.Throwable.getMessage()', 'DStop', 'java.io.File.delete()', 'DStop', 'DStop')): [50, -13.908421039581299]}

counter: 16
num skipped: 1
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.execute()'), (False, False), ('java.sql.PreparedStatement.execute()', 'java.sql.PreparedStatement.setInt(int,int)')): [4, -24.704174041748047], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)')): [6, -15.110955834388733], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.Statement.close()')): [11, -16.724131237715483], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.executeUpdate()', 'DStop')): [4, -16.331673219799995], (('DSubTree', 'java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.executeUpdate()'), (False, False, False, False, False), ('java.sql.PreparedStatement.execute()', 'java.io.StringReader.StringReader(java.lang.String)', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.executeUpdate()', 'DStop')): [25, -12.933696817606688]}

counter: 17
num skipped: 1
{'include': ['DBranch', 'java.util.Arrays.copyOfRange(T[],int,int)'], 'exclude': ['java.awt.geom.AffineTransform.getScaleY()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.String.charAt(int)', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.String.length()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Arrays.copyOfRange(T[],int,int)', 'java.lang.String.charAt(int)', 'DStop', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -12.676970541477203]}

counter: 18
num skipped: 1
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [50, -20.06074321269989]}

counter: 19
num skipped: 1
{'include': ['javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'], 'exclude': ['java.awt.Color.getGreen()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False, False), ('javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)')): [5, -22.261750651989132], (('DSubTree', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'), (False, False, False, False), ('javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'java.lang.Boolean.Boolean(boolean)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)')): [41, -15.58524617459625], (('DSubTree', 'javax.swing.UIManager.put(java.lang.Object,java.lang.Object)'), (False, False), ('javax.swing.UIManager.put(java.lang.Object,java.lang.Object)', 'javax.swing.UIManager.getSystemLookAndFeelClassName()')): [4, -12.01603052020073]}

counter: 20
num skipped: 1
{'include': ['DBranch', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': ['java.lang.System.nanoTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.lang.String.endsWith(java.lang.String)', 'DStop', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -7.560957491397858]}

counter: 21
num skipped: 1
{'include': ['DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)'], 'exclude': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop', 'DStop')): [15, -17.15537142753601], (('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.net.URI.getSchemeSpecificPart()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.net.URI.getSchemeSpecificPart()', 'DStop', 'DStop')): [1, -19.149400294118095], (('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.util.concurrent.CountDownLatch.await()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.util.concurrent.CountDownLatch.await()', 'DStop', 'DStop')): [11, -20.36810311640147], (('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.io.BufferedOutputStream.write(byte[],int,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.io.BufferedOutputStream.write(byte[],int,int)', 'DStop', 'DStop')): [23, -13.529933344107121]}

counter: 22
num skipped: 1
{'include': ['java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.lang.Class<Tau_T>.isInstance(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])')): [47, -1.912270426750183], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [3, -4.076312184333801]}

counter: 23
num skipped: 1
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [35, -26.5214625565568], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [15, -24.334457635879517]}

counter: 24
num skipped: 1
{'include': ['DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.String.valueOf(char[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.String.valueOf(char[])', 'DStop', 'DStop')): [50, -6.803139865398407]}

counter: 25
num skipped: 1
{'include': ['javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'], 'exclude': ['javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Integer.toString(int)'), (False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Integer.toString(int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)')): [13, -18.243903756141663], (('DSubTree', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Integer.toString(int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'), (False, False, False, False), ('javax.imageio.ImageIO.read(java.io.InputStream)', 'java.lang.Integer.toString(int)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop')): [37, -14.599202748388052]}

counter: 26
num skipped: 1
{'include': ['java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [7, -21.278949148370884], (('DSubTree', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False), ('java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [7, -17.817690134048462], (('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()')): [9, -16.134185075759888], (('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()', 'DStop')): [27, -12.934213863452896]}

counter: 27
num skipped: 1
{'include': ['DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [15, -15.698010206222534], (('DSubTree', 'DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.ResourceBundle.getBundle(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [35, -9.358255517669022]}

counter: 28
num skipped: 1
{'include': ['java.util.Date.getTime()', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)'], 'exclude': ['java.io.File.File(java.io.File,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.getTime()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False), ('java.util.Date.getTime()', 'java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.sql.PreparedStatement.setDate(int,java.sql.Date)')): [50, -12.581398725509644]}

counter: 29
num skipped: 1
{'include': ['java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch'], 'exclude': ['java.awt.geom.Point2D.getY()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [9, -16.348528930917382], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [3, -22.03607531741727], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, False, False, True, True, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop', 'DStop')): [1, -18.5843394335825], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, False, False, False, True, True, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.equals(java.lang.Object)', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.startsWith(java.lang.String)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop', 'DStop')): [37, -18.435905120219104]}

counter: 30
num skipped: 1
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()')): [3, -15.142410278320312], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.String.getBytes(java.lang.String)')): [14, -15.053190231323242], (('DSubTree', 'java.lang.String.getBytes(java.lang.String)', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.lang.String.getBytes(java.lang.String)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()')): [26, -11.920744955539703], (('DSubTree', 'java.lang.String.getBytes(java.lang.String)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()'), (False, False, False, False), ('java.lang.String.getBytes(java.lang.String)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [7, -14.219368577003479]}

counter: 31
num skipped: 1
{'include': ['java.util.Date.compareTo(java.util.Date)', 'java.util.Calendar.getInstance()'], 'exclude': ['java.util.ArrayList<java.lang.String>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.compareTo(java.util.Date)'), (False, False), ('java.util.Date.compareTo(java.util.Date)', 'java.util.Calendar.getInstance()')): [10, -14.398694515228271], (('DSubTree', 'java.util.Date.compareTo(java.util.Date)', 'java.util.Calendar.getInstance()'), (False, False, False), ('java.util.Date.compareTo(java.util.Date)', 'java.util.Calendar.getInstance()', 'DStop')): [40, -11.652133715339005]}
