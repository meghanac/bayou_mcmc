data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 50


counter: 0
num skipped: 0
{'include': ['DExcept', 'java.lang.System.getenv(java.lang.String)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [39, -10.260950855910778], (('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.io.FileReader.FileReader(java.lang.String)', 'DStop', 'DStop')): [11, -13.78642009300529]}

counter: 1
num skipped: 0
{'include': ['java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()'], 'exclude': ['java.lang.StringBuffer.setLength(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readUTF()'), (False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readLong()')): [1, -11.384356260299683], (('DSubTree', 'java.io.DataInput.readLong()'), (False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readUTF()')): [9, -12.575177699327469], (('DSubTree', 'java.io.DataInput.readLong()', 'java.io.DataInput.readInt()'), (False, False, False), ('java.io.DataInput.readLong()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readUTF()')): [9, -11.63804343342781], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readInt()'), (False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readLong()')): [7, -4.995584785938263], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readLong()'), (False, False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readLong()', 'DStop')): [21, -7.991572940722108], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readLong()'), (False, False, False, False, False), ('java.io.DataInput.readUTF()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.io.DataInput.readInt()', 'java.io.DataInput.readLong()', 'DStop')): [3, -10.48318073246628]}

counter: 2
num skipped: 0
{'include': ['javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False), ('javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)')): [29, -7.82236909866333], (('DSubTree', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)'), (False, False, False), ('javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)', 'DStop')): [19, -9.095034167170525], (('DSubTree', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False, False), ('javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'java.awt.Color.Color(int,int,int)', 'java.awt.Point.Point(int,int)', 'DStop')): [2, -8.71936210989952]}

counter: 3
num skipped: 0
{'include': ['DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])'], 'exclude': ['java.util.List<T>.addAll(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.util.Collections.singletonList(Tau_T)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.util.Collections.singletonList(Tau_T)', 'DStop', 'DStop')): [16, -14.496326446533203], (('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop', 'DStop')): [34, -11.46932897879742]}

counter: 4
num skipped: 0
{'include': ['DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])'], 'exclude': ['java.util.List<T>.addAll(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Class.getConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Class.getConstructor(java.lang.Class[])', 'DStop', 'DStop')): [50, -11.522928237915039]}

counter: 5
num skipped: 0
{'include': ['java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.regex.Matcher.matches()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()'), (False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.DateFormat.format(java.util.Date)')): [6, -16.419865667819977], (('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [10, -17.984014749526978], (('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [34, -6.38699246942997]}

counter: 7
num skipped: 1
{'include': ['DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])'], 'exclude': ['java.util.List<T>.addAll(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -13.453069269657135]}

counter: 8
num skipped: 1
{'include': ['java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'], 'exclude': ['java.util.HashSet<java.lang.Integer>.HashSet<Integer>()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()', 'DStop')): [37, -11.155377475195564], (('DSubTree', 'java.nio.ByteBuffer.allocateDirect(int)'), (False, False), ('java.nio.ByteBuffer.allocateDirect(int)', 'java.nio.ByteBuffer.asFloatBuffer()')): [13, -9.579812457319349]}

counter: 10
num skipped: 2
{'include': ['java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False), ('java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [18, -19.81183910369873], (('DSubTree', 'java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [6, -19.11716346256435], (('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()')): [1, -12.933992624282837], (('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.String.getBytes(java.lang.String)'), (False, False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.lang.String.getBytes(java.lang.String)', 'java.beans.PropertyDescriptor.getReadMethod()')): [25, -11.349875211715698]}

counter: 11
num skipped: 2
{'include': ['java.io.FileWriter.FileWriter(java.io.File)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'], 'exclude': ['javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)')): [4, -15.040493965148926], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'), (False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)')): [10, -12.61327838897705], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)')): [11, -9.38334608078003], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.util.LinkedList<Tau_E>.LinkedList()')): [2, -14.328651189804077], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.util.LinkedList<Tau_E>.LinkedList()')): [23, -12.798664391040802]}

counter: 13
num skipped: 3
{'include': ['DBranch', 'java.util.Arrays.copyOf(int[],int)'], 'exclude': ['java.util.Set<javax.management.ObjectName>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.String.equals(java.lang.Object)', 'java.util.Arrays.copyOf(int[],int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DStop', 'DStop')): [50, -14.83052933216095]}

counter: 14
num skipped: 3
{'include': ['java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)'], 'exclude': ['java.util.Arrays.copyOf(T[],int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.find()'), (False, False, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'java.util.regex.Matcher.find()', 'DStop')): [10, -10.808878511190414], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'DBranch'), (False, False, False, False, True, True, True, True, False, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop', 'DStop')): [12, -13.670394375920296], (('DSubTree', 'java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.find()', 'DBranch'), (False, False, False, False, True, True, False, False), ('java.lang.StringBuilder.append(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop')): [28, -6.616093775257468]}

counter: 15
num skipped: 3
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DStop', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop')): [50, -8.97985029220581]}

counter: 16
num skipped: 3
{'include': ['java.util.List.get(int)', 'java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': ['java.lang.String.contains(java.lang.CharSequence)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.get(int)'), (False, False), ('java.util.List.get(int)', 'java.lang.Boolean.valueOf(java.lang.String)')): [45, -6.784280300140381], (('DSubTree', 'java.util.List.get(int)', 'java.lang.Boolean.valueOf(java.lang.String)'), (False, False, False), ('java.util.List.get(int)', 'java.lang.Boolean.valueOf(java.lang.String)', 'DStop')): [5, -7.459081947803497]}

counter: 17
num skipped: 3
{'include': ['java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.lang.Long.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [2, -13.933829307556152], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop')): [1, -4.1809002459049225], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.split(java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.lang.String.split(java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop')): [47, -4.562579810619354]}

counter: 18
num skipped: 3
{'include': ['java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)'], 'exclude': ['java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.trim()'), (False, False), ('java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)')): [2, -9.634846210479736], (('DSubTree', 'java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()'), (False, False, False, False), ('java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int)')): [12, -6.61144332587719], (('DSubTree', 'java.lang.String.trim()', 'java.lang.String.indexOf(int)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()'), (False, False, False, False, False), ('java.lang.String.trim()', 'java.lang.String.indexOf(int)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int)')): [21, -7.077634394168854], (('DSubTree', 'java.lang.String.trim()', 'java.lang.String.indexOf(int)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False, False), ('java.lang.String.trim()', 'java.lang.String.indexOf(int)', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.length()')): [15, -6.729885518550873]}

counter: 19
num skipped: 3
{'include': ['java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)'], 'exclude': ['java.net.URL.toExternalForm()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Long.toString(long)'), (False, False), ('java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)')): [10, -9.51079148054123], (('DSubTree', 'java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)'), (False, False, False), ('java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)', 'DStop')): [37, -8.849742949008942], (('DSubTree', 'java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)'), (False, False, False), ('java.lang.Long.toString(long)', 'java.lang.Integer.toHexString(int)', 'java.lang.String.toUpperCase()')): [3, -8.174370408058167]}

counter: 20
num skipped: 3
{'include': ['DLoop', 'java.lang.Number.intValue()'], 'exclude': ['$NOT$java.io.File.canRead()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Number.intValue()', 'java.sql.ResultSet.next()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Number.intValue()', 'java.sql.ResultSet.next()', 'DStop', 'DStop')): [50, -9.388997316360474]}

counter: 21
num skipped: 3
{'include': ['java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()'], 'exclude': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()')): [3, -13.328656435012817], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()', 'java.io.ByteArrayOutputStream.close()')): [3, -15.532519102096558], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [1, -21.861770510673523], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.lang.System.currentTimeMillis()', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()')): [3, -17.25958240032196], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.System.currentTimeMillis()')): [40, -15.589961767196655]}

counter: 22
num skipped: 3
{'include': ['DBranch', 'java.lang.StackTraceElement.getClassName()'], 'exclude': ['javax.swing.table.TableColumnModel.getColumnCount()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StackTraceElement.getClassName()', 'java.util.Date.Date()', 'java.lang.StackTraceElement.getClassName()', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StackTraceElement.getClassName()', 'java.util.Date.Date()', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -11.942623615264893]}

counter: 23
num skipped: 3
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)')): [3, -9.582804381847382], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [1, -12.90947937965393], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [1, -12.326822757720947], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [15, -9.99612544476986], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)', 'java.util.Calendar.set(int,int)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [30, -11.691865727305412]}

counter: 24
num skipped: 3
{'include': ['DBranch', 'java.util.Collections.enumeration(java.util.Collection)'], 'exclude': ['java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Math.max(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'DStop', 'java.lang.Math.max(int,int)', 'DStop', 'DStop')): [1, -11.334811925888062], (('DSubTree', 'DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Math.max(int,int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Math.max(int,int)', 'DStop', 'DStop')): [1, -11.183639405295253], (('DSubTree', 'DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'DBranch'), (False, True, True, False, False), ('DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Math.max(int,int)', 'DStop')): [48, -8.257463390356861]}

counter: 25
num skipped: 3
{'include': ['java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()'], 'exclude': ['java.lang.Integer.Integer(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URI.URI(java.lang.String)'), (False, False), ('java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.await()')): [1, -14.955249309539795], (('DSubTree', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)'), (False, False, False), ('java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.CountDownLatch.await()')): [24, -10.206005454063416], (('DSubTree', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.CountDownLatch.await()'), (False, False, False, False), ('java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.CountDownLatch.await()', 'DStop')): [11, -10.080187425017357], (('DSubTree', 'java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.CountDownLatch.await()'), (False, False, False, False), ('java.net.URI.URI(java.lang.String)', 'java.util.concurrent.CountDownLatch.CountDownLatch(int)', 'java.util.concurrent.CountDownLatch.await()', 'java.lang.Thread.sleep(long)')): [14, -7.686359852552414]}

counter: 26
num skipped: 3
{'include': ['DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)'], 'exclude': ['java.lang.Math.addExact(long,long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.setProperty(java.lang.String,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.PrintWriter.PrintWriter(java.io.OutputStream,boolean)', 'java.lang.System.setProperty(java.lang.String,java.lang.String)', 'DStop', 'DStop')): [50, -9.862720549106598]}

counter: 27
num skipped: 3
{'include': ['DBranch', 'java.util.Random.nextLong()'], 'exclude': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Random.nextLong()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Random.nextLong()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Random.nextLong()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'DStop', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop', 'DStop')): [13, -18.409682750701904], (('DSubTree', 'DBranch', 'java.util.Random.nextLong()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Random.nextLong()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.Random.nextLong()', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'DStop', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [37, -15.529808284714818]}

counter: 28
num skipped: 3
{'include': ['DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)'], 'exclude': ['java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop', 'DStop')): [49, -12.818321571394335], (('DSubTree', 'DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [1, -13.932714279042557]}

counter: 29
num skipped: 3
{'include': ['DBranch', 'java.lang.Math.min(float,float)'], 'exclude': ['java.util.Arrays.sort(float[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.min(float,float)', 'java.lang.String.length()', 'java.lang.Math.min(float,float)', 'java.lang.Math.min(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.min(float,float)', 'java.lang.String.length()', 'DStop', 'java.lang.Math.min(int,int)', 'DStop', 'DStop')): [50, -8.608548164367676]}

counter: 30
num skipped: 3
{'include': ['java.io.FileReader.FileReader(java.io.File)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'], 'exclude': ['java.lang.Boolean.booleanValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileReader.FileReader(java.io.File)'), (False, False), ('java.io.FileReader.FileReader(java.io.File)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [2, -12.377650737762451], (('DSubTree', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False), ('java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)')): [3, -6.9325169660151005], (('DSubTree', 'java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.io.FileReader.FileReader(java.io.File)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [3, -10.151026289910078], (('DSubTree', 'java.io.FileReader.FileReader(java.io.File)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False), ('java.io.FileReader.FileReader(java.io.File)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [42, -9.340807035565376]}

counter: 31
num skipped: 3
{'include': ['$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)'], 'exclude': ['java.lang.Double.Double(double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Double.isNaN(double)'), (False, False), ('$NOT$java.lang.Double.isNaN(double)', 'java.lang.Math.abs(double)')): [1, -6.426360636949539], (('DSubTree', 'java.lang.Math.abs(double)'), (False, False), ('java.lang.Math.abs(double)', '$NOT$java.lang.Double.isNaN(double)')): [15, -8.421068906784058], (('DSubTree', 'java.lang.Math.abs(double)', '$NOT$java.lang.Double.isNaN(double)'), (False, False, False), ('java.lang.Math.abs(double)', '$NOT$java.lang.Double.isNaN(double)', 'DStop')): [5, -6.765804298222065], (('DSubTree', 'java.lang.Math.abs(double)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False), ('java.lang.Math.abs(double)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', '$NOT$java.lang.Double.isNaN(double)')): [11, -8.22985153645277], (('DSubTree', 'java.lang.Math.abs(double)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False), ('java.lang.Math.abs(double)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.Double.isNaN(double)')): [18, -6.2931278347969055]}

counter: 32
num skipped: 3
{'include': ['java.beans.PropertyDescriptor.getReadMethod()', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()')): [19, -15.195339679718018], (('DSubTree', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()'), (False, False, False), ('java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'java.beans.PropertyDescriptor.getReadMethod()', 'DStop')): [31, -16.90035567805171]}

counter: 33
num skipped: 3
{'include': ['java.lang.Throwable.getMessage()', 'java.lang.StringBuffer.toString()'], 'exclude': ['java.lang.Class<Tau_T>.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Throwable.getMessage()'), (False, False), ('java.lang.Throwable.getMessage()', 'java.lang.StringBuffer.toString()')): [9, -8.04919508099556], (('DSubTree', 'java.lang.StringBuffer.toString()'), (False, False), ('java.lang.StringBuffer.toString()', 'java.lang.Throwable.getMessage()')): [3, -5.415322422981262], (('DSubTree', 'java.lang.StringBuffer.toString()', 'java.lang.Throwable.getMessage()'), (False, False, False), ('java.lang.StringBuffer.toString()', 'java.lang.Throwable.getMessage()', 'DStop')): [38, -3.8824688848108053]}

counter: 34
num skipped: 3
{'include': ['DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)'], 'exclude': ['javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [29, -9.616649687290192], (('DSubTree', 'DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.io.PrintStream.PrintStream(java.io.OutputStream)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop', 'DStop')): [21, -7.13507176656276]}

counter: 35
num skipped: 3
{'include': ['DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.Double.valueOf(java.lang.String)', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Matcher.matches()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.lang.Double.valueOf(java.lang.String)', 'DStop', 'java.util.regex.Matcher.matches()', 'DStop', 'DStop')): [50, -11.654334738850594]}

counter: 36
num skipped: 3
{'include': ['DBranch', 'java.lang.Character.toString(char)'], 'exclude': ['java.awt.Graphics.drawLine(int,int,int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Character.toString(char)', 'java.lang.String.length()', 'java.lang.Character.toString(char)', 'java.lang.String.split(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Character.toString(char)', 'java.lang.String.length()', 'DStop', 'java.lang.String.split(java.lang.String)', 'DStop', 'DStop')): [50, -11.83855676651001]}

counter: 37
num skipped: 3
{'include': ['java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Set<java.lang.Long>.add(java.lang.Long)'], 'exclude': ['java.util.logging.Logger.getGlobal()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Set<java.lang.Long>.add(java.lang.Long)')): [17, -15.424652576446533], (('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Set<java.lang.Long>.add(java.lang.Long)'), (False, False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.Set<java.lang.Long>.add(java.lang.Long)', 'DStop')): [14, -16.121712565260168], (('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.util.Set<java.lang.Long>.add(java.lang.Long)')): [17, -12.12030577659607], (('DSubTree', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.util.Set<java.lang.Long>.add(java.lang.Long)')): [2, -11.86517596244812]}
