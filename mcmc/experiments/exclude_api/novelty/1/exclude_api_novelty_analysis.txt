data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 168


counter: 0
num skipped: 0
{'include': ['DBranch', 'java.lang.Math.min(float,float)'], 'exclude': ['java.util.Arrays.sort(float[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.min(float,float)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.lang.Math.min(float,float)', 'javax.swing.JComponent.getWidth()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.min(float,float)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop', 'javax.swing.JComponent.getWidth()', 'DStop', 'DStop')): [50, -11.213588237762451]}

counter: 1
num skipped: 0
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.security.MessageDigest.digest()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DStop', 'DStop')): [12, -12.290792286396027], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop')): [38, -11.786846153787337]}

counter: 2
num skipped: 0
{'include': ['java.lang.String.indexOf(java.lang.String)', 'java.io.FileInputStream.read(byte[])'], 'exclude': ['java.util.Random.Random(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileInputStream.read(byte[])'), (False, False), ('java.io.FileInputStream.read(byte[])', 'java.lang.String.indexOf(java.lang.String)')): [1, -16.662914276123047], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.lang.String.toUpperCase()'), (False, False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.lang.String.toUpperCase()', 'java.lang.String.indexOf(java.lang.String)')): [2, -14.904279470443726], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.toUpperCase()')): [26, -9.5455362200737], (('DSubTree', 'java.io.FileInputStream.read(byte[])', 'java.io.File.getName()'), (False, False, False), ('java.io.FileInputStream.read(byte[])', 'java.io.File.getName()', 'java.lang.String.indexOf(java.lang.String)')): [21, -4.39699000120163]}

counter: 3
num skipped: 0
{'include': ['java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()'], 'exclude': ['java.util.Map<java.lang.String,java.lang.String>.entrySet()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStream.write(int)'), (False, False), ('java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()')): [28, -11.070850849151611], (('DSubTree', 'java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()'), (False, False, False), ('java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()', 'java.lang.String.lastIndexOf(int)')): [10, -16.099958658218384], (('DSubTree', 'java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()', 'java.lang.String.lastIndexOf(int)'), (False, False, False, False), ('java.io.OutputStream.write(int)', 'java.util.Map<java.lang.String,java.lang.Object>.entrySet()', 'java.lang.String.lastIndexOf(int)', 'java.lang.String.substring(int,int)')): [12, -16.503159284591675]}

counter: 4
num skipped: 0
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.matches()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.matches()', 'java.util.regex.Matcher.group(int)', 'DStop', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -11.242677211761475]}

counter: 5
num skipped: 0
{'include': ['java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'], 'exclude': ['java.io.OutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)'), (False, False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)')): [4, -14.458575010299683], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.max(int,int)')): [1, -15.856097221374512], (('DSubTree', 'java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)'), (False, False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)')): [1, -9.466984510421753], (('DSubTree', 'java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.max(int,int)'), (False, False, False), ('java.awt.Dimension.Dimension(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Point.Point(int,int)')): [1, -11.968042612075806], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.lang.Math.max(int,int)'), (False, False, False, False), ('java.awt.Point.Point(int,int)', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)')): [22, -12.363413035869598], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.lang.Math.max(int,int)'), (False, False, False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)')): [4, -14.029323041439056], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [1, -16.10645128786564], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False), ('java.awt.Point.Point(int,int)', 'java.lang.Math.max(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [1, -9.108573168516159], (('DSubTree', 'java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('java.awt.Point.Point(int,int)', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [15, -7.182825589552522]}

counter: 6
num skipped: 0
{'include': ['java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectOutputStream.close()'), (False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()')): [24, -20.32643985748291], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)')): [5, -20.739696502685547], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.substring(int,int)', 'java.lang.String.lastIndexOf(java.lang.String)')): [4, -15.352979362010956], (('DSubTree', 'java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.String.lastIndexOf(java.lang.String)'), (False, False, False, False), ('java.io.ObjectOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'java.lang.String.lastIndexOf(java.lang.String)', 'java.lang.String.lastIndexOf(java.lang.String)')): [17, -15.33204871416092]}

counter: 7
num skipped: 0
{'include': ['java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)'], 'exclude': ['java.sql.ResultSet.getDate(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)'), (False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)')): [12, -9.574191570281982], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()')): [21, -6.522928953170776], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()'), (False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()', 'DStop')): [1, -12.860865652561188], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.length()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()'), (False, False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.length()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()', 'DStop')): [9, -16.328609347343445], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.length()', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.lang.String.length()', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.getInstance()')): [4, -12.18853148818016], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.String.length()'), (False, False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.lang.String.length()', 'java.util.Calendar.getInstance()')): [3, -11.53379076719284]}

counter: 8
num skipped: 0
{'include': ['java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)'], 'exclude': ['java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getPath()'), (False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)')): [11, -1.8669521287083626], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)'), (False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'DStop')): [12, -4.306963488459587], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)', 'DStop')): [6, -10.512071199715137], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop')): [3, -6.708862237632275], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.InputStream.close()'), (False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.InputStream.close()', 'DStop')): [3, -10.139564648270607], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.InputStream.close()'), (False, False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.InputStream.close()', 'DStop')): [1, -9.402721581049263], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'DStop')): [12, -3.7352748960256577], (('DSubTree', 'java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.FileInputStream.close()', 'java.awt.Toolkit.getDefaultToolkit()'), (False, False, False, False, False), ('java.io.File.getPath()', 'java.io.FileInputStream.FileInputStream(java.lang.String)', 'java.io.FileInputStream.close()', 'java.awt.Toolkit.getDefaultToolkit()', 'DStop')): [2, -11.254041595384479]}

counter: 9
num skipped: 0
{'include': ['java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)'], 'exclude': ['java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.trim()'), (False, False), ('java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)')): [11, -3.112221360206604], (('DSubTree', 'java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False, False), ('java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)', '$NOT$java.lang.String.matches(java.lang.String)')): [18, -6.131971538066864], (('DSubTree', 'java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False, False), ('java.lang.String.trim()', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int,int)', '$NOT$java.lang.String.matches(java.lang.String)')): [21, -14.483516156673431]}

counter: 10
num skipped: 0
{'include': ['java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'], 'exclude': ['java.lang.String.String(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)'), (False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.substring(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [21, -10.1807861328125], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.substring(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [2, -7.138178668916225], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)'), (False, False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [2, -7.017697691917419], (('DSubTree', 'java.lang.String.indexOf(int)'), (False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])')): [3, -6.095277905464172], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [18, -4.081246647983789], (('DSubTree', 'java.lang.String.indexOf(int)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.lang.String.indexOf(int)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [4, -12.960052490234375]}

counter: 11
num skipped: 0
{'include': ['DExcept', 'java.lang.System.getenv(java.lang.String)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.System.getenv(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.System.getenv(java.lang.String)', 'DStop', 'DStop')): [2, -14.103843212127686], (('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop', 'DStop')): [48, -6.958999840499018]}

counter: 12
num skipped: 0
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'], 'exclude': ['java.nio.Buffer.position(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop')): [25, -9.417725903913379], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'DStop')): [2, -15.997756779193878], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [8, -11.47804580628872], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.lang.StringBuilder.append(java.lang.String)')): [15, -4.4097038097679615]}

counter: 13
num skipped: 0
{'include': ['java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getTimeInMillis()'), (False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)')): [2, -10.521097183227539], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'DStop')): [13, -9.328834503889084], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)'), (False, False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)', 'DStop')): [7, -11.895067796111107], (('DSubTree', 'java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.Calendar.getTimeInMillis()', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.get(int)')): [28, -6.295220777392387]}

counter: 14
num skipped: 0
{'include': ['DBranch', 'java.util.List<java.io.File>.add(java.io.File)'], 'exclude': ['java.lang.System.nanoTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.lang.String.endsWith(java.lang.String)', 'java.util.List<java.io.File>.add(java.io.File)', 'java.io.File.File(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.io.File>.add(java.io.File)', 'java.lang.String.endsWith(java.lang.String)', 'DStop', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -7.261061400175095]}

counter: 15
num skipped: 0
{'include': ['DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])'], 'exclude': ['java.util.List<T>.addAll(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Class.getConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class.getConstructor(java.lang.Class[])', 'java.lang.Class.getConstructor(java.lang.Class[])', 'DStop', 'DStop')): [50, -4.49479603767395]}

counter: 17
num skipped: 1
{'include': ['java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.util.Calendar.getTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.get(int)'), (False, False), ('java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [12, -13.347051620483398], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.Calendar.get(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [28, -9.044130384922028], (('DSubTree', 'java.util.Calendar.get(int)', 'java.util.ArrayList.ArrayList()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.Calendar.get(int)', 'java.util.ArrayList.ArrayList()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [10, -10.012452140450478]}

counter: 18
num skipped: 1
{'include': ['DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)'], 'exclude': ['$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.ArrayList.ArrayList()', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.remove(java.lang.Object)', 'java.util.ArrayList.ArrayList()', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -7.601269245147705]}

counter: 19
num skipped: 1
{'include': ['java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'], 'exclude': ['java.lang.Double.valueOf(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])'), (False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)')): [5, -11.090329885482788], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'DStop')): [45, -10.477111406624317]}

counter: 20
num skipped: 1
{'include': ['java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'], 'exclude': ['javax.xml.bind.JAXBContext.createMarshaller()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)'), (False, False), ('java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)', 'java.io.File.createTempFile(java.lang.String,java.lang.String)')): [50, -3.065342664718628]}

counter: 23
num skipped: 3
{'include': ['javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.text.JTextComponent.setText(java.lang.String)'], 'exclude': ['javax.swing.JComponent.setMinimumSize(java.awt.Dimension)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setForeground(java.awt.Color)'), (False, False), ('javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.text.JTextComponent.setText(java.lang.String)')): [28, -2.9939695596694946], (('DSubTree', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.text.JTextComponent.setText(java.lang.String)'), (False, False, False), ('javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.text.JTextComponent.setText(java.lang.String)', 'DStop')): [22, -3.3118308391422033]}

counter: 24
num skipped: 3
{'include': ['DBranch', '$NOT$java.lang.String.matches(java.lang.String)'], 'exclude': ['java.net.InetAddress.isAnyLocalAddress()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', 'DStop', 'java.util.Arrays.asList(T[])', 'DStop', 'DStop')): [32, -22.307015533559024], (('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.util.Arrays.asList(T[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.util.Arrays.asList(T[])', 'java.util.Arrays.asList(T[])', 'DStop', 'java.util.Arrays.asList(T[])', 'DStop', 'DStop')): [18, -19.492947902996093]}

counter: 25
num skipped: 3
{'include': ['java.util.Scanner.hasNextLine()', 'java.lang.String.charAt(int)'], 'exclude': ['java.util.Random.nextBytes(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.charAt(int)')): [5, -16.979787826538086], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)')): [2, -19.915138363838196], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)'), (False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)', 'DStop')): [19, -24.25864966213703], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)'), (False, False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)', 'java.lang.String.charAt(int)', 'DStop')): [5, -24.89237517118454], (('DSubTree', 'java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)', 'java.lang.String.indexOf(java.lang.String,int)'), (False, False, False, False, False), ('java.util.Scanner.hasNextLine()', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.charAt(int)', 'java.lang.String.indexOf(java.lang.String,int)', 'DStop')): [19, -23.314114719629288]}

counter: 26
num skipped: 3
{'include': ['$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'], 'exclude': ['javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()')): [14, -7.434324622154236], (('DSubTree', '$NOT$java.io.File.isDirectory()'), (False, False), ('$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])')): [5, -6.7823967933654785], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', 'DStop')): [6, -5.788685858249664], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()'), (False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()')): [9, -5.349844932556152], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()')): [1, -7.301288992166519], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()'), (False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])')): [5, -6.168612778186798], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'), (False, False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', 'DStop')): [8, -7.736792430281639], (('DSubTree', 'java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.canRead()'), (False, False, False, False, False), ('java.text.MessageFormat.format(java.lang.String,java.lang.Object[])', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.isDirectory()', '$NOT$java.io.File.canRead()', 'DStop')): [2, -5.706337563693523]}

counter: 27
num skipped: 3
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.lang.StringBuffer.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [19, -12.97037953871768], (('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DStop')): [31, -4.340951046789996]}

counter: 28
num skipped: 3
{'include': ['java.util.List<java.io.File>.add(java.io.File)', 'DBranch'], 'exclude': ['java.lang.System.nanoTime()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.io.File>.add(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', 'java.io.File.File(java.lang.String)', '$NOT$java.io.File.exists()', 'java.io.File.isDirectory()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.List<java.io.File>.add(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', 'java.io.File.File(java.lang.String)', 'DStop', 'java.io.File.isDirectory()', 'DStop', 'DStop')): [11, -16.563499450683594], (('DSubTree', 'java.util.List<java.io.File>.add(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', 'java.io.File.File(java.lang.String)', '$NOT$java.io.File.exists()', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.List<java.io.File>.add(java.io.File)', 'DBranch', '$NOT$java.io.File.exists()', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop', 'DStop')): [39, -11.165134167298675]}

counter: 29
num skipped: 3
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [12, -15.258153915405273], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [5, -11.789710622280836], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [6, -10.209101876243949], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DLoop', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DLoop', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, False, True, True, False, False, True, True, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DLoop', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [27, -17.599645296810195]}

counter: 30
num skipped: 3
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()')): [1, -20.70517635345459], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [2, -19.566962495446205], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [7, -10.55385086685419], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.lang.String.valueOf(long)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.lang.String.valueOf(long)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [9, -17.41057812422514], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.lang.String.valueOf(long)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.lang.String.valueOf(long)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'java.lang.String.valueOf(char[])')): [31, -14.490636445581913]}

counter: 31
num skipped: 3
{'include': ['$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'exclude': ['java.io.File.getCanonicalPath()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.Set<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)')): [37, -2.2761035561561584], (('DSubTree', '$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'), (False, False, False), ('$NOT$java.util.Set<java.lang.String>.isEmpty()', '$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop')): [13, -5.5465597454458475]}

counter: 32
num skipped: 3
{'include': ['java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch'], 'exclude': ['java.awt.geom.Point2D.getY()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -10.005337476730347]}

counter: 33
num skipped: 3
{'include': ['DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.security.MessageDigest.digest()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [6, -12.641570091247559], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.Class.forName(java.lang.String)', 'DStop')): [44, -13.462973245885223]}

counter: 34
num skipped: 3
{'include': ['java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'java.net.URI.create(java.lang.String)'], 'exclude': ['java.lang.Exception.Exception()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)'), (False, False), ('java.lang.reflect.Field.set(java.lang.Object,java.lang.Object)', 'java.net.URI.create(java.lang.String)')): [50, -3.6940501928329468]}

counter: 35
num skipped: 3
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [23, -12.162970185279846], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)')): [4, -17.975486636161804], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.util.Calendar.getTimeInMillis()')): [5, -19.41392683982849], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.TimeZone.getTimeZone(java.lang.String)'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.getTimeInMillis()')): [3, -16.61594569683075], (('DSubTree', 'java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.setTimeInMillis(long)'), (False, False, False), ('java.util.TimeZone.getTimeZone(java.lang.String)', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [15, -15.613993644714355]}

counter: 36
num skipped: 3
{'include': ['java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()'], 'exclude': ['java.lang.String.valueOf(char[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getX()'), (False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()')): [47, -11.87759244441986], (('DSubTree', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()'), (False, False, False), ('java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getWidth()', 'DStop')): [3, -9.882932705804706]}

counter: 37
num skipped: 3
{'include': ['java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'], 'exclude': ['java.lang.StringBuilder.append(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()')): [21, -32.847986459732056], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.lock()', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'DStop')): [8, -28.534751179628074], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.unlock()'), (False, False), ('java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()')): [2, -31.1631760597229], (('DSubTree', 'java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()'), (False, False, False), ('java.util.concurrent.locks.ReentrantLock.unlock()', 'java.util.concurrent.locks.ReentrantLock.lock()', 'DStop')): [19, -25.189917367883027]}

counter: 38
num skipped: 3
{'include': ['java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.regex.Matcher.matches()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()'), (False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.DateFormat.format(java.util.Date)')): [2, -17.644298553466797], (('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)'), (False, False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [6, -12.034576058387756], (('DSubTree', 'java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>>.ArrayList<Map<String,Object>>()', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [42, -8.65255443751812]}

counter: 39
num skipped: 3
{'include': ['java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'], 'exclude': ['java.lang.Class<Tau_T>.getCanonicalName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.HashSet.HashSet()'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.HashSet.HashSet()', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)')): [2, -11.802588701248169], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Properties.getProperty(java.lang.String)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Properties.getProperty(java.lang.String)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)')): [1, -9.009280890226364], (('DSubTree', 'java.lang.Boolean.toString(boolean)'), (False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)')): [12, -5.63336718082428], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Integer.toString(int)')): [2, -9.107957925647497], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'java.lang.Integer.toString(int)')): [9, -7.83039790391922], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)'), (False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)')): [23, -5.962696015834808], (('DSubTree', 'java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)'), (False, False, False, False), ('java.lang.Boolean.toString(boolean)', 'java.lang.Integer.toString(int)', 'java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)', 'DStop')): [1, -8.938000671565533]}

counter: 40
num skipped: 3
{'include': ['DExcept', 'java.lang.System.getenv(java.lang.String)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop', 'DStop')): [3, -13.985134601593018], (('DSubTree', 'DExcept', 'java.lang.System.getenv(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.System.getenv(java.lang.String)', 'java.lang.Integer.valueOf(java.lang.String)', 'DStop')): [47, -13.98784884082852]}

counter: 41
num skipped: 3
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.valueOf(long)')): [9, -11.16472801566124], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.valueOf(long)'), (False, False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'java.lang.String.valueOf(long)', 'DStop')): [41, -8.023243885487318]}

counter: 42
num skipped: 3
{'include': ['javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)'], 'exclude': ['java.awt.Shape.getBounds2D()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getWidth()'), (False, False), ('javax.swing.JComponent.getWidth()', 'java.lang.Math.min(int,int)')): [36, -2.922955758869648], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()'), (False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.lang.Math.min(int,int)')): [14, -3.0179257169365883]}

counter: 43
num skipped: 3
{'include': ['java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()'], 'exclude': ['java.lang.reflect.Field.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)'), (False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.execute()')): [2, -23.210368156433105], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)'), (False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()')): [10, -10.612941682338715], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()'), (False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'DStop')): [2, -8.04460808634758], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [23, -10.314964070916176], (('DSubTree', 'java.sql.PreparedStatement.setInt(int,int)', 'java.lang.reflect.Field.getType()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()'), (False, False, False, False, False, False), ('java.sql.PreparedStatement.setInt(int,int)', 'java.lang.reflect.Field.getType()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'java.sql.PreparedStatement.execute()', 'java.sql.Statement.close()', 'DStop')): [13, -11.601086735725403]}

counter: 44
num skipped: 3
{'include': ['java.awt.Color.Color(int)', 'java.awt.Color.getBlue()'], 'exclude': ['java.lang.Math.abs(float)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Color.Color(int)'), (False, False), ('java.awt.Color.Color(int)', 'java.awt.Color.getBlue()')): [2, -37.64320945739746], (('DSubTree', 'java.awt.Color.Color(int)', 'java.awt.Color.getBlue()'), (False, False, False), ('java.awt.Color.Color(int)', 'java.awt.Color.getBlue()', 'DStop')): [9, -28.010090017691255], (('DSubTree', 'java.awt.Color.getBlue()', 'java.awt.Color.Color(int)'), (False, False, False), ('java.awt.Color.getBlue()', 'java.awt.Color.Color(int)', 'DStop')): [37, -25.26530236657709], (('DSubTree', 'java.awt.Color.getBlue()'), (False, False), ('java.awt.Color.getBlue()', 'java.awt.Color.Color(int)')): [2, -23.461599349975586]}

counter: 45
num skipped: 3
{'include': ['java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.lang.Long.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'), (False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [18, -5.893191814422607], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop')): [29, -5.983650013804436], (('DSubTree', 'java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.HashSet<java.lang.String>.HashSet<String>()'), (False, False, False), ('java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()', 'java.util.HashSet<java.lang.String>.HashSet<String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [3, -8.962438583374023]}

counter: 46
num skipped: 3
{'include': ['java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'], 'exclude': ['java.lang.Double.valueOf(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.asList(T[])'), (False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)')): [24, -10.090875625610352], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'DStop')): [15, -6.511946514248848], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.sort(java.util.List,java.util.Comparator)')): [3, -14.23597937822342], (('DSubTree', 'java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False, False), ('java.util.Arrays.asList(T[])', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'DStop')): [8, -10.844629310071468]}

counter: 47
num skipped: 3
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()')): [6, -14.359844207763672], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.util.Calendar.getTimeInMillis()', 'DStop')): [44, -13.096685454249382]}

counter: 48
num skipped: 3
{'include': ['DExcept', 'java.util.Date.Date(java.lang.String)'], 'exclude': ['java.util.jar.Attributes.getValue(java.util.jar.Attributes.Name)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Date.Date(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -8.601703941822052]}

counter: 50
num skipped: 4
{'include': ['java.util.List<T>.isEmpty()', 'java.util.List<T>.size()'], 'exclude': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<T>.isEmpty()'), (False, False), ('java.util.List<T>.isEmpty()', 'java.util.List<T>.size()')): [1, -25.08668279647827], (('DSubTree', 'java.util.List<T>.isEmpty()', 'java.util.List<T>.size()'), (False, False, False), ('java.util.List<T>.isEmpty()', 'java.util.List<T>.size()', 'DStop')): [19, -21.092897147056647], (('DSubTree', 'java.util.List<T>.size()', 'java.util.List<T>.isEmpty()'), (False, False, False), ('java.util.List<T>.size()', 'java.util.List<T>.isEmpty()', 'DStop')): [19, -13.640660483390093], (('DSubTree', 'java.util.List<T>.size()'), (False, False), ('java.util.List<T>.size()', 'java.util.List<T>.isEmpty()')): [10, -14.106106981635094], (('DSubTree', 'java.util.List<T>.size()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)'), (False, False, False), ('java.util.List<T>.size()', 'java.util.List<java.lang.String>.addAll(java.util.Collection)', 'java.util.List<T>.isEmpty()')): [1, -14.943834483623505]}

counter: 52
num skipped: 5
{'include': ['DBranch', '$NOT$java.lang.String.matches(java.lang.String)'], 'exclude': ['java.net.InetAddress.isAnyLocalAddress()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [10, -16.136549472808838], (('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [4, -23.840688578784466], (('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [14, -19.844038497656584], (('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [1, -24.94866609852761], (('DSubTree', 'DBranch', '$NOT$java.lang.String.matches(java.lang.String)', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False), ('DBranch', '$NOT$java.lang.String.matches(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [21, -14.7511493191123]}

counter: 53
num skipped: 5
{'include': ['java.awt.Dialog.setTitle(java.lang.String)', 'java.awt.BorderLayout.BorderLayout()'], 'exclude': ['java.util.List<java.lang.String>.isEmpty()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Dialog.setTitle(java.lang.String)'), (False, False), ('java.awt.Dialog.setTitle(java.lang.String)', 'java.awt.BorderLayout.BorderLayout()')): [6, -22.296758711338043], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()'), (False, False), ('java.awt.BorderLayout.BorderLayout()', 'java.awt.Dialog.setTitle(java.lang.String)')): [5, -12.737462043762207], (('DSubTree', 'java.awt.BorderLayout.BorderLayout()', 'java.awt.Dialog.setTitle(java.lang.String)'), (False, False, False), ('java.awt.BorderLayout.BorderLayout()', 'java.awt.Dialog.setTitle(java.lang.String)', 'DStop')): [39, -11.565641987574054]}

counter: 54
num skipped: 5
{'include': ['java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.concurrent.atomic.AtomicInteger.get()'], 'exclude': ['$NOT$java.util.Arrays.equals(long[],long[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.concurrent.atomic.AtomicInteger.get()')): [24, -16.326695442199707], (('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.concurrent.atomic.AtomicInteger.get()'), (False, False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.util.concurrent.atomic.AtomicInteger.get()', 'DStop')): [26, -17.373411524225958]}
