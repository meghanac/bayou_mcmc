data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.initCause(java.lang.Throwable)'], 'exclude': ['java.lang.String.getBytes(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.RuntimeException.RuntimeException()'), (False, False), ('java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.initCause(java.lang.Throwable)')): [5, -3.798152804374695], (('DSubTree', 'java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.initCause(java.lang.Throwable)'), (False, False, False), ('java.lang.RuntimeException.RuntimeException()', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'DStop')): [45, -1.9895816566422582]}

counter: 1
num skipped: 0
{'include': ['java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()'], 'exclude': ['java.awt.Graphics.setColor(java.awt.Color)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getClickCount()'), (False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()')): [2, -2.6670679151557124], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()'), (False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()')): [19, -0.30561708178720437], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()'), (False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getX()')): [8, -3.911177025642246], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()'), (False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'DStop')): [3, -0.1836927910335362], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.abs(int)'), (False, False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.abs(int)', 'DStop')): [13, -3.4593305876478553], (('DSubTree', 'java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.abs(int)'), (False, False, False, False, False), ('java.awt.event.MouseEvent.getClickCount()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getX()', 'java.lang.Math.abs(int)', 'DStop')): [5, -4.990241222083569]}

counter: 3
num skipped: 1
{'include': ['java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'], 'exclude': ['java.util.zip.ZipEntry.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.IOException.IOException(java.lang.String)'), (False, False), ('java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()')): [2, -3.8353388905525208], (('DSubTree', 'java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()'), (False, False, False), ('java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])')): [5, -5.824925005435944], (('DSubTree', 'java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False), ('java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)')): [17, -5.290032081305981], (('DSubTree', 'java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'), (False, False, False, False, False), ('java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.FilterInputStream.read(byte[])')): [21, -2.9763039350509644], (('DSubTree', 'java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.FilterInputStream.read(byte[])'), (False, False, False, False, False, False), ('java.io.IOException.IOException(java.lang.String)', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream()', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.FilterInputStream.read(byte[])', 'java.io.ByteArrayOutputStream.toByteArray()')): [5, -4.082806404680014]}

counter: 4
num skipped: 1
{'include': ['java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'], 'exclude': ['java.lang.Thread.yield()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(float,float)'), (False, False), ('java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)')): [5, -1.01145089417696], (('DSubTree', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'), (False, False, False), ('java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'DStop')): [45, -0.8845327566377819]}

counter: 5
num skipped: 1
{'include': ['DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': ['java.lang.String.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -8.506762883393094]}

counter: 6
num skipped: 1
{'include': ['java.lang.Thread.currentThread()', 'java.util.concurrent.TimeUnit.toMillis(long)'], 'exclude': ['java.util.Collections.sort(java.util.List,java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Thread.currentThread()'), (False, False), ('java.lang.Thread.currentThread()', 'java.util.concurrent.TimeUnit.toMillis(long)')): [12, -0.6067056311294436], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()'), (False, False, False), ('java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()', 'java.util.concurrent.TimeUnit.toMillis(long)')): [26, -5.498762204369996], (('DSubTree', 'java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()', 'java.util.concurrent.TimeUnit.toMillis(long)'), (False, False, False, False), ('java.lang.Thread.currentThread()', 'java.lang.System.currentTimeMillis()', 'java.util.concurrent.TimeUnit.toMillis(long)', 'DStop')): [12, -3.162185118533671]}

counter: 7
num skipped: 1
{'include': ['java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()'], 'exclude': ['java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)'), (False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()')): [10, -0.7860426902770996], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()'), (False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.io.StringWriter.toString()')): [23, -3.2656947895884514], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()'), (False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.io.FileInputStream.close()')): [2, -1.6722987410612404], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.FileInputStream.close()')): [6, -5.771960936486721], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)'), (False, False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.util.Arrays.asList(T[])')): [8, -5.064404666423798], (('DSubTree', 'java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()'), (False, False, False), ('java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)', 'java.io.ObjectInputStream.readInt()', 'java.util.Arrays.asList(T[])')): [1, -3.7708984259516]}

counter: 8
num skipped: 1
{'include': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.isEmpty()'], 'exclude': ['java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'), (False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.isEmpty()')): [14, -1.4653993248939514], (('DSubTree', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.isEmpty()'), (False, False, False), ('java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.isEmpty()', 'DStop')): [36, -0.2734476691111922]}

counter: 9
num skipped: 1
{'include': ['java.util.Vector<java.lang.String>.addElement(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)'], 'exclude': ['java.io.File.createNewFile()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Vector<java.lang.String>.addElement(java.lang.String)'), (False, False), ('java.util.Vector<java.lang.String>.addElement(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)')): [11, -2.689735598862171], (('DSubTree', 'java.util.Vector<java.lang.String>.addElement(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)'), (False, False, False), ('java.util.Vector<java.lang.String>.addElement(java.lang.String)', 'java.lang.String.startsWith(java.lang.String)', 'DStop')): [39, -3.4351494712755084]}

counter: 10
num skipped: 1
{'include': ['java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'], 'exclude': ['java.lang.Boolean.booleanValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.DatagramSocket.isClosed()'), (False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()')): [16, -6.167496006935835], (('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'), (False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'DStop')): [34, -1.1521745334612206]}

counter: 11
num skipped: 1
{'include': ['java.io.File.mkdir()', 'java.io.File.renameTo(java.io.File)'], 'exclude': ['java.lang.Thread.Thread(java.lang.Runnable)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()'), (False, False), ('java.io.File.mkdir()', 'java.io.File.renameTo(java.io.File)')): [14, -7.077709317207336], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.renameTo(java.io.File)'), (False, False, False), ('java.io.File.mkdir()', 'java.io.File.renameTo(java.io.File)', 'DStop')): [36, -5.320714019238949]}

counter: 12
num skipped: 1
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'], 'exclude': ['java.util.List<>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()')): [2, -0.6085340976715088], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()', 'DStop')): [48, -0.6872244849801064]}

counter: 13
num skipped: 1
{'include': ['java.lang.String.String(char[])', 'java.lang.StringBuffer.StringBuffer(int)'], 'exclude': ['$NOT$java.lang.Character.isDigit(char)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.String(char[])'), (False, False), ('java.lang.String.String(char[])', 'java.lang.StringBuffer.StringBuffer(int)')): [15, -3.0865389220416546], (('DSubTree', 'java.lang.String.String(char[])', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False), ('java.lang.String.String(char[])', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.String.intern()')): [7, -6.919356904923916], (('DSubTree', 'java.lang.String.String(char[])', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False, False, False), ('java.lang.String.String(char[])', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.String.intern()')): [14, -14.822947725653648], (('DSubTree', 'java.lang.String.String(char[])', 'java.lang.String.intern()', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False, False, False, False), ('java.lang.String.String(char[])', 'java.lang.String.intern()', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.String.intern()')): [5, -15.713710390496999], (('DSubTree', 'java.lang.String.String(char[])', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False, False, False), ('java.lang.String.String(char[])', 'java.util.Arrays.fill(char[],char)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(char[],int,int)')): [9, -10.894554383354262]}

counter: 14
num skipped: 1
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -10.913744404911995]}

counter: 15
num skipped: 1
{'include': ['DBranch', 'java.lang.Math.exp(double)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.exp(double)', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'java.lang.Math.exp(double)', 'java.util.Collections.reverse(java.util.List)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.exp(double)', 'java.util.List<java.lang.String>.contains(java.lang.Object)', 'DStop', 'java.util.Collections.reverse(java.util.List)', 'DStop', 'DStop')): [50, -5.964074462652206]}

counter: 16
num skipped: 1
{'include': ['DExcept', 'java.sql.PreparedStatement.executeUpdate()'], 'exclude': ['java.util.Arrays.sort(T[],java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DStop', 'DStop')): [50, -10.99486219882965]}

counter: 17
num skipped: 1
{'include': ['java.io.PrintWriter.PrintWriter(java.io.Writer)', '$NOT$java.lang.String.isEmpty()'], 'exclude': ['java.lang.String.endsWith(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False), ('java.io.PrintWriter.PrintWriter(java.io.Writer)', '$NOT$java.lang.String.isEmpty()')): [20, -1.0933652594685555], (('DSubTree', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', '$NOT$java.lang.String.isEmpty()'), (False, False, False), ('java.io.PrintWriter.PrintWriter(java.io.Writer)', '$NOT$java.lang.String.isEmpty()', 'DStop')): [30, -0.4347084015607834]}

counter: 18
num skipped: 1
{'include': ['java.util.Arrays.copyOf(byte[],int)', 'java.nio.charset.Charset.forName(java.lang.String)'], 'exclude': ['java.lang.Long.toString(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.copyOf(byte[],int)'), (False, False), ('java.util.Arrays.copyOf(byte[],int)', 'java.nio.charset.Charset.forName(java.lang.String)')): [34, -2.115771070122719], (('DSubTree', 'java.util.Arrays.copyOf(byte[],int)', 'java.nio.charset.Charset.forName(java.lang.String)'), (False, False, False), ('java.util.Arrays.copyOf(byte[],int)', 'java.nio.charset.Charset.forName(java.lang.String)', 'DStop')): [16, -1.1909817289561033]}

counter: 19
num skipped: 1
{'include': ['java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])'], 'exclude': ['java.lang.StackTraceElement.getClassName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<>.getCanonicalName()'), (False, False), ('java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])')): [13, -0.21378762647509575], (('DSubTree', 'java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])'), (False, False, False), ('java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'DStop')): [15, -0.39607044495642185], (('DSubTree', 'java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'), (False, False, False, False), ('java.lang.Class<>.getCanonicalName()', 'java.lang.Class<>.getConstructor(java.lang.Class[])', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'DStop')): [22, -1.9280100903124548]}

counter: 20
num skipped: 1
{'include': ['java.lang.StringBuffer.StringBuffer(int)', 'java.lang.String.String(char[])'], 'exclude': ['$NOT$java.lang.Character.isDigit(char)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.String.String(char[])')): [6, -1.526730716228485], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])')): [2, -4.51300491055008], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])'), (False, False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])', 'DStop')): [13, -3.052812504582107], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])', 'java.lang.StringBuffer.toString()'), (False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])', 'java.lang.StringBuffer.toString()', 'DStop')): [18, -5.3826932437950745], (('DSubTree', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.toString()'), (False, False, False, False, False, False), ('java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.String.String(char[])', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.toString()', 'DStop')): [11, -2.8850271420087665]}

counter: 21
num skipped: 1
{'include': ['javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)'], 'exclude': ['java.awt.Toolkit.getDefaultToolkit()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)'), (False, False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)', 'DStop')): [27, -2.2723394436761737], (('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)')): [23, -0.33400557562708855]}

counter: 22
num skipped: 1
{'include': ['java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()'], 'exclude': ['java.lang.Long.Long(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.ArrayList()'), (False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()')): [19, -4.10135955363512], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()'), (False, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DStop')): [31, -3.273358992766589]}

counter: 23
num skipped: 1
{'include': ['java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()'], 'exclude': ['java.lang.Math.max(double,double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getShearX()'), (False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()')): [1, -35.37979507446289], (('DSubTree', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()'), (False, False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()', 'DStop')): [1, -34.742044588550925], (('DSubTree', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getScaleY()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getScaleY()', 'DStop')): [4, -33.80121886597044], (('DSubTree', 'java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()', 'DStop')): [8, -17.274589595617726], (('DSubTree', 'java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()'), (False, False, False, False, False), ('java.awt.geom.AffineTransform.getScaleX()', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getScaleY()', 'DStop')): [36, -4.497200863177568]}

counter: 24
num skipped: 1
{'include': ['java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.add(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)')): [2, -5.200127549469471], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [48, -1.2909366339445114]}

counter: 25
num skipped: 1
{'include': ['java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)'], 'exclude': ['java.lang.StringBuilder.length()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)')): [21, -3.306539297103882], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)', 'DStop')): [29, -0.9822903929743916]}

counter: 26
num skipped: 1
{'include': ['java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)'], 'exclude': ['java.lang.StringBuilder.length()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getProperty(java.lang.String)'), (False, False), ('java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)')): [34, -9.608431830070913], (('DSubTree', 'java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)'), (False, False, False), ('java.lang.System.getProperty(java.lang.String)', 'javax.swing.JFileChooser.JFileChooser(java.lang.String)', 'DStop')): [16, -0.1867950288578868]}

counter: 27
num skipped: 1
{'include': ['java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'], 'exclude': ['java.sql.ResultSet.getInt(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.setTimeInMillis(long)'), (False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)')): [5, -6.0758161544799805], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'), (False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'DStop')): [44, -6.818101197481155], (('DSubTree', 'java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.Calendar.setTimeInMillis(long)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [1, -10.871112630935386]}

counter: 28
num skipped: 1
{'include': ['java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ObjectInputStream.readObject()'], 'exclude': ['$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.File(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.File(java.lang.String,java.lang.String)', 'java.io.ObjectInputStream.readObject()')): [50, -4.00964027090231]}

counter: 29
num skipped: 1
{'include': ['DBranch', 'java.io.OutputStream.write(int)'], 'exclude': ['java.io.ObjectInputStream.defaultReadObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.OutputStream.write(int)', 'java.io.File.getPath()', 'java.io.OutputStream.write(int)', 'java.io.File.getPath()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.OutputStream.write(int)', 'java.io.File.getPath()', 'DStop', 'java.io.File.getPath()', 'DStop', 'DStop')): [50, -7.223253405769356]}

counter: 30
num skipped: 1
{'include': ['java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])'], 'exclude': ['java.security.Signature.sign()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.update(byte[])'), (False, False), ('java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])')): [11, -10.18987565941643], (('DSubTree', 'java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])'), (False, False, False), ('java.security.Signature.update(byte[])', 'java.security.Signature.verify(byte[])', 'DStop')): [39, -4.455614872244041]}

counter: 31
num skipped: 1
{'include': ['DBranch', 'java.util.Collections.enumeration(java.util.Collection)'], 'exclude': ['javax.swing.tree.DefaultMutableTreeNode.getUserObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop', 'DStop')): [50, -7.522883550263941]}

counter: 32
num skipped: 1
{'include': ['java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'], 'exclude': ['java.util.List<java.lang.String>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()'), (False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [28, -0.8933260887861252], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop')): [22, -3.901837307959795]}

counter: 33
num skipped: 1
{'include': ['DBranch', 'java.util.Arrays.copyOf(int[],int)'], 'exclude': ['java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.String.length()', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.String.length()', 'DStop', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop', 'DStop')): [50, -9.208967477083206]}

counter: 34
num skipped: 1
{'include': ['DBranch', 'java.lang.Math.exp(double)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.exp(double)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.Math.exp(double)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.exp(double)', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -5.93658792937822]}

counter: 35
num skipped: 1
{'include': ['DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': ['java.util.HashMap<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.Integer.valueOf(int)', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.text.DateFormat.format(java.util.Date)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.lang.Integer.valueOf(int)', 'DStop', 'java.text.DateFormat.format(java.util.Date)', 'DStop', 'DStop')): [50, -11.082801849292082]}

counter: 38
num skipped: 3
{'include': ['java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initSign(java.security.PrivateKey)'], 'exclude': ['java.security.Security.getProvider(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)'), (False, False), ('java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initSign(java.security.PrivateKey)')): [22, -2.7913804948329926], (('DSubTree', 'java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.sign()'), (False, False, False, False, False), ('java.security.Signature.getInstance(java.lang.String,java.security.Provider)', 'java.security.Signature.initSign(java.security.PrivateKey)', 'java.security.Signature.update(byte[])', 'java.security.Signature.sign()', 'DStop')): [28, -0.6453629480674863]}

counter: 39
num skipped: 3
{'include': ['DBranch', 'java.lang.Math.exp(double)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [4, -14.82770037651062], (('DSubTree', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [9, -12.53834553910201], (('DSubTree', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [21, -5.987086257377086], (('DSubTree', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Math.exp(double)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [16, -3.8530131089064525]}

counter: 40
num skipped: 3
{'include': ['DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'exclude': ['java.lang.Double.Double(double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.io.File.renameTo(java.io.File)', 'DExcept'), (False, True, True, False, False), ('DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.io.File.renameTo(java.io.File)', 'DStop', 'DStop')): [50, -8.233964265222312]}

counter: 41
num skipped: 3
{'include': ['DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'], 'exclude': ['$NOT$java.awt.GraphicsEnvironment.isHeadless()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop', 'DStop')): [50, -6.733062475046609]}

counter: 42
num skipped: 3
{'include': ['$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])'], 'exclude': ['java.lang.StringBuffer.append(char)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])')): [3, -2.718455322086811], (('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])'), (False, False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', 'DStop')): [4, -2.080156617797911], (('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False, False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)', 'DStop')): [3, -6.400924809277058], (('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.InputStream.close()'), (False, False, False, False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.InputStream.close()', 'DStop')): [10, -7.791140472982079], (('DSubTree', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)'), (False, False, False, False), ('$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.OutputStream.write(byte[])', '$NOT$java.lang.String.startsWith(java.lang.String)', 'java.io.InputStream.close()')): [30, -6.136196330189705]}

counter: 43
num skipped: 3
{'include': ['DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': ['java.lang.StringBuffer.append(char[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop', 'DStop')): [42, -6.213298559188843], (('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'DLoop'), (False, True, True, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop')): [8, -5.748373707057908]}

counter: 45
num skipped: 4
{'include': ['java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': ['java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getType()'), (False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)')): [28, -4.824798054993153], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [22, -4.897160294000059]}

counter: 46
num skipped: 4
{'include': ['java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [38, -0.8381591842771741], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [11, -0.06064506965140026], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', '$NOT$java.lang.String.equals(java.lang.Object)')): [1, -6.069159428123385]}

counter: 47
num skipped: 4
{'include': ['$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)'], 'exclude': ['java.util.List<java.lang.Integer>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()'), (False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)')): [17, -6.054423451423645], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)'), (False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)', 'DStop')): [2, -5.567164172884077], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)'), (False, False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)', 'DStop')): [25, -5.910949930548668], (('DSubTree', '$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)'), (False, False, False), ('$NOT$java.util.List<java.lang.String>.isEmpty()', 'java.lang.String.substring(int,int)', 'java.lang.String.substring(int)')): [6, -1.4831967204809189]}

counter: 48
num skipped: 4
{'include': ['java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'javax.swing.JLabel.setText(java.lang.String)'], 'exclude': ['java.lang.Character.toString(char)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)'), (False, False), ('java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'javax.swing.JLabel.setText(java.lang.String)')): [8, -0.38884180784225464], (('DSubTree', 'java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'javax.swing.JLabel.setText(java.lang.String)'), (False, False, False), ('java.awt.Component.addMouseListener(java.awt.event.MouseListener)', 'javax.swing.JLabel.setText(java.lang.String)', 'DStop')): [42, -2.002503235358745]}
