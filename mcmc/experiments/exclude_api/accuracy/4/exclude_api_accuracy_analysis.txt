data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['DExcept', 'java.sql.PreparedStatement.executeUpdate()'], 'exclude': ['java.util.Arrays.sort(T[],java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.execute()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.execute()', 'DStop', 'DStop')): [50, -14.802297051446658]}

counter: 1
num skipped: 0
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.io.ObjectOutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop', 'DStop')): [25, -2.438086897134781], (('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop')): [20, -0.3404170775320381], (('DSubTree', 'DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop', 'DStop')): [5, -1.1699482155963778]}

counter: 2
num skipped: 0
{'include': ['DExcept', 'java.sql.Statement.executeQuery(java.lang.String)'], 'exclude': ['java.awt.GraphicsEnvironment.getScreenDevices()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [3, -10.92653638496995], (('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop')): [47, -7.240608084946871]}

counter: 4
num skipped: 1
{'include': ['DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()'], 'exclude': ['java.util.StringTokenizer.nextToken()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -18.27597646481445]}

counter: 5
num skipped: 1
{'include': ['DBranch', 'java.math.BigDecimal.valueOf(long)'], 'exclude': ['java.lang.ref.WeakReference<Tau_T>.WeakReference(Tau_T)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.length()', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.length()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.math.BigDecimal.valueOf(long)', 'java.lang.String.length()', 'DStop', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -7.107817208394408]}

counter: 6
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder()', 'java.lang.Double.valueOf(double)'], 'exclude': ['java.util.Arrays.sort(long[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder()'), (False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.Double.valueOf(double)')): [7, -0.9716477394104004], (('DSubTree', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.Double.valueOf(double)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder()', 'java.lang.Double.valueOf(double)', 'DStop')): [1, -2.9970983639359474], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.StringBuilder.StringBuilder()'), (False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.StringBuilder.StringBuilder()', 'DStop')): [27, -6.120756343007088], (('DSubTree', 'java.lang.Double.valueOf(double)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(int)'), (False, False, False, False), ('java.lang.Double.valueOf(double)', 'java.lang.StringBuilder.StringBuilder()', 'java.lang.StringBuilder.append(int)', 'DStop')): [15, -8.130896743386984]}

counter: 7
num skipped: 1
{'include': ['java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.size()'], 'exclude': ['java.io.Writer.write(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()'), (False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.size()')): [4, -0.027190574910491705], (('DSubTree', 'java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.size()'), (False, False, False), ('java.util.TreeSet<java.lang.String>.TreeSet<String>()', 'java.util.Set<java.lang.String>.size()', 'DStop')): [46, -2.101143233507173]}

counter: 8
num skipped: 1
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'], 'exclude': ['java.net.URL.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [28, -0.34485336125362664], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'DStop')): [15, -0.08759076986461878], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableCollection(java.util.Collection)', 'DStop')): [7, -1.3657158407149836]}

counter: 9
num skipped: 1
{'include': ['java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics.drawPolygon(int[],int[],int)'], 'exclude': ['java.awt.Graphics2D.setComposite(java.awt.Composite)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)'), (False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics.drawPolygon(int[],int[],int)')): [9, -15.09150230139494], (('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics.drawPolygon(int[],int[],int)'), (False, False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics.drawPolygon(int[],int[],int)', 'DStop')): [5, -12.374945458337606], (('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)'), (False, False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawPolygon(int[],int[],int)')): [13, -13.989915609359741], (('DSubTree', 'java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawPolygon(int[],int[],int)'), (False, False, False, False), ('java.awt.BasicStroke.BasicStroke(float)', 'java.awt.Graphics2D.setStroke(java.awt.Stroke)', 'java.awt.Graphics.drawPolygon(int[],int[],int)', 'DStop')): [23, -8.073259291704744]}

counter: 10
num skipped: 1
{'include': ['javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'], 'exclude': ['java.lang.Class.getConstructor(java.lang.Class[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'), (False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)')): [45, -2.2255420088768005], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [5, -0.793242521584034]}

counter: 11
num skipped: 1
{'include': ['java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()'], 'exclude': ['java.lang.Long.Long(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DStop', 'DStop')): [43, -2.873732758045662], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DStop', 'DStop')): [5, -5.158355706371367], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop'), (False, False, False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.add(java.lang.Object)', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DStop', 'DStop')): [2, -7.7200460258172825]}

counter: 12
num skipped: 1
{'include': ['java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'], 'exclude': ['javax.swing.JComponent.getFontMetrics(java.awt.Font)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FontMetrics.getHeight()'), (False, False), ('java.awt.FontMetrics.getHeight()', 'java.awt.FontMetrics.stringWidth(java.lang.String)')): [12, -3.321172347292304], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()')): [20, -2.578885570168495], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'), (False, False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'DStop')): [11, -0.679907685611397], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'), (False, False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'java.awt.Point.Point(int,int)')): [7, -4.078277099295519]}

counter: 13
num skipped: 1
{'include': ['java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.getComponentCount()'), (False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)')): [14, -0.5726111084222794], (('DSubTree', 'java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'), (False, False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)', 'DStop')): [36, -1.1391502004116774]}

counter: 14
num skipped: 1
{'include': ['java.util.Scanner.hasNextLine()', 'java.util.Scanner.nextLine()'], 'exclude': ['java.nio.ByteBuffer.allocate(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.util.Scanner.nextLine()')): [1, -7.487274169921875], (('DSubTree', 'java.util.Scanner.nextLine()'), (False, False), ('java.util.Scanner.nextLine()', 'java.util.Scanner.hasNextLine()')): [9, -4.40769636631012], (('DSubTree', 'java.util.Scanner.nextLine()', 'java.util.Scanner.hasNextLine()'), (False, False, False), ('java.util.Scanner.nextLine()', 'java.util.Scanner.hasNextLine()', 'DStop')): [40, -1.274578912416473]}

counter: 15
num skipped: 1
{'include': ['java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'], 'exclude': ['java.lang.Thread.yield()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(float,float)'), (False, False), ('java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)')): [8, -1.5087410472333431], (('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [25, -2.2066324204206467], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'DStop')): [17, -1.3013059142977]}

counter: 16
num skipped: 1
{'include': ['java.nio.charset.Charset.name()', 'java.lang.String.String(byte[],java.lang.String)'], 'exclude': ['java.util.regex.Pattern.matcher(java.lang.CharSequence)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.charset.Charset.name()', 'java.nio.charset.Charset.name()'), (False, False, False), ('java.nio.charset.Charset.name()', 'java.nio.charset.Charset.name()', 'java.lang.String.String(byte[],java.lang.String)')): [2, -2.26252508160087], (('DSubTree', 'java.nio.charset.Charset.name()'), (False, False), ('java.nio.charset.Charset.name()', 'java.lang.String.String(byte[],java.lang.String)')): [1, -0.09933647140860558], (('DSubTree', 'java.nio.charset.Charset.name()', 'java.lang.String.String(byte[],java.lang.String)'), (False, False, False), ('java.nio.charset.Charset.name()', 'java.lang.String.String(byte[],java.lang.String)', 'DStop')): [47, -0.3369501190027222]}

counter: 17
num skipped: 1
{'include': ['java.lang.String.toCharArray()', 'java.lang.StringBuffer.append(int)'], 'exclude': ['java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.toCharArray()'), (False, False), ('java.lang.String.toCharArray()', 'java.lang.StringBuffer.append(int)')): [10, -9.326873503625393], (('DSubTree', 'java.lang.String.toCharArray()', 'java.math.BigInteger.compareTo(java.math.BigInteger)'), (False, False, False), ('java.lang.String.toCharArray()', 'java.math.BigInteger.compareTo(java.math.BigInteger)', 'java.lang.StringBuffer.append(int)')): [11, -9.991869628429413], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)'), (False, False, False), ('java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(int)')): [12, -9.175831705331802], (('DSubTree', 'java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(int)'), (False, False, False, False), ('java.lang.String.toCharArray()', 'java.lang.StringBuffer.StringBuffer(int)', 'java.lang.StringBuffer.append(int)', 'java.lang.StringBuffer.append(char)')): [17, -7.485308107221499]}

counter: 18
num skipped: 1
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -4.1256484859623015]}

counter: 19
num skipped: 1
{'include': ['java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'], 'exclude': ['java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.getThreadFactory()'), (False, False), ('java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)')): [7, -1.6639082431793213], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.ThreadPoolExecutor.getThreadFactory()', 'java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)', 'DStop')): [43, -1.3132697194787397]}

counter: 20
num skipped: 1
{'include': ['javax.swing.JComponent.getWidth()', 'java.awt.Graphics2D.fill(java.awt.Shape)'], 'exclude': ['java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False), ('javax.swing.JComponent.getWidth()', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [3, -13.27034048223868], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)'), (False, False, False, False), ('javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'DStop')): [9, -11.453097984194756], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False), ('javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)')): [10, -4.397267520427704], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop')): [13, -5.1543819680809975], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop')): [10, -6.59551652893424], (('DSubTree', 'javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)'), (False, False, False, False, False, False), ('javax.swing.JComponent.getWidth()', 'javax.swing.JComponent.getHeight()', 'java.awt.Graphics.setColor(java.awt.Color)', 'java.awt.Graphics2D.fill(java.awt.Shape)', 'java.awt.Graphics.setColor(java.awt.Color)', 'DStop')): [5, -5.207645170390606]}

counter: 21
num skipped: 1
{'include': ['java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.Math.random()'], 'exclude': ['java.util.regex.Matcher.start()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.Math.random()')): [2, -1.934095187811181], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)'), (False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.Math.random()')): [9, -1.998053109535249], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.Math.random()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.Math.random()', 'DStop')): [1, -2.4343997276446316], (('DSubTree', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.Math.random()'), (False, False, False, False), ('java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(char)', 'java.lang.Math.random()', 'java.lang.StringBuilder.append(char)')): [38, -3.299781572073698]}

counter: 22
num skipped: 1
{'include': ['java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.Date.toInstant()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date(java.lang.String)'), (False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [14, -4.748882085084915], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [14, -4.378869891166687], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', '$NOT$java.util.Arrays.equals(long[],long[])'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', '$NOT$java.util.Arrays.equals(long[],long[])', 'DStop')): [6, -6.224079875275493], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Date.Date(java.lang.String)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Date.Date(java.lang.String)', 'DStop')): [1, -5.082475432980573], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Date.Date(java.lang.String)')): [13, -0.8296143338084221], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Date.Date(java.lang.String)')): [2, -1.2265651281923056]}

counter: 23
num skipped: 1
{'include': ['javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point()'], 'exclude': ['java.util.Collections.shuffle(java.util.List)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False), ('javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point()')): [14, -9.153296255506575], (('DSubTree', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point()'), (False, False, False), ('javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point()', 'DStop')): [4, -8.373909092100803], (('DSubTree', 'java.awt.Point.Point()'), (False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)')): [12, -5.237255074083805], (('DSubTree', 'java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'DStop')): [14, -1.3831695134285837], (('DSubTree', 'java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point(int,int)'), (False, False, False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point(int,int)', 'DStop')): [5, -3.2905585112748668], (('DSubTree', 'java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)'), (False, False, False), ('java.awt.Point.Point()', 'javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)', 'java.awt.Point.Point(int,int)')): [1, -1.004422882804647]}

counter: 25
num skipped: 2
{'include': ['DBranch', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)'], 'exclude': ['java.lang.Class.getDeclaredField(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.nio.ByteBuffer.getInt()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.nio.ByteBuffer.order(java.nio.ByteOrder)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop', 'java.nio.ByteBuffer.getInt()', 'DStop', 'DStop')): [50, -29.726871879021928]}

counter: 26
num skipped: 2
{'include': ['DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'exclude': ['java.util.ArrayList.add(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.util.Set.add(java.lang.Object)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.util.Set.add(java.lang.Object)', 'DStop', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop', 'DStop')): [50, -5.556547943502665]}

counter: 28
num skipped: 3
{'include': ['DLoop', 'java.util.Vector.Vector()'], 'exclude': ['javax.swing.JFileChooser.JFileChooser()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Vector.Vector()', 'java.util.Vector.addElement(java.lang.Object)', 'DStop', 'DStop')): [50, -4.675597786903381]}

counter: 29
num skipped: 3
{'include': ['java.net.ServerSocket.ServerSocket(int)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'], 'exclude': ['java.lang.Thread.sleep(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.ServerSocket.ServerSocket(int)'), (False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)')): [37, -1.1051812693476677], (('DSubTree', 'java.net.ServerSocket.ServerSocket(int)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)'), (False, False, False), ('java.net.ServerSocket.ServerSocket(int)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'DStop')): [13, -0.29489182465476915]}

counter: 30
num skipped: 3
{'include': ['DExcept', 'javax.naming.Context.close()'], 'exclude': ['java.util.ArrayList<java.lang.Float>.ArrayList<Float>()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.naming.Context.close()', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.naming.Context.close()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -14.209969408810139]}

counter: 31
num skipped: 3
{'include': ['java.util.Scanner.hasNextLine()', 'java.util.Scanner.nextLine()'], 'exclude': ['java.nio.ByteBuffer.allocate(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Scanner.hasNextLine()'), (False, False), ('java.util.Scanner.hasNextLine()', 'java.util.Scanner.nextLine()')): [9, -3.4652597904205322], (('DSubTree', 'java.util.Scanner.nextLine()'), (False, False), ('java.util.Scanner.nextLine()', 'java.util.Scanner.hasNextLine()')): [41, -6.4031171798706055]}

counter: 32
num skipped: 3
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'], 'exclude': ['java.net.URL.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [22, -0.6738712135702372], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'DStop')): [16, -2.907388413674198], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'DStop')): [1, -5.855288682505488], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'DStop')): [3, -6.510428551584482], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)')): [1, -5.712078429758549], (('DSubTree', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False, False, False, False), ('java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)')): [7, -6.360081227496266]}

counter: 33
num skipped: 3
{'include': ['DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': ['java.math.BigDecimal.divide(java.math.BigDecimal,java.math.RoundingMode)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.util.Collections.enumeration(java.util.Collection)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.util.Collections.enumeration(java.util.Collection)', 'DStop', 'DStop')): [50, -7.885395144752692]}

counter: 34
num skipped: 3
{'include': ['java.io.File.exists()', 'java.lang.Long.intValue()'], 'exclude': ['java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.exists()'), (False, False), ('java.io.File.exists()', 'java.lang.Long.intValue()')): [11, -1.6115657687187195], (('DSubTree', 'java.io.File.exists()', 'java.lang.Long.intValue()'), (False, False, False), ('java.io.File.exists()', 'java.lang.Long.intValue()', 'DStop')): [39, -1.416306956205517]}

counter: 35
num skipped: 3
{'include': ['java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.add(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)')): [16, -0.3663675473071635], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [34, -0.3537871539592743]}

counter: 36
num skipped: 3
{'include': ['java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.UUID.randomUUID()'], 'exclude': ['java.lang.Double.valueOf(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.UUID.randomUUID()')): [23, -0.6696003526449203], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.UUID.randomUUID()'), (False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.util.UUID.randomUUID()', 'java.io.File.File(java.lang.String,java.lang.String)')): [4, -0.9784402251129904], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()'), (False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()')): [9, -4.899365756908082], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()'), (False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()', 'DStop')): [12, -2.206054923881311], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()', 'java.util.Arrays.asList(T[])', 'DStop')): [1, -4.850646268809214], (('DSubTree', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.util.Arrays.asList(T[])'), (False, False, False, False, False, False), ('java.io.File.createTempFile(java.lang.String,java.lang.String)', 'java.io.File.getParentFile()', 'java.util.UUID.randomUUID()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.util.Arrays.asList(T[])', 'DStop')): [1, -4.8323141019791365]}

counter: 37
num skipped: 3
{'include': ['java.lang.Integer.parseInt(java.lang.String)', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()'], 'exclude': ['java.io.File.getAbsolutePath()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()')): [12, -8.104811942204833], (('DSubTree', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()'), (False, False, False), ('java.lang.Integer.parseInt(java.lang.String)', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'DStop')): [7, -2.8726708062458783], (('DSubTree', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()'), (False, False), ('java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.lang.Integer.parseInt(java.lang.String)')): [13, -1.8314480781555176], (('DSubTree', 'java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.lang.Integer.parseInt(java.lang.String)'), (False, False, False), ('java.util.ArrayList<java.lang.Long>.ArrayList<Long>()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [18, -1.2962671138811857]}

counter: 38
num skipped: 3
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'], 'exclude': ['java.lang.Thread.yield()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [1, -0.15832182252779603], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'DStop')): [8, -0.2733453147811815], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'DStop')): [4, -3.124667431227863], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)')): [12, -1.0244547012262046], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)')): [2, -2.6211860948678805], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.abs(float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [13, -2.510519143717829], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'DStop')): [4, -2.7170284076419193], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'), (False, False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'DStop')): [1, -5.097400835715234], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)'), (False, False, False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.abs(float)', 'DStop')): [5, -7.749707039445639]}

counter: 40
num skipped: 4
{'include': ['DBranch', 'java.lang.StringBuffer.setLength(int)'], 'exclude': ['$NOT$java.awt.event.InputEvent.isConsumed()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [50, -5.816770102130249]}

counter: 42
num skipped: 5
{'include': ['java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'], 'exclude': ['java.io.FileInputStream.read(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()')): [2, -5.1956799030303955], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'), (False, False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()', 'DStop')): [38, -5.07140330504626], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()', 'java.io.ByteArrayOutputStream.close()'), (False, False, False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'DStop')): [10, -6.835711793333758]}

counter: 43
num skipped: 5
{'include': ['java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'], 'exclude': ['java.util.Calendar.getTimeInMillis()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)'), (False, False), ('java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [4, -4.193159341812134], (('DSubTree', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)'), (False, False, False), ('java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)')): [26, -5.6198815330863], (('DSubTree', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)'), (False, False, False, False), ('java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.String.equals(java.lang.Object)', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'DStop')): [20, -3.2143542859703302]}

counter: 45
num skipped: 6
{'include': ['java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)'], 'exclude': ['java.lang.String.String()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.equals(java.lang.Object)'), (False, False), ('java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)')): [39, -2.441360831260681], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [1, -2.7732045385055244], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)', 'java.awt.Font.Font(java.lang.String,int,int)')): [10, -4.324535608291626]}

counter: 46
num skipped: 6
{'include': ['DExcept', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()'], 'exclude': ['java.lang.Class<T>.isAssignableFrom(java.lang.Class)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()', 'java.io.InputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()', 'java.io.InputStream.close()', 'DStop', 'DStop')): [50, -12.097219610586762]}

counter: 47
num skipped: 6
{'include': ['DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()'], 'exclude': ['java.util.StringTokenizer.nextToken()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [31, -15.263417777139693], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'javax.xml.bind.JAXBContext.createMarshaller()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'javax.xml.bind.JAXBContext.createMarshaller()', 'DStop', 'DStop')): [19, -2.000396926126996]}

counter: 48
num skipped: 6
{'include': ['DExcept', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)'], 'exclude': ['java.util.List<T>.isEmpty()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties)', 'java.sql.Connection.close()', 'DStop', 'DStop')): [50, -8.38345845148433]}

counter: 49
num skipped: 6
{'include': ['DExcept', 'java.lang.Float.Float(float)'], 'exclude': ['java.util.Date.compareTo(java.util.Date)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Float.Float(float)', 'java.lang.Double.valueOf(double)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Float.Float(float)', 'java.lang.Double.valueOf(double)', 'DStop', 'DStop')): [21, -8.0548328457852], (('DSubTree', 'DExcept', 'java.lang.Float.Float(float)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Float.Float(float)', 'java.lang.Double.valueOf(double)', 'DStop')): [29, -7.965377272106707]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5650000000000002, 'relevant_additions': 0.5300000000000001, 'meets_constraints': 0.8800000000000004, 'in_set': 0.06, 'test_set_relevant_additions': 0.5366666666666668}
