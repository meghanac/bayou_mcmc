data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'], 'exclude': ['java.io.FileInputStream.read(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()')): [50, -6.782779574394226]}

counter: 1
num skipped: 0
{'include': ['java.awt.Component.getHeight()', 'java.awt.Graphics.fillRect(int,int,int,int)'], 'exclude': ['java.awt.Rectangle.getLocation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getHeight()', 'java.awt.Graphics.fillRect(int,int,int,int)'), (False, False, False), ('java.awt.Component.getHeight()', 'java.awt.Graphics.fillRect(int,int,int,int)', 'DStop')): [1, -15.54299371864181], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getHeight()'), (False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getHeight()', 'DStop')): [4, -15.949913874268532], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()'), (False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'DStop')): [4, -6.9947021920233965], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [35, -3.4007689071586356], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()'), (False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'java.awt.Graphics.drawLine(int,int,int,int)')): [4, -2.2922820195090026], (('DSubTree', 'java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'java.awt.Graphics.drawLine(int,int,int,int)'), (False, False, False, False, False, False), ('java.awt.Graphics.fillRect(int,int,int,int)', 'java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)', 'java.awt.Component.getWidth()', 'java.awt.Component.getHeight()', 'java.awt.Graphics.drawLine(int,int,int,int)', 'DStop')): [2, -8.990168397256639]}

counter: 2
num skipped: 0
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [50, -0.8059944957494736]}

counter: 3
num skipped: 0
{'include': ['DExcept', 'java.util.Calendar.add(int,int)'], 'exclude': ['java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Calendar.add(int,int)', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.add(int,int)', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [19, -12.898463631980121], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Calendar.add(int,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Calendar.add(int,int)', 'DStop', 'DStop')): [23, -10.65402528672712], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'java.util.Calendar.add(int,int)', 'DStop')): [8, -5.467213890718995]}

counter: 4
num skipped: 0
{'include': ['java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.getComponentCount()'), (False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)')): [38, -7.669692516326904], (('DSubTree', 'java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'), (False, False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)', 'DStop')): [12, -2.866482471814379]}

counter: 6
num skipped: 1
{'include': ['java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.FileInputStream.close()'], 'exclude': ['java.io.File.isDirectory()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.FileInputStream.close()')): [30, -7.713519088254543], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.FileInputStream.close()'), (False, False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.FileInputStream.close()', 'DStop')): [20, -6.196550394357473]}

counter: 7
num skipped: 1
{'include': ['java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.Date.toInstant()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date(java.lang.String)'), (False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [8, -0.11526632463210262], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [28, -0.2620148677378893], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)')): [9, -1.2386778681539], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.System.currentTimeMillis()')): [5, -1.8008338399231434]}

counter: 8
num skipped: 1
{'include': ['java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'], 'exclude': ['java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.isEmpty()'), (False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)')): [35, -5.560566336615011], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'), (False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'DStop')): [15, -0.48768028733320534]}

counter: 9
num skipped: 1
{'include': ['DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)'], 'exclude': ['java.util.HashMap<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Locale.getDefault()', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.text.DateFormat.format(java.util.Date)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.text.DateFormat.setTimeZone(java.util.TimeZone)', 'java.util.Locale.getDefault()', 'DStop', 'java.text.DateFormat.format(java.util.Date)', 'DStop', 'DStop')): [50, -2.746649781242013]}

counter: 10
num skipped: 1
{'include': ['java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)'], 'exclude': ['java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.Semaphore.Semaphore(int)'), (False, False), ('java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)')): [40, -9.161880850791931], (('DSubTree', 'java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)'), (False, False, False), ('java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.concurrent.Semaphore.tryAcquire(int,long,java.util.concurrent.TimeUnit)', 'DStop')): [10, -5.299879550524565]}

counter: 11
num skipped: 1
{'include': ['javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)'], 'exclude': ['java.awt.Toolkit.getDefaultToolkit()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)'), (False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)')): [13, -2.0479056537151337], (('DSubTree', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)'), (False, False, False), ('javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)', 'DStop')): [37, -2.474135011434555]}

counter: 12
num skipped: 1
{'include': ['DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': ['java.lang.String.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.toUpperCase()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.String.toUpperCase()', 'DStop', 'DStop')): [50, -8.295503037981689]}

counter: 13
num skipped: 1
{'include': ['DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': ['java.lang.String.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'DStop', 'DStop')): [50, -6.384749795244716]}

counter: 14
num skipped: 1
{'include': ['java.io.File.mkdir()', 'java.io.File.renameTo(java.io.File)'], 'exclude': ['java.lang.Thread.Thread(java.lang.Runnable)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getCanonicalPath()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.io.File.renameTo(java.io.File)')): [8, -8.794426202774048], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getCanonicalPath()', 'java.io.File.renameTo(java.io.File)', 'DStop')): [2, -10.005936950445175], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.renameTo(java.io.File)', 'DStop')): [23, -8.988864943385124], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.getParentFile()', 'java.io.File.renameTo(java.io.File)')): [7, -6.918508914299309], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)'), (False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'java.io.File.getParentFile()')): [6, -6.046837210655212], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'java.io.File.getAbsolutePath()', 'java.io.File.getAbsolutePath()', 'java.io.File.isDirectory()', 'java.io.File.exists()', 'DBranch'), (False, False, False, False, True, True, True, True, False, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'java.io.File.getAbsolutePath()', 'java.io.File.getAbsolutePath()', 'DStop', 'java.io.File.exists()', 'DStop', 'DStop')): [2, -14.010399702237919], (('DSubTree', 'java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'java.io.File.isDirectory()', 'java.io.File.exists()', 'DBranch'), (False, False, False, False, True, True, True, False, False, False), ('java.io.File.mkdir()', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.renameTo(java.io.File)', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getAbsolutePath()', 'java.io.File.getAbsolutePath()', 'java.io.File.exists()', 'DStop', 'DStop')): [2, -13.46449777748785]}

counter: 15
num skipped: 1
{'include': ['DExcept', 'java.lang.reflect.Method.getParameterTypes()'], 'exclude': ['java.util.List<java.lang.Object>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.Thread.sleep(long)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.reflect.Method.getParameterTypes()', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -5.709755073301494]}

counter: 16
num skipped: 1
{'include': ['java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)'], 'exclude': ['java.lang.String.contains(java.lang.CharSequence)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String,int)'), (False, False), ('java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)')): [10, -2.6835774183273315], (('DSubTree', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [40, -5.511294361203909]}

counter: 17
num skipped: 1
{'include': ['java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'], 'exclude': ['java.lang.String.isEmpty()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.Integer(int)'), (False, False), ('java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)')): [2, -3.3844131231307983], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False), ('java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)')): [33, -5.670085906982422], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.io.File.getParentFile()'), (False, False, False), ('java.lang.Integer.Integer(int)', 'java.io.File.getParentFile()', 'java.io.FileOutputStream.FileOutputStream(java.io.File)')): [11, -8.40216363221407], (('DSubTree', 'java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False), ('java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'java.io.File.getParentFile()')): [4, -10.126553058624268]}

counter: 18
num skipped: 1
{'include': ['java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()'], 'exclude': ['java.awt.Polygon.contains(double,double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.Point2D.getX()'), (False, False), ('java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()')): [31, -0.21291274204850197], (('DSubTree', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()'), (False, False, False), ('java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()', 'DStop')): [17, -1.1118363139194116], (('DSubTree', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getX()'), (False, False, False), ('java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getX()', 'java.awt.geom.Point2D.getY()')): [2, -2.6081985009950586]}

counter: 19
num skipped: 1
{'include': ['java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'], 'exclude': ['java.lang.Math.min(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.channels.SocketChannel.open()'), (False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()')): [5, -0.882746048271656], (('DSubTree', 'java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'), (False, False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop')): [45, -1.5728350685094483]}

counter: 20
num skipped: 1
{'include': ['DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()'], 'exclude': ['java.util.Collections.addAll(java.util.Collection,T[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.Vector.addElement(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<java.lang.Integer>.hasNext()', 'java.util.Vector.addElement(java.lang.Object)', 'DStop', 'DStop')): [50, -4.485713481903076]}

counter: 21
num skipped: 1
{'include': ['java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)'], 'exclude': ['java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.reflect.Field.getType()'), (False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)')): [31, -1.7416888773441315], (('DSubTree', 'java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)'), (False, False, False), ('java.lang.reflect.Field.getType()', 'java.lang.reflect.Field.get(java.lang.Object)', 'DStop')): [19, -0.8990008635446429]}

counter: 22
num skipped: 1
{'include': ['java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.Date.toInstant()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date(java.lang.String)'), (False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [5, -1.7192154140211642], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.contains(java.lang.CharSequence)')): [9, -4.23436813428998], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.substring(int)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.substring(int)', 'java.lang.String.contains(java.lang.CharSequence)')): [8, -6.808554090559483], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.contains(java.lang.CharSequence)')): [18, -7.719200348481536], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.contains(java.lang.CharSequence)'), (False, False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop')): [5, -7.625414103269577], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [5, -2.010831642895937]}

counter: 23
num skipped: 1
{'include': ['DBranch', 'java.util.Arrays.copyOf(int[],int)'], 'exclude': ['java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.Math.min(long,long)', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Arrays.copyOf(int[],int)', 'java.lang.Math.min(long,long)', 'DStop', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop', 'DStop')): [50, -0.8050735369324684]}

counter: 24
num skipped: 1
{'include': ['DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'exclude': ['java.lang.Double.Double(double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.lang.Thread.sleep(long)', 'DExcept'), (False, True, True, False, False), ('DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [7, -6.759096775203943], (('DSubTree', 'DExcept', 'java.lang.Thread.sleep(long)', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Thread.sleep(long)', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DStop', 'DStop')): [7, -5.113472356519196], (('DSubTree', 'DExcept', 'java.lang.Thread.sleep(long)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Thread.sleep(long)', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DStop')): [24, -1.5907707680016756], (('DSubTree', 'DExcept', 'java.io.File.delete()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.io.File.delete()', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DStop')): [1, -8.917768456041813], (('DSubTree', 'DExcept', 'java.io.File.delete()', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.File.delete()', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DStop', 'DStop')): [5, -11.46665064014087], (('DSubTree', 'DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.io.File.delete()', 'DExcept'), (False, True, True, False, False), ('DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.io.File.delete()', 'DStop', 'DStop')): [6, -6.913846165601171]}

counter: 25
num skipped: 1
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'], 'exclude': ['java.net.URL.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [25, -1.5890726447105408], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'DStop')): [21, -1.4757203196641058], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)', 'DStop')): [4, -0.8921847930650983]}

counter: 26
num skipped: 1
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'], 'exclude': ['java.util.List<>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()')): [8, -1.8376913741230965], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()', 'DStop')): [42, -1.8365192143828608]}

counter: 27
num skipped: 1
{'include': ['java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.Date.toInstant()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date(java.lang.String)'), (False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [1, -0.7862696722149849], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [6, -0.44872022117488086], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [2, -3.7481634728610516], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)')): [4, -5.241763127967715], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)'), (False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.String.substring(int)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [4, -6.515574067831039], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [2, -6.740507066249847], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.DateFormat.parse(java.lang.String)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.DateFormat.parse(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [4, -6.635390758514404], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.text.DateFormat.parse(java.lang.String)')): [17, -1.5319455098360777], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.text.DateFormat.parse(java.lang.String)')): [5, -4.81306067854166], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.format(java.util.Date)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.text.DateFormat.parse(java.lang.String)')): [1, -8.167355584679171], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)'), (False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.text.DateFormat.format(java.util.Date)')): [3, -10.952017735457048], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False, False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String,java.util.Locale)', 'java.text.DateFormat.parse(java.lang.String)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.text.DateFormat.format(java.util.Date)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)')): [1, -13.531725600361824]}

counter: 28
num skipped: 1
{'include': ['DExcept', 'java.lang.Float.Float(float)'], 'exclude': ['java.util.Date.compareTo(java.util.Date)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Float.Float(float)', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Float.Float(float)', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'DStop', 'DStop')): [50, -6.48088264465332]}

counter: 29
num skipped: 1
{'include': ['DBranch', 'java.io.OutputStream.write(int)'], 'exclude': ['java.io.ObjectInputStream.defaultReadObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.OutputStream.write(int)', 'java.util.Date.getTime()', 'java.io.OutputStream.write(int)', 'java.io.OutputStream.close()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.OutputStream.write(int)', 'java.util.Date.getTime()', 'DStop', 'java.io.OutputStream.close()', 'DStop', 'DStop')): [50, -4.575048267841339]}

counter: 30
num skipped: 1
{'include': ['java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Iterator.next()'), (False, False), ('java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)')): [24, -8.436332702636719], (('DSubTree', 'java.util.Set.add(java.lang.Object)'), (False, False), ('java.util.Set.add(java.lang.Object)', 'java.util.Iterator.next()')): [24, -6.577387571334839], (('DSubTree', 'java.util.Set.add(java.lang.Object)', 'java.util.Iterator.next()'), (False, False, False), ('java.util.Set.add(java.lang.Object)', 'java.util.Iterator.next()', 'DStop')): [2, -7.23273073323071]}

counter: 31
num skipped: 1
{'include': ['java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()'], 'exclude': ['java.io.DataInput.readInt()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readBoolean()'), (False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()')): [49, -0.6249268054962158], (('DSubTree', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()'), (False, False, False), ('java.io.DataInput.readBoolean()', 'java.io.DataInput.readUTF()', 'DStop')): [1, -1.4497469702037051]}

counter: 32
num skipped: 1
{'include': ['javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'], 'exclude': ['java.lang.Class.getConstructor(java.lang.Class[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)'), (False, False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop')): [31, -2.6336962282657623], (('DSubTree', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'), (False, False), ('javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.io.StringReader.StringReader(java.lang.String)')): [19, -2.223762959241867]}

counter: 33
num skipped: 1
{'include': ['java.lang.Integer.intValue()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'], 'exclude': ['java.util.HashMap.HashMap()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.intValue()'), (False, False), ('java.lang.Integer.intValue()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)')): [9, -0.5992953181266785], (('DSubTree', 'java.lang.Integer.intValue()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.Integer.intValue()', 'java.lang.String.replaceAll(java.lang.String,java.lang.String)', 'DStop')): [41, -3.5118377862963825]}

counter: 34
num skipped: 1
{'include': ['DExcept', 'java.sql.Statement.executeQuery(java.lang.String)'], 'exclude': ['java.awt.GraphicsEnvironment.getScreenDevices()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [14, -4.2294297401822405], (('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop')): [6, -5.194846441037953], (('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'DStop')): [7, -5.385456185787916], (('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'DStop', 'DStop')): [5, -3.8901989706791937], (('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.lang.Class.forName(java.lang.String)', 'DStop', 'DStop')): [9, -3.4197359173558652], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DStop', 'DStop')): [9, -5.1720768990926445]}

counter: 35
num skipped: 1
{'include': ['DExcept', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': ['java.io.ObjectOutputStream.writeObject(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuilder.substring(int,int)', 'java.awt.BasicStroke.BasicStroke(float)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuilder.substring(int,int)', 'java.awt.BasicStroke.BasicStroke(float)', 'DStop', 'DStop')): [50, -10.942230581567856]}

counter: 36
num skipped: 1
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'], 'exclude': ['java.net.URL.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [7, -0.03435948211699724], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [5, -3.926329851135961], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [1, -4.303036369383335], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.HashSet<Tau_E>.HashSet()'), (False, False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.HashSet<Tau_E>.HashSet()', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [37, -5.778740010224283]}

counter: 37
num skipped: 1
{'include': ['java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'], 'exclude': ['java.io.FileOutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)'), (False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()')): [2, -0.7164887450635433], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()'), (False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.InputStreamReader.close()', 'DStop')): [34, -1.5796470616478473], (('DSubTree', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStreamReader.close()'), (False, False, False, False), ('java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)', 'java.io.BufferedReader.BufferedReader(java.io.Reader)', 'java.io.InputStreamReader.close()', 'DStop')): [14, -4.117742743343115]}

counter: 38
num skipped: 1
{'include': ['DBranch', 'java.io.OutputStream.write(int)'], 'exclude': ['java.io.ObjectInputStream.defaultReadObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.OutputStream.write(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'java.io.OutputStream.write(int)', 'java.io.OutputStream.write(byte[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.OutputStream.write(int)', 'java.lang.StringBuilder.append(java.lang.Object)', 'DStop', 'java.io.OutputStream.write(byte[])', 'DStop', 'DStop')): [50, -4.515521168708801]}

counter: 39
num skipped: 1
{'include': ['java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)'], 'exclude': ['java.io.InputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)'), (False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)')): [46, -11.143305907025933], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)'), (False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)', 'DStop')): [3, -7.224950798088685], (('DSubTree', 'java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)'), (False, False, False), ('java.security.MessageDigest.getInstance(java.lang.String)', 'java.security.Signature.initVerify(java.security.PublicKey)', 'java.security.Signature.update(byte[])')): [1, -4.973454462364316]}

counter: 40
num skipped: 1
{'include': ['java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'], 'exclude': ['java.lang.Thread.start()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)'), (False, False), ('java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)')): [41, -16.116193383932114], (('DSubTree', 'java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)'), (False, False, False), ('java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)', 'java.awt.image.BufferedImage.BufferedImage(int,int,int)', 'DStop')): [9, -10.726843434385955]}

counter: 41
num skipped: 1
{'include': ['DExcept', 'java.sql.Statement.executeQuery(java.lang.String)'], 'exclude': ['java.awt.GraphicsEnvironment.getScreenDevices()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.Statement.executeQuery(java.lang.String)', 'java.util.ArrayList<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [5, -6.182325959205627], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.Statement.executeQuery(java.lang.String)', 'DStop', 'DStop')): [45, -1.5339402601821348]}

counter: 42
num skipped: 1
{'include': ['DBranch', 'java.lang.StringBuffer.setLength(int)'], 'exclude': ['$NOT$java.awt.event.InputEvent.isConsumed()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(char[])', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(char[])', 'DStop', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [50, -7.350842366751749]}

counter: 43
num skipped: 1
{'include': ['DLoop', '$NOT$java.lang.Double.isNaN(double)'], 'exclude': ['java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.ConcurrentHashMap()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', '$NOT$java.lang.Double.isNaN(double)', 'java.util.regex.Matcher.find()', 'DLoop'), (False, True, True, False, False), ('DLoop', '$NOT$java.lang.Double.isNaN(double)', 'java.util.regex.Matcher.find()', 'DStop', 'DStop')): [50, -7.023832441773266]}

counter: 44
num skipped: 1
{'include': ['DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'exclude': ['java.util.ArrayList.add(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.Thread.setName(java.lang.String)', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.util.concurrent.atomic.AtomicInteger.get()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.Thread.setName(java.lang.String)', 'DStop', 'java.util.concurrent.atomic.AtomicInteger.get()', 'DStop', 'DStop')): [50, -5.88189561929903]}

counter: 45
num skipped: 1
{'include': ['java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Date.Date()'], 'exclude': ['java.io.File.listFiles()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)'), (False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Date.Date()')): [3, -3.538808584213257], (('DSubTree', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Date.Date()'), (False, False, False), ('java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Date.Date()', 'DStop')): [47, -2.137996906414628]}

counter: 46
num skipped: 1
{'include': ['DExcept', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'DStop')): [15, -17.935298189322566], (('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.System.getProperty(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.System.getProperty(java.lang.String)', 'DStop', 'DStop')): [8, -14.382652611646336], (('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.System.getProperty(java.lang.String)', 'DStop')): [27, -13.296513882203726]}

counter: 47
num skipped: 1
{'include': ['DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.util.TimeZone.setDefault(java.util.TimeZone)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop', 'DStop')): [29, -12.678907573223114], (('DSubTree', 'DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.Vector<java.lang.String>.add(java.lang.String)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop')): [21, -8.160177272977307]}

counter: 48
num skipped: 1
{'include': ['java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)'], 'exclude': ['java.util.StringTokenizer.hasMoreTokens()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [33, -0.6320340768143069], (('DSubTree', 'java.util.HashSet.HashSet()'), (False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)')): [17, -0.3303816677071154]}

counter: 49
num skipped: 1
{'include': ['java.util.List.iterator()', 'java.util.List.get(int)'], 'exclude': ['java.lang.Long.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List.iterator()'), (False, False), ('java.util.List.iterator()', 'java.util.List.get(int)')): [3, -4.077051639556885], (('DSubTree', 'java.util.List.iterator()', 'java.lang.String.String()'), (False, False, False), ('java.util.List.iterator()', 'java.lang.String.String()', 'java.util.List.get(int)')): [16, -11.617712751030922], (('DSubTree', 'java.util.List.iterator()', 'java.lang.String.String()', 'java.util.List.get(int)'), (False, False, False, False), ('java.util.List.iterator()', 'java.lang.String.String()', 'java.util.List.get(int)', 'DStop')): [31, -8.52007345855236]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.6166666666666669, 'relevant_additions': 0.6166666666666669, 'meets_constraints': 0.9800000000000005, 'in_set': 0.1, 'test_set_relevant_additions': 0.5566666666666669}
