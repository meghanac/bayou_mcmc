data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()'], 'exclude': ['java.io.DataInput.readInt()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readUTF()'), (False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()')): [1, -1.8926462531089783], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()', 'java.io.DataInput.readBoolean()')): [8, -6.489062264561653], (('DSubTree', 'java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()'), (False, False, False), ('java.io.DataInput.readUTF()', 'java.io.DataInput.readBoolean()', 'DStop')): [41, -1.6209994516466395]}

counter: 1
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [15, -0.06102370657026768], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [35, -0.1762270841636564]}

counter: 2
num skipped: 0
{'include': ['DBranch', 'java.lang.Math.exp(double)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.exp(double)', 'java.util.List<java.lang.Integer>.size()', 'java.lang.Math.exp(double)', 'java.util.List<java.lang.Integer>.get(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.exp(double)', 'java.util.List<java.lang.Integer>.size()', 'DStop', 'java.util.List<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [50, -10.51553313434124]}

counter: 3
num skipped: 0
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.CharSequence.charAt(int)', 'DStop', 'DStop')): [41, -4.08833509683609], (('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.CharSequence.charAt(int)', 'DStop')): [9, -4.518999092280865]}

counter: 4
num skipped: 0
{'include': ['java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'], 'exclude': ['java.lang.Boolean.booleanValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'), (False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'DStop')): [28, -8.10467067672289], (('DSubTree', 'java.net.DatagramSocket.isClosed()'), (False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()')): [22, -1.7443465534597635]}

counter: 5
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [25, -2.436174366157502], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [25, -2.1045717877859715]}

counter: 6
num skipped: 0
{'include': ['DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)'], 'exclude': ['java.util.ArrayList.add(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.System.currentTimeMillis()', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.Thread.sleep(long)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.AbstractAction.putValue(java.lang.String,java.lang.Object)', 'java.lang.System.currentTimeMillis()', 'DStop', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -8.44563651829958]}

counter: 7
num skipped: 0
{'include': ['java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'), (False, False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)', 'DStop')): [50, -1.8525811284653173]}

counter: 8
num skipped: 0
{'include': ['java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'], 'exclude': ['java.nio.ByteBuffer.array()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])')): [24, -5.952006697654724], (('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'), (False, False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])', 'DStop')): [2, -0.9275540728121996], (('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])', 'java.lang.Throwable.toString()'), (False, False, False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])', 'java.lang.Throwable.toString()', 'DStop')): [7, -7.990117482506321], (('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'), (False, False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])', 'java.lang.Throwable.toString()')): [17, -2.5607327334582806]}

counter: 9
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)'], 'exclude': ['java.security.Provider.put(java.lang.Object,java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()'), (False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)')): [50, -0.8570984601974487]}

counter: 10
num skipped: 0
{'include': ['java.util.Vector.size()', 'java.io.ByteArrayOutputStream.toByteArray()'], 'exclude': ['java.io.BufferedWriter.BufferedWriter(java.io.Writer)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Vector.size()'), (False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.toByteArray()')): [7, -15.393690586090088], (('DSubTree', 'java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)'), (False, False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.ByteArrayOutputStream.toByteArray()')): [1, -7.89352411031723], (('DSubTree', 'java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()')): [22, -8.922132640956988], (('DSubTree', 'java.util.Vector.size()', 'java.io.BufferedReader.readLine()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.Vector.size()', 'java.io.BufferedReader.readLine()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()')): [2, -12.203189730309532], (('DSubTree', 'java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()')): [7, -10.212147177313454], (('DSubTree', 'java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DLoop'), (False, False, False, False, True, True, False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()')): [9, -10.345322426175699], (('DSubTree', 'java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DLoop', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False, False, False, True, True, False, False, False, False), ('java.util.Vector.size()', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'java.io.DataInputStream.readInt()', 'DLoop', 'java.io.InputStream.read(byte[])', 'java.io.OutputStream.write(byte[],int,int)', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.DataInputStream.DataInputStream(java.io.InputStream)')): [2, -18.630781590007246]}

counter: 11
num skipped: 0
{'include': ['java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)'], 'exclude': ['java.lang.String.contains(java.lang.CharSequence)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.split(java.lang.String,int)'), (False, False), ('java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)')): [12, -5.683523694053292], (('DSubTree', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)'), (False, False, False), ('java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop')): [38, -4.015062443912029]}

counter: 12
num skipped: 0
{'include': ['DBranch', 'java.lang.Math.exp(double)'], 'exclude': ['java.security.Permission.getName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.exp(double)', 'java.sql.ResultSet.getInt(java.lang.String)', 'java.lang.Math.exp(double)', 'java.lang.StringBuilder.append(char)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.exp(double)', 'java.sql.ResultSet.getInt(java.lang.String)', 'DStop', 'java.lang.StringBuilder.append(char)', 'DStop', 'DStop')): [50, -11.56162344711629]}

counter: 13
num skipped: 0
{'include': ['java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'], 'exclude': ['java.nio.ByteBuffer.array()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()'), (False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])')): [30, -1.1265767589211464], (('DSubTree', 'java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])'), (False, False, False), ('java.nio.ByteBuffer.asFloatBuffer()', 'java.nio.FloatBuffer.put(float[])', 'DStop')): [20, -0.28566761792171746]}

counter: 14
num skipped: 0
{'include': ['java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.List<java.lang.Integer>.iterator()'], 'exclude': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()'), (False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.List<java.lang.Integer>.iterator()')): [42, -0.9106972217559814], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.List<java.lang.Integer>.iterator()'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()', 'java.util.List<java.lang.Integer>.iterator()', 'DStop')): [8, -1.6392705850303173]}

counter: 15
num skipped: 0
{'include': ['DLoop', 'java.lang.Double.parseDouble(java.lang.String)'], 'exclude': ['java.util.List.remove(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Double.parseDouble(java.lang.String)', 'DLoop'), (False, True, True, False), ('DLoop', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.String.length()', 'DStop')): [42, -9.788348287343979], (('DSubTree', 'DLoop', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Double.parseDouble(java.lang.String)', 'java.lang.String.length()', 'DStop', 'DStop')): [8, -10.371721141040325]}

counter: 16
num skipped: 0
{'include': ['DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': ['java.lang.StringBuffer.append(char[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'java.util.List<java.lang.String>.size()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'java.util.List<java.lang.String>.size()', 'DStop', 'DStop')): [50, -15.406985718756914]}

counter: 17
num skipped: 0
{'include': ['DBranch', 'java.io.InputStream.available()'], 'exclude': ['javax.swing.JSplitPane.getOrientation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.available()', 'java.io.InputStream.read()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DStop', 'java.io.InputStream.read()', 'DStop', 'DStop')): [10, -6.3225942850112915], (('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.available()', 'java.io.InputStream.read()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.read()', 'DStop', 'DStop')): [32, -3.0811263560317457], (('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'java.io.InputStream.available()', 'DBranch'), (False, True, True, True, True, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'DStop', 'DStop', 'DStop')): [8, -4.215164827182889]}

counter: 18
num skipped: 0
{'include': ['javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)'], 'exclude': ['java.text.DecimalFormat.DecimalFormat(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setForeground(java.awt.Color)')): [28, -7.4014095067977905], (('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setForeground(java.awt.Color)'), (False, False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'DStop')): [17, -1.8257065655197948], (('DSubTree', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False, False), ('javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)', 'DStop')): [5, -2.878101758658886]}

counter: 19
num skipped: 0
{'include': ['java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Class<Tau_T>.isInstance(java.lang.Object)'], 'exclude': ['java.util.Calendar.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()'), (False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Class<Tau_T>.isInstance(java.lang.Object)')): [9, -2.368892580270767], (('DSubTree', 'java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Class<Tau_T>.isInstance(java.lang.Object)'), (False, False, False), ('java.util.ArrayList<Tau_E>.ArrayList()', 'java.lang.Class<Tau_T>.isInstance(java.lang.Object)', 'DStop')): [41, -3.9779815541696735]}

counter: 21
num skipped: 1
{'include': ['java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.String>.get(int)'], 'exclude': ['javax.swing.JLabel.JLabel(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'), (False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.String>.get(int)')): [9, -3.8277845978736877], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [1, -4.479571862146258], (('DSubTree', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.String>.get(int)'), (False, False, False, False), ('java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.String>.get(int)', 'DStop')): [40, -3.5646031368523836]}

counter: 22
num skipped: 1
{'include': ['DLoop', 'java.util.HashMap.get(java.lang.Object)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getPrefix(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.HashMap.get(java.lang.Object)', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.HashMap.get(java.lang.Object)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -8.415453478693962]}

counter: 23
num skipped: 1
{'include': ['java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'], 'exclude': ['java.lang.Boolean.booleanValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.DatagramSocket.isClosed()'), (False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()')): [40, -8.170090317726135], (('DSubTree', 'java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()'), (False, False, False), ('java.net.DatagramSocket.isClosed()', 'java.net.DatagramSocket.getImpl()', 'java.lang.Boolean.valueOf(boolean)')): [10, -4.362474462017417]}

counter: 24
num skipped: 1
{'include': ['java.util.Locale.getDefault()', 'java.io.StringWriter.toString()'], 'exclude': ['javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Locale.getDefault()'), (False, False), ('java.util.Locale.getDefault()', 'java.io.StringWriter.toString()')): [5, -13.104284286499023], (('DSubTree', 'java.util.Locale.getDefault()', 'java.io.StringWriter.toString()', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)'), (False, False, False, False, False), ('java.util.Locale.getDefault()', 'java.io.StringWriter.toString()', 'java.io.StringWriter.StringWriter()', 'java.io.PrintWriter.PrintWriter(java.io.Writer)', 'java.lang.Throwable.printStackTrace(java.io.PrintWriter)')): [45, -8.50936359167099]}

counter: 25
num skipped: 1
{'include': ['java.util.Arrays.fill(int[],int)', 'java.util.Arrays.fill(float[],float)'], 'exclude': ['java.util.Random.Random()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(int[],int)'), (False, False), ('java.util.Arrays.fill(int[],int)', 'java.util.Arrays.fill(float[],float)')): [24, -4.1214908529073], (('DSubTree', 'java.util.Arrays.fill(int[],int)', 'java.util.Arrays.fill(float[],float)'), (False, False, False), ('java.util.Arrays.fill(int[],int)', 'java.util.Arrays.fill(float[],float)', 'DStop')): [26, -4.045511772856116]}

counter: 26
num skipped: 1
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [10, -0.47238695019768784], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [40, -0.559266686076171]}

counter: 27
num skipped: 1
{'include': ['java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'], 'exclude': ['java.io.FileInputStream.read(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()')): [30, -2.213939329609275], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.read(byte[])'), (False, False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.read(byte[])', 'java.io.FilterInputStream.close()')): [20, -5.5451802015304565]}

counter: 28
num skipped: 1
{'include': ['DExcept', 'java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', '$NOT$java.lang.String.isEmpty()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', '$NOT$java.lang.String.isEmpty()', 'DStop', 'DStop')): [50, -2.778918388677994]}

counter: 29
num skipped: 1
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': ['java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [1, -6.425867319107056], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [49, -5.044427394866943]}

counter: 30
num skipped: 1
{'include': ['java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getShearY()'], 'exclude': ['java.util.LinkedList<Tau_E>.LinkedList()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False), ('java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getShearY()')): [1, -23.56638193130493], (('DSubTree', 'java.awt.geom.AffineTransform.getShearY()'), (False, False), ('java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getTranslateX()')): [3, -17.844216346740723], (('DSubTree', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()', 'DStop')): [6, -20.087523289017554], (('DSubTree', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False, False), ('java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()')): [3, -15.682496905326502], (('DSubTree', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()')): [5, -16.07169544696808], (('DSubTree', 'java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False, False, False), ('java.awt.geom.AffineTransform.getShearY()', 'java.awt.geom.AffineTransform.getShearX()', 'java.awt.geom.AffineTransform.getTranslateX()', 'DStop')): [32, -18.02688255906105]}

counter: 31
num skipped: 1
{'include': ['java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'], 'exclude': ['java.lang.String.isEmpty()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)'), (False, False, False), ('java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)', 'DStop')): [5, -5.326716214418411], (('DSubTree', 'java.lang.Integer.Integer(int)'), (False, False), ('java.lang.Integer.Integer(int)', 'java.io.FileOutputStream.FileOutputStream(java.io.File)')): [45, -1.1616186797618866]}

counter: 32
num skipped: 1
{'include': ['java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()'], 'exclude': ['java.lang.Long.Long(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.ArrayList()'), (False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()')): [13, -4.765710659325123], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DStop', 'DStop')): [8, -3.324047512811376], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DLoop', 'java.util.ArrayList.size()'), (False, False, False, True, True, False, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DStop', 'java.util.ArrayList.size()', 'DStop')): [1, -4.147808802430518], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.List.add(java.lang.Object)', 'DStop', 'java.util.ArrayList.size()')): [22, -4.353277026093565], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DLoop'), (False, False, False, True, True, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.ArrayList.iterator()', 'DLoop', 'java.util.Iterator.hasNext()', 'java.util.ArrayList.add(java.lang.Object)', 'DStop', 'java.util.ArrayList.size()')): [6, -1.0517061821883544]}

counter: 33
num skipped: 1
{'include': ['java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [8, -0.5942104756832123], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [42, -0.46018276413087733]}

counter: 34
num skipped: 1
{'include': ['java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.Collection.iterator()'], 'exclude': ['java.util.ArrayList.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'), (False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.Collection.iterator()')): [8, -3.794535666704178], (('DSubTree', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.Collection.iterator()'), (False, False, False), ('java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.util.Collection.iterator()', 'DStop')): [42, -3.730561912059784]}

counter: 35
num skipped: 1
{'include': ['java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)'], 'exclude': ['javax.xml.stream.XMLStreamWriter.getNamespaceContext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Iterator.next()'), (False, False), ('java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)')): [40, -7.4261157512664795], (('DSubTree', 'java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)'), (False, False, False), ('java.util.Iterator.next()', 'java.util.Set.add(java.lang.Object)', 'java.util.Iterator.next()')): [10, -6.888534367084503]}

counter: 36
num skipped: 1
{'include': ['java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.getComponentCount()'), (False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)')): [37, -2.833630621433258], (('DSubTree', 'java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'), (False, False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)', 'DStop')): [13, -2.620167098842103]}

counter: 38
num skipped: 2
{'include': ['java.io.InputStream.available()', 'DBranch'], 'exclude': ['javax.swing.JSplitPane.getOrientation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.available()', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.io.InputStream.available()', 'DBranch', 'java.lang.String.startsWith(java.lang.String)', 'java.lang.String.length()', 'DStop', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -8.02390480786562]}

counter: 40
num skipped: 3
{'include': ['java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'], 'exclude': ['java.util.List<java.lang.String>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()'), (False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [15, -0.5010041398927569], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [6, -3.8146714690956287], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop')): [28, -0.6337414495646954], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop')): [1, -3.393531585112214]}

counter: 41
num skipped: 3
{'include': ['DBranch', 'java.lang.Class<>.isPrimitive()'], 'exclude': ['java.util.Set<javax.management.ObjectName>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Class<>.isPrimitive()', 'java.lang.String.isEmpty()', 'java.lang.Class<>.isPrimitive()', 'java.lang.String.trim()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Class<>.isPrimitive()', 'java.lang.String.isEmpty()', 'DStop', 'java.lang.String.trim()', 'DStop', 'DStop')): [50, -17.13760999745864]}

counter: 42
num skipped: 3
{'include': ['java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'], 'exclude': ['java.awt.Graphics2D.draw(java.awt.Shape)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.getTransform()'), (False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)')): [34, -11.054712772369385], (('DSubTree', 'java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)'), (False, False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'DStop')): [7, -1.33514404296875], (('DSubTree', 'java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.util.Random.nextLong()'), (False, False, False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.util.Random.nextLong()', 'DStop')): [7, -5.267337048891932], (('DSubTree', 'java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.util.Random.nextLong()'), (False, False, False, False), ('java.awt.Graphics2D.getTransform()', 'java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)', 'java.util.Random.nextLong()', 'java.awt.Graphics2D.getTransform()')): [2, -5.133106231689453]}

counter: 43
num skipped: 3
{'include': ['DBranch', '$NOT$java.io.File.canRead()'], 'exclude': ['java.io.ByteArrayInputStream.read()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', '$NOT$java.io.File.canRead()', '$NOT$java.io.File.exists()', '$NOT$java.io.File.canRead()', 'java.io.File.isDirectory()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', '$NOT$java.io.File.canRead()', '$NOT$java.io.File.exists()', 'DStop', 'java.io.File.isDirectory()', 'DStop', 'DStop')): [50, -10.38118783772552]}

counter: 44
num skipped: 3
{'include': ['java.sql.Timestamp.Timestamp(long)', 'java.sql.Timestamp.after(java.sql.Timestamp)'], 'exclude': ['java.util.Calendar.setTime(java.util.Date)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.sql.Timestamp.Timestamp(long)'), (False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.sql.Timestamp.after(java.sql.Timestamp)')): [29, -4.493593692779541], (('DSubTree', 'java.sql.Timestamp.Timestamp(long)', 'java.sql.Timestamp.after(java.sql.Timestamp)'), (False, False, False), ('java.sql.Timestamp.Timestamp(long)', 'java.sql.Timestamp.after(java.sql.Timestamp)', 'DStop')): [21, -0.8453586098803498]}

counter: 46
num skipped: 4
{'include': ['java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'], 'exclude': ['java.io.FileOutputStream.write(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.URL.openStream()'), (False, False), ('java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()')): [30, -1.16905677318573], (('DSubTree', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False, False), ('java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'DStop')): [15, -2.246214421465993], (('DSubTree', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False, False), ('java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [5, -2.1803723219782114]}

counter: 47
num skipped: 4
{'include': ['DBranch', 'java.io.OutputStream.write(int)'], 'exclude': ['java.io.ObjectInputStream.defaultReadObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.OutputStream.write(int)', 'java.lang.String.equals(java.lang.Object)', 'java.io.OutputStream.write(int)', 'java.lang.Throwable.printStackTrace()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.OutputStream.write(int)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -10.184838056564331]}

counter: 48
num skipped: 4
{'include': ['java.util.Arrays.fill(char[],char)', 'java.lang.String.String(char[],int,int)'], 'exclude': ['java.util.Date.setTime(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(char[],char)', 'java.lang.String.String(char[],int,int)'), (False, False, False), ('java.util.Arrays.fill(char[],char)', 'java.lang.String.String(char[],int,int)', 'DStop')): [33, -0.9944187486544251], (('DSubTree', 'java.util.Arrays.fill(char[],char)'), (False, False), ('java.util.Arrays.fill(char[],char)', 'java.lang.String.String(char[],int,int)')): [17, -2.553721576114185]}
