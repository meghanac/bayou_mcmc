data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['DBranch', 'java.util.List<java.lang.String>.clear()'], 'exclude': ['java.awt.Color.Color(int,int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.clear()', 'java.lang.Throwable.printStackTrace()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.clear()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -7.521871566772461]}

counter: 1
num skipped: 0
{'include': ['java.io.InputStream.read()', 'java.lang.StringBuffer.length()'], 'exclude': ['java.util.concurrent.CountDownLatch.CountDownLatch(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.InputStream.read()', 'java.lang.StringBuffer.length()', 'java.lang.String.length()'), (False, False, False, False), ('java.io.InputStream.read()', 'java.lang.StringBuffer.length()', 'java.lang.String.length()', 'DStop')): [50, -3.636452257516794]}

counter: 2
num skipped: 0
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.io.ObjectOutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop', 'DStop')): [39, -3.717062241048552], (('DSubTree', 'DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop', 'DStop')): [5, -5.13929967036529], (('DSubTree', 'DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop')): [6, -2.5340475131524727]}

counter: 3
num skipped: 0
{'include': ['DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)'], 'exclude': ['java.io.RandomAccessFile.writeBytes(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop', 'DStop')): [13, -2.348619043827057], (('DSubTree', 'DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DExcept'), (False, True, True, False), ('DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'DStop')): [34, -1.1596729755401611], (('DSubTree', 'DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'java.lang.String.startsWith(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.ImageIcon.ImageIcon(java.awt.Image)', 'java.lang.String.startsWith(java.lang.String)', 'DStop', 'DStop')): [3, -2.743907095398754]}

counter: 4
num skipped: 0
{'include': ['java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)'], 'exclude': ['java.security.AccessController.doPrivileged(java.security.PrivilegedAction)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()'), (False, False), ('java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)')): [33, -2.5768999457359314], (('DSubTree', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)'), (False, False, False), ('java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)', 'DStop')): [8, -1.301717002876103], (('DSubTree', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop')): [7, -3.7514426386915147], (('DSubTree', 'java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])'), (False, False, False, False), ('java.util.HashMap<Tau_K,Tau_V>.HashMap()', 'java.lang.Double.Double(java.lang.String)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'java.util.UUID.fromString(java.lang.String)')): [2, -8.7875748667866]}

counter: 5
num skipped: 0
{'include': ['DBranch', 'java.util.BitSet.set(int)'], 'exclude': ['javax.swing.JTree.getSelectionPath()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.BitSet.set(int)', 'java.awt.Color.getGreen()', 'java.util.BitSet.set(int)', 'java.lang.Thread.sleep(long)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.BitSet.set(int)', 'java.awt.Color.getGreen()', 'DStop', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -10.44500407576561]}

counter: 6
num skipped: 0
{'include': ['$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'], 'exclude': ['java.lang.String.compareToIgnoreCase(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'), (False, False), ('$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])')): [16, -2.1493093259632587], (('DSubTree', '$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])'), (False, False, False), ('$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'java.lang.reflect.Constructor<>.newInstance(java.lang.Object[])', 'DStop')): [34, -1.7264245455153286]}

counter: 7
num skipped: 0
{'include': ['java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'], 'exclude': ['java.lang.Math.min(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.channels.SocketChannel.open()'), (False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()')): [9, -1.6490914709866047], (('DSubTree', 'java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'), (False, False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop')): [7, -1.451621583357337], (('DSubTree', 'java.nio.channels.SocketChannel.open()', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)'), (False, False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()')): [13, -3.1859482936561108], (('DSubTree', 'java.nio.channels.SocketChannel.open()', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'), (False, False, False, False), ('java.nio.channels.SocketChannel.open()', 'java.nio.channels.SocketChannel.connect(java.net.SocketAddress)', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop')): [21, -1.4888249738141894]}

counter: 8
num skipped: 0
{'include': ['java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'], 'exclude': ['java.util.Date.toInstant()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date(java.lang.String)'), (False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)')): [38, -0.6290738907991908], (('DSubTree', 'java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)'), (False, False, False), ('java.util.Date.Date(java.lang.String)', 'java.text.DateFormat.format(java.util.Date)', 'DStop')): [12, -1.4256869221571833]}

counter: 9
num skipped: 0
{'include': ['java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.close()'], 'exclude': ['java.util.ArrayList<java.lang.Integer>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.close()')): [1, -2.5783296823501587], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()')): [20, -3.1336003467440605], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()'), (False, False, False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()', 'DStop')): [29, -0.16970591704011895]}

counter: 10
num skipped: 0
{'include': ['java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()'], 'exclude': ['java.io.OutputStream.write(byte[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()', 'java.net.URI.getPath()')): [5, -3.0978432128904387], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()')): [1, -1.5964453965425491], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()', 'DStop')): [24, -3.4009130746126175], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.InputStream.read()', 'java.security.MessageDigest.digest()'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.InputStream.read()', 'java.security.MessageDigest.digest()', 'DStop')): [2, -4.6973229739815], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()'), (False, False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()', 'DStop')): [9, -6.935004895552993], (('DSubTree', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)'), (False, False, False), ('java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)', 'java.security.MessageDigest.digest()')): [9, -5.978335455991328]}

counter: 11
num skipped: 0
{'include': ['DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)'], 'exclude': ['java.lang.Double.Double(double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.lang.Thread.sleep(long)', 'DExcept'), (False, True, True, False, False), ('DExcept', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [29, -6.962203346018214], (('DSubTree', 'DExcept', 'java.lang.Thread.sleep(long)', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Thread.sleep(long)', '$NOT$java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)', 'DStop', 'DStop')): [21, -8.928919732563372]}

counter: 12
num skipped: 0
{'include': ['DLoop', 'java.util.ArrayList<java.lang.Integer>.size()'], 'exclude': ['java.util.List<java.lang.String>.remove(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [1, -4.264926567673683], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [4, -4.427325472119264], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'DLoop', 'java.lang.CharSequence.charAt(int)'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.CharSequence.charAt(int)', 'DStop')): [17, -3.321035726927221], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [13, -2.0745596229098737], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [6, -1.28392866399372], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'java.lang.String.valueOf(java.lang.Object)', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [1, -5.239730863206205], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'java.util.ArrayList<java.lang.Integer>.get(int)')): [2, -8.548419603612274], (('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.get(int)'), (False, True, True, False, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop')): [6, -1.71008694980992]}

counter: 13
num skipped: 0
{'include': ['java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.addElement(java.lang.Object)'], 'exclude': ['java.lang.Integer.valueOf(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)'), (False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'java.util.Vector.addElement(java.lang.Object)')): [17, -6.0364203453063965], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DLoop'), (False, False, True, True, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DStop', 'java.util.Vector.addElement(java.lang.Object)')): [10, -7.248183165109367], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DLoop', 'java.util.Vector.addElement(java.lang.Object)'), (False, False, True, True, False, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'DStop', 'java.util.Vector.addElement(java.lang.Object)', 'DStop')): [2, -6.194459495176488], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'DLoop', 'java.util.Vector.addElement(java.lang.Object)'), (False, False, True, True, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'java.util.Vector.addElement(java.lang.Object)', 'DStop')): [11, -5.014968444535043], (('DSubTree', 'java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'DLoop', 'java.util.StringTokenizer.nextToken()', 'java.util.Vector.addElement(java.lang.Object)'), (False, False, True, True, False, False, False), ('java.util.StringTokenizer.StringTokenizer(java.lang.String)', 'DLoop', 'java.util.StringTokenizer.hasMoreTokens()', 'java.util.StringTokenizer.nextToken()', 'java.util.StringTokenizer.nextToken()', 'java.util.Vector.addElement(java.lang.Object)', 'DStop')): [10, -1.8628393546241568]}

counter: 14
num skipped: 0
{'include': ['DLoop', 'java.util.Iterator<byte[]>.next()'], 'exclude': ['$NOT$java.io.File.getAbsoluteFile()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'DStop', 'DStop')): [50, -11.267685920000076]}

counter: 15
num skipped: 0
{'include': ['javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.getLocalizedMessage()'], 'exclude': ['java.text.MessageFormat.format(java.lang.String,java.lang.Object[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.naming.InitialContext.InitialContext()'), (False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.getLocalizedMessage()')): [19, -7.7047295570373535], (('DSubTree', 'javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.getLocalizedMessage()'), (False, False, False), ('javax.naming.InitialContext.InitialContext()', 'java.lang.Throwable.getLocalizedMessage()', 'DStop')): [22, -8.298534576286329], (('DSubTree', 'java.lang.Throwable.getLocalizedMessage()'), (False, False), ('java.lang.Throwable.getLocalizedMessage()', 'javax.naming.InitialContext.InitialContext()')): [1, -7.413036346435547], (('DSubTree', 'java.lang.Throwable.getLocalizedMessage()', 'javax.naming.InitialContext.InitialContext()'), (False, False, False), ('java.lang.Throwable.getLocalizedMessage()', 'javax.naming.InitialContext.InitialContext()', 'DStop')): [8, -9.105872897431254]}

counter: 16
num skipped: 0
{'include': ['java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'], 'exclude': ['java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'), (False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [31, -6.077642276883125], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.List<>.size()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)'), (False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.List<>.size()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [6, -8.331830605864525], (('DSubTree', 'java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', '$NOT$java.lang.String.equals(java.lang.Object)'), (False, False, False, False), ('java.util.List<java.lang.String>.isEmpty()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(int)', '$NOT$java.lang.String.equals(java.lang.Object)', 'java.util.List<java.lang.String>.add(java.lang.String)')): [13, -3.911547364667058]}

counter: 17
num skipped: 0
{'include': ['java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.add(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)')): [14, -0.9294498608796857], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [36, -0.8318440453149378]}

counter: 18
num skipped: 0
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [26, -10.450427580159158], (('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DStop')): [23, -5.119529199786484], (('DSubTree', 'DLoop', 'java.lang.CharSequence.length()', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.length()', 'java.lang.CharSequence.charAt(int)', 'DStop', 'DStop')): [1, -0.24044333276106045]}

counter: 19
num skipped: 0
{'include': ['java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'], 'exclude': ['java.util.List<>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)'), (False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()')): [28, -2.462812066078186], (('DSubTree', 'java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()'), (False, False, False), ('java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)', 'java.io.OutputStreamWriter.flush()', 'DStop')): [22, -0.9917313449695939]}

counter: 20
num skipped: 0
{'include': ['DExcept', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'DStop')): [50, -8.220639211125672]}

counter: 21
num skipped: 0
{'include': ['DBranch', 'java.lang.StringBuffer.setLength(int)'], 'exclude': ['$NOT$java.awt.event.InputEvent.isConsumed()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.append(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.nio.ByteBuffer.put(byte[],int,int)', 'DStop', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [50, -5.414054831955582]}

counter: 22
num skipped: 0
{'include': ['DBranch', 'java.io.InputStream.available()'], 'exclude': ['javax.swing.JSplitPane.getOrientation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DStop', 'java.io.InputStream.read(byte[])', 'DStop', 'DStop')): [50, -2.8934593200683594]}

counter: 23
num skipped: 0
{'include': ['DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': ['java.lang.String.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [7, -12.724163551814854], (('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Throwable.getMessage()', 'java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Throwable.getMessage()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [4, -13.395123807671553], (('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [3, -9.77332756134092], (('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.String.equals(java.lang.Object)', 'DStop')): [22, -8.366440473124385], (('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)', 'java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)', 'DStop', 'DStop')): [14, -7.782904931111261]}

counter: 24
num skipped: 0
{'include': ['java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'], 'exclude': ['java.io.FileInputStream.read(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInputStream.readInt()'), (False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()')): [14, -8.186338130384684], (('DSubTree', 'java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()'), (False, False, False), ('java.io.DataInputStream.readInt()', 'java.io.FilterInputStream.close()', 'DStop')): [36, -3.59720311340061]}

counter: 26
num skipped: 1
{'include': ['java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)'], 'exclude': ['java.lang.String.String()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.equals(java.lang.Object)'), (False, False), ('java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)')): [13, -0.7449511215090752], (('DSubTree', 'java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)'), (False, False, False), ('java.lang.String.equals(java.lang.Object)', 'java.awt.Font.Font(java.lang.String,int,int)', 'DStop')): [37, -1.0818187777185813]}

counter: 27
num skipped: 1
{'include': ['DExcept', 'java.util.Random.nextInt()'], 'exclude': ['java.io.PrintStream.print(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Random.nextInt()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Random.nextInt()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [42, -17.240933972002722], (('DSubTree', 'DExcept', 'java.util.Random.nextInt()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.Random.nextInt()', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop')): [8, -11.73514201126818]}

counter: 28
num skipped: 1
{'include': ['DLoop', 'java.util.Iterator<byte[]>.next()'], 'exclude': ['$NOT$java.io.File.getAbsoluteFile()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.next()', 'java.io.FileOutputStream.write(byte[])', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.next()', 'java.io.FileOutputStream.write(byte[])', 'DStop', 'DStop')): [50, -12.459820515243337]}

counter: 29
num skipped: 1
{'include': ['java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'], 'exclude': ['java.util.Map<java.lang.String,java.lang.Object>.entrySet()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])'), (False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)')): [25, -1.924355298280716], (('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'DStop')): [14, -3.7747693662531674], (('DSubTree', 'java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)'), (False, False, False, False), ('java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])', 'javax.imageio.ImageIO.read(java.io.InputStream)', 'javax.imageio.ImageIO.createImageInputStream(java.lang.Object)', 'DStop')): [11, -6.734589766303543]}

counter: 30
num skipped: 1
{'include': ['java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()'], 'exclude': ['java.lang.String.String(byte[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)'), (False, False), ('java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()')): [22, -0.5029913298785686], (('DSubTree', 'java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()'), (False, False, False), ('java.io.RandomAccessFile.RandomAccessFile(java.lang.String,java.lang.String)', 'java.io.RandomAccessFile.getFD()', 'DStop')): [28, -1.6676003318279982]}

counter: 31
num skipped: 1
{'include': ['java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)'], 'exclude': ['java.security.Provider.put(java.lang.Object,java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()'), (False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)')): [11, -1.6977177020162344], (('DSubTree', 'java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)'), (False, False, False), ('java.lang.Class<Tau_T>.getCanonicalName()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)', 'DStop')): [39, -1.6760079676023452]}

counter: 32
num skipped: 1
{'include': ['DLoop', 'java.lang.CharSequence.charAt(int)'], 'exclude': ['javax.swing.text.JTextComponent.getSelectionStart()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.CharSequence.charAt(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [31, -6.739966543391347], (('DSubTree', 'DLoop', 'java.lang.String.length()', 'java.lang.CharSequence.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.String.length()', 'java.lang.CharSequence.charAt(int)', 'DStop', 'DStop')): [19, -8.162322084128391]}

counter: 33
num skipped: 1
{'include': ['DExcept', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.close()', 'DStop', 'DStop')): [50, -7.711078643798828]}

counter: 34
num skipped: 1
{'include': ['java.lang.Number.doubleValue()', 'java.lang.Math.atan(double)'], 'exclude': ['java.lang.Boolean.parseBoolean(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Number.doubleValue()'), (False, False), ('java.lang.Number.doubleValue()', 'java.lang.Math.atan(double)')): [2, -0.2580238056834787], (('DSubTree', 'java.lang.Number.doubleValue()', 'java.util.Date.getTime()'), (False, False, False), ('java.lang.Number.doubleValue()', 'java.util.Date.getTime()', 'java.lang.Math.atan(double)')): [2, -4.275014852639288], (('DSubTree', 'java.lang.Number.doubleValue()', 'java.util.Date.getTime()', 'java.lang.Math.atan(double)'), (False, False, False, False), ('java.lang.Number.doubleValue()', 'java.util.Date.getTime()', 'java.lang.Math.atan(double)', 'DStop')): [46, -2.61755978979636]}

counter: 35
num skipped: 1
{'include': ['DExcept', 'java.sql.ResultSet.getLong(java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.ResultSet.getLong(java.lang.String)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [29, -11.711371938697994], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getLong(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getLong(java.lang.String)', 'DStop', 'DStop')): [12, -12.473468834527011], (('DSubTree', 'DExcept', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Throwable.printStackTrace()', 'java.sql.ResultSet.getLong(java.lang.String)', 'DStop')): [9, -6.577322741140961]}

counter: 36
num skipped: 1
{'include': ['DBranch', 'java.net.URL.toExternalForm()'], 'exclude': ['javax.swing.UIManager.put(java.lang.Object,java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.net.URL.toExternalForm()', 'java.net.URL.toExternalForm()', 'java.net.URL.toExternalForm()', 'java.net.URL.openStream()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.net.URL.toExternalForm()', 'java.net.URL.toExternalForm()', 'DStop', 'java.net.URL.openStream()', 'DStop', 'DStop')): [50, -4.559877922525629]}

counter: 37
num skipped: 1
{'include': ['DLoop', 'java.util.Vector.Vector()'], 'exclude': ['javax.swing.JFileChooser.JFileChooser()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Vector.Vector()', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Vector.Vector()', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -9.034767866134644]}

counter: 38
num skipped: 1
{'include': ['DExcept', 'java.util.Calendar.add(int,int)'], 'exclude': ['java.util.TreeMap<Tau_K,Tau_V>.TreeMap(java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Calendar.add(int,int)', 'java.io.BufferedReader.readLine()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.add(int,int)', 'java.io.BufferedReader.readLine()', 'DStop', 'DStop')): [50, -11.151926158847346]}

counter: 39
num skipped: 1
{'include': ['java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'], 'exclude': ['java.util.List<java.lang.String>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()'), (False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [12, -4.455868737772107], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [9, -5.2300543347373605], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop')): [29, -2.233334227465093]}

counter: 40
num skipped: 1
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': ['java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [16, -6.31180727481842], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [6, -3.1403266485176573], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)'), (False, False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [3, -1.947858065366745], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [3, -5.235951743088663], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False, False, False, False), ('javax.swing.JPanel.JPanel()', 'java.awt.Container.add(java.awt.Component)', 'java.awt.Dimension.Dimension(int,int)', 'javax.swing.JComponent.setMinimumSize(java.awt.Dimension)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [22, -7.341277528554201]}

counter: 41
num skipped: 1
{'include': ['java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()'], 'exclude': ['java.lang.Integer.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.setLength(int)'), (False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()')): [15, -2.8083416223526], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()', 'DStop')): [5, -4.967542231082916], (('DSubTree', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()'), (False, False, False), ('java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()', 'java.lang.String.trim()')): [5, -5.7054930329322815], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)'), (False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()')): [17, -4.906076431274414], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()'), (False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.String.trim()', 'DStop')): [4, -10.378347493708134], (('DSubTree', 'java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()', 'java.lang.String.trim()'), (False, False, False, False, False), ('java.lang.StringBuilder.toString()', 'java.lang.StringBuilder.setLength(int)', 'java.lang.StringBuilder.toString()', 'java.lang.String.trim()', 'DStop')): [4, -7.913365051150322]}

counter: 42
num skipped: 1
{'include': ['DExcept', 'java.io.ByteArrayOutputStream.close()'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.ByteArrayOutputStream.close()', 'java.io.ObjectOutputStream.close()', 'DStop', 'DStop')): [50, -9.065618485212326]}

counter: 43
num skipped: 1
{'include': ['java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'], 'exclude': ['java.awt.Component.setSize(int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Container.getComponentCount()'), (False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)')): [15, -2.5463989973068237], (('DSubTree', 'java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)'), (False, False, False), ('java.awt.Container.getComponentCount()', 'java.awt.Container.getComponent(int)', 'DStop')): [35, -1.5585839706473053]}

counter: 45
num skipped: 2
{'include': ['DLoop', 'java.util.Iterator<byte[]>.next()'], 'exclude': ['$NOT$java.io.File.getAbsoluteFile()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [11, -17.609569206251763], (('DSubTree', 'DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Iterator<byte[]>.next()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'DStop', 'DStop')): [39, -17.802223205566406]}
