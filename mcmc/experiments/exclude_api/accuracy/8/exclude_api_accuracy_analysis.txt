data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'], 'exclude': ['java.util.regex.Matcher.start()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.random()'), (False, False), ('java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)')): [27, -3.749168336391449], (('DSubTree', 'java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.append(java.lang.String)')): [15, -3.3170436322689056], (('DSubTree', 'java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DStop')): [7, -5.128530425601639], (('DSubTree', 'java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.toString()'), (False, False, False, False), ('java.lang.Math.random()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.toString()', 'DStop')): [1, -0.9151328857697081]}

counter: 1
num skipped: 0
{'include': ['DBranch', 'java.io.InputStream.available()'], 'exclude': ['javax.swing.JSplitPane.getOrientation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[],int,int)', 'java.io.InputStream.available()', 'java.lang.System.currentTimeMillis()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[],int,int)', 'DStop', 'java.lang.System.currentTimeMillis()', 'DStop', 'DStop')): [43, -4.253192191419657], (('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[],int,int)', 'java.io.InputStream.available()', 'DBranch'), (False, True, True, True, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[],int,int)', 'DStop', 'DStop', 'DStop')): [7, -2.5275224472861737]}

counter: 2
num skipped: 0
{'include': ['java.lang.String.equalsIgnoreCase(java.lang.String)', 'java.util.UUID.fromString(java.lang.String)'], 'exclude': ['java.lang.Boolean.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.UUID.fromString(java.lang.String)'), (False, False), ('java.util.UUID.fromString(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)')): [14, -3.541478455066681], (('DSubTree', 'java.util.UUID.fromString(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)'), (False, False, False), ('java.util.UUID.fromString(java.lang.String)', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop')): [36, -2.2085699647432193]}

counter: 3
num skipped: 0
{'include': ['java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [20, -0.3720128280110657], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [30, -1.4820615304633975]}

counter: 4
num skipped: 0
{'include': ['java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'], 'exclude': ['java.util.ArrayList<java.lang.String>.add(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.System.getenv(java.lang.String)'), (False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)')): [23, -1.764507632702589], (('DSubTree', 'java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.lang.System.getenv(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'DStop')): [27, -2.720347945112735]}

counter: 6
num skipped: 1
{'include': ['DLoop', 'java.util.ArrayList<java.lang.Integer>.size()'], 'exclude': ['java.util.List<java.lang.String>.remove(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.ArrayList<java.lang.Integer>.size()', 'java.util.ArrayList<java.lang.Integer>.get(int)', 'DStop', 'DStop')): [50, -2.1635914871440036]}

counter: 7
num skipped: 1
{'include': ['java.lang.Enum<>.name()', 'java.lang.StringBuilder.toString()'], 'exclude': ['javax.swing.JTable.getColumnModel()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Enum<>.name()'), (False, False), ('java.lang.Enum<>.name()', 'java.lang.StringBuilder.toString()')): [7, -5.6524427235126495], (('DSubTree', 'java.lang.Enum<>.name()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False), ('java.lang.Enum<>.name()', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.toString()')): [9, -5.0103292390704155], (('DSubTree', 'java.lang.Enum<>.name()', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)'), (False, False, False, False), ('java.lang.Enum<>.name()', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'java.lang.StringBuilder.toString()')): [7, -7.250368382781744], (('DSubTree', 'java.lang.Enum<>.name()', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DBranch', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.toString()', 'DBranch'), (False, False, False, False, True, True, False, False, False), ('java.lang.Enum<>.name()', 'java.lang.String.split(java.lang.String,int)', 'java.lang.StringBuilder.StringBuilder(java.lang.String)', 'DBranch', 'java.lang.StringBuilder.length()', 'DStop', 'java.lang.StringBuilder.toString()', 'DStop', 'DStop')): [27, -9.658025260083377]}

counter: 8
num skipped: 1
{'include': ['java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)'], 'exclude': ['$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.charAt(int)'), (False, False), ('java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)')): [21, -0.29096076264977455], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)', 'java.lang.String.substring(int)')): [4, -0.8102608229964972], (('DSubTree', 'java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)'), (False, False, False), ('java.lang.String.charAt(int)', 'java.lang.Character.toUpperCase(char)', 'DStop')): [25, -2.9849456027150154]}

counter: 9
num skipped: 1
{'include': ['DExcept', 'java.sql.PreparedStatement.executeUpdate()'], 'exclude': ['java.util.Arrays.sort(T[],java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.executeUpdate()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.executeUpdate()', 'DStop', 'DStop')): [27, -15.050614450359717], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.sql.PreparedStatement.executeUpdate()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.sql.PreparedStatement.executeUpdate()', 'DStop', 'DStop')): [23, -1.8451619958577794]}

counter: 10
num skipped: 1
{'include': ['DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()'], 'exclude': ['java.util.StringTokenizer.nextToken()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [2, -20.814137518405914], (('DSubTree', 'DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'DExcept'), (False, True, True, False), ('DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop')): [27, -15.847198710442171], (('DSubTree', 'DExcept', '$NOT$java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False), ('DExcept', '$NOT$java.lang.String.equals(java.lang.Object)', 'javax.xml.bind.JAXBContext.createMarshaller()', 'DStop')): [3, -15.71106264158152], (('DSubTree', 'DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'DExcept'), (False, True, True, False), ('DExcept', 'javax.xml.bind.JAXBContext.createMarshaller()', 'java.lang.String.charAt(int)', 'DStop')): [18, -19.41282050492009]}

counter: 11
num skipped: 1
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.security.SecureRandom.getInstance(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [46, -1.462766066309996], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [4, -0.21633991599082947]}

counter: 12
num skipped: 1
{'include': ['java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)'], 'exclude': ['java.util.StringTokenizer.hasMoreTokens()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashSet.HashSet()'), (False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)')): [17, -0.7774141924455762], (('DSubTree', 'java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)'), (False, False, False), ('java.util.HashSet.HashSet()', 'java.util.Collection.add(java.lang.Object)', 'DStop')): [33, -0.29923724941909313]}

counter: 13
num skipped: 1
{'include': ['java.util.Calendar.getInstance()', 'java.math.BigDecimal.BigDecimal(int)'], 'exclude': ['java.util.regex.Matcher.find()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Calendar.getInstance()'), (False, False), ('java.util.Calendar.getInstance()', 'java.math.BigDecimal.BigDecimal(int)')): [3, -0.7465198921272531], (('DSubTree', 'java.util.Calendar.getInstance()', 'java.math.BigDecimal.BigDecimal(int)'), (False, False, False), ('java.util.Calendar.getInstance()', 'java.math.BigDecimal.BigDecimal(int)', 'DStop')): [32, -1.769810950710962], (('DSubTree', 'java.math.BigDecimal.BigDecimal(int)', 'java.util.Calendar.getInstance()'), (False, False, False), ('java.math.BigDecimal.BigDecimal(int)', 'java.util.Calendar.getInstance()', 'DStop')): [12, -4.112225552555174], (('DSubTree', 'java.math.BigDecimal.BigDecimal(int)'), (False, False), ('java.math.BigDecimal.BigDecimal(int)', 'java.util.Calendar.getInstance()')): [3, -0.7752548111602664]}

counter: 14
num skipped: 1
{'include': ['javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'], 'exclude': ['java.lang.StringBuilder.append(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)'), (False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)')): [5, -1.5394492223858833], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)'), (False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.lang.Double.Double(double)')): [16, -4.524166017770767], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)'), (False, False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)', 'java.lang.Double.Double(double)')): [6, -6.423434555530548], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)', 'java.lang.Double.Double(double)'), (False, False, False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)', 'java.lang.Double.Double(double)', 'DStop')): [8, -6.131362008862197], (('DSubTree', 'javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)', 'java.lang.Double.Double(double)'), (False, False, False, False, False), ('javax.management.ObjectName.ObjectName(java.lang.String)', 'javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)', 'java.util.List<>.get(int)', 'java.lang.Double.Double(double)', 'java.util.List<>.get(int)')): [15, -7.448908224701881]}

counter: 15
num skipped: 1
{'include': ['java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'], 'exclude': ['javax.swing.text.JTextComponent.setText(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])'), (False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])')): [23, -0.6890662014484406], (('DSubTree', 'java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])'), (False, False, False), ('java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])', 'DStop')): [27, -0.9089605211529488]}

counter: 16
num skipped: 1
{'include': ['DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])'], 'exclude': ['java.io.ObjectOutputStream.close()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop', 'DStop')): [3, -8.310681225295411], (('DSubTree', 'DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop')): [35, -3.2248461535200477], (('DSubTree', 'DExcept', 'java.util.List<T>.size()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.List<T>.size()', 'java.lang.Class<>.getDeclaredConstructor(java.lang.Class[])', 'DStop')): [12, -4.942988659255207]}

counter: 17
num skipped: 1
{'include': ['$NOT$java.io.File.canRead()', 'DBranch'], 'exclude': ['java.io.ByteArrayInputStream.read()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', '$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.isDirectory()', 'java.io.File.delete()', 'DBranch'), (False, False, True, True, False, False, False, False), ('$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.listFiles()', 'DStop', 'java.io.File.delete()', 'DStop', 'DStop')): [40, -7.089542501584219], (('DSubTree', '$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.isDirectory()', 'java.io.File.delete()', 'DBranch'), (False, False, True, True, False, False, False), ('$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.delete()', 'DStop', 'DStop')): [6, -5.322558314117487], (('DSubTree', '$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.getName()', 'java.lang.Class<Tau_T>.getName()', 'java.io.File.isDirectory()', 'DBranch'), (False, False, True, True, True, True, False, False, False), ('$NOT$java.io.File.canRead()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.listFiles()', 'java.io.File.getName()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'DStop', 'DStop')): [4, -7.758022851019632]}

counter: 19
num skipped: 2
{'include': ['DBranch', 'java.io.InputStream.available()'], 'exclude': ['javax.swing.JSplitPane.getOrientation()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.available()', 'java.io.InputStream.close()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DStop', 'java.io.InputStream.close()', 'DStop', 'DStop')): [45, -1.2386688310652971], (('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'java.io.InputStream.available()', 'DBranch'), (False, True, True, True, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DStop', 'DStop', 'DStop')): [5, -1.0235550934448838]}

counter: 20
num skipped: 2
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'], 'exclude': ['java.net.URL.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [29, -3.8104495590087026], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)')): [4, -8.65927388612181], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)', 'DStop')): [17, -2.622962834313512]}

counter: 21
num skipped: 2
{'include': ['java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': ['java.lang.Class<Tau_T>.getSimpleName()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()'), (False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)')): [30, -3.5101535320281982], (('DSubTree', 'java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False), ('java.lang.Class<Tau_T>.getClassLoader()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [20, -0.9427766650915146]}

counter: 22
num skipped: 2
{'include': ['java.util.Map<java.lang.String,byte[]>.entrySet()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'], 'exclude': ['java.lang.StringBuffer.StringBuffer(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Map<java.lang.String,byte[]>.entrySet()'), (False, False), ('java.util.Map<java.lang.String,byte[]>.entrySet()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [27, -0.5776000320911407], (('DSubTree', 'java.util.Map<java.lang.String,byte[]>.entrySet()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.Map<java.lang.String,byte[]>.entrySet()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop')): [23, -1.8344035627087578]}

counter: 23
num skipped: 2
{'include': ['java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)'], 'exclude': ['java.util.List<java.lang.Double>.add(java.lang.Double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.RectangularShape.getY()'), (False, False), ('java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)')): [1, -19.82421875], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)'), (False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)', 'DStop')): [2, -16.565160118043423], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)', 'java.lang.Integer.Integer(int)'), (False, False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)', 'java.lang.Integer.Integer(int)', 'DStop')): [35, -10.582850663806312], (('DSubTree', 'java.awt.geom.RectangularShape.getY()', 'java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.min(double,double)', 'java.lang.Integer.Integer(int)'), (False, False, False, False, False), ('java.awt.geom.RectangularShape.getY()', 'java.awt.geom.RectangularShape.getHeight()', 'java.lang.Math.min(double,double)', 'java.lang.Integer.Integer(int)', 'DStop')): [12, -9.560049537336454]}

counter: 24
num skipped: 2
{'include': ['java.util.Date.getTime()', 'java.lang.Math.round(double)'], 'exclude': ['java.lang.String.toUpperCase()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.getTime()'), (False, False), ('java.util.Date.getTime()', 'java.lang.Math.round(double)')): [10, -1.6805405467748642], (('DSubTree', 'java.util.Date.getTime()', 'java.lang.Math.round(double)'), (False, False, False), ('java.util.Date.getTime()', 'java.lang.Math.round(double)', 'DStop')): [40, -2.4485213747248054]}

counter: 25
num skipped: 2
{'include': ['java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getY()'], 'exclude': ['java.util.List<java.lang.Double>.add(java.lang.Double)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.min(double,double)'), (False, False), ('java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getY()')): [8, -23.8941437471658], (('DSubTree', 'java.awt.geom.RectangularShape.getY()'), (False, False), ('java.awt.geom.RectangularShape.getY()', 'java.lang.Math.min(double,double)')): [4, -24.781866550445557], (('DSubTree', 'java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getX()'), (False, False, False), ('java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getY()')): [11, -15.658364236354828], (('DSubTree', 'java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getY()'), (False, False, False, False), ('java.lang.Math.min(double,double)', 'java.awt.geom.RectangularShape.getX()', 'java.awt.geom.RectangularShape.getY()', 'DStop')): [27, -4.467004920355976]}

counter: 26
num skipped: 2
{'include': ['java.lang.Integer.Integer(java.lang.String)', 'java.lang.Math.max(int,int)'], 'exclude': ['java.io.FileInputStream.FileInputStream(java.io.File)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Integer.Integer(java.lang.String)'), (False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Math.max(int,int)')): [26, -1.4212925732135773], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Math.max(int,int)'), (False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Math.max(int,int)', 'DStop')): [5, -2.690408244729042], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Math.max(int,int)'), (False, False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Math.max(int,int)', 'DStop')): [4, -5.195279111620039], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)'), (False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Math.max(int,int)')): [12, -3.7167117968201637], (('DSubTree', 'java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Math.max(int,int)'), (False, False, False, False), ('java.lang.Integer.Integer(java.lang.String)', 'java.lang.Integer.valueOf(int)', 'java.lang.Math.max(int,int)', 'java.lang.Integer.valueOf(int)')): [3, -7.27860402315855]}

counter: 27
num skipped: 2
{'include': ['javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'], 'exclude': ['java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JPanel.JPanel()'), (False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [33, -10.728648066520691], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JLabel.JLabel(java.lang.String)'), (False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)')): [11, -3.9585347175598145], (('DSubTree', 'javax.swing.JPanel.JPanel()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)'), (False, False, False, False), ('javax.swing.JPanel.JPanel()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.JComponent.setPreferredSize(java.awt.Dimension)', 'DStop')): [6, -6.43286120146513]}

counter: 28
num skipped: 2
{'include': ['java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.close()'], 'exclude': ['java.io.File.length()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.close()'), (False, False, False), ('java.io.RandomAccessFile.writeInt(int)', 'java.io.RandomAccessFile.close()', 'DStop')): [50, -7.337132206608658]}

counter: 29
num skipped: 2
{'include': ['java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'], 'exclude': ['java.lang.Thread.yield()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Math.abs(float)'), (False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)')): [20, -0.7627875208854675], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)'), (False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'DStop')): [28, -4.13870707154274], (('DSubTree', 'java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.min(int,int)'), (False, False, False, False), ('java.lang.Math.abs(float)', 'java.lang.Math.min(float,float)', 'java.lang.Math.min(int,int)', 'DStop')): [2, -4.945770981867099]}

counter: 30
num skipped: 2
{'include': ['java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)'], 'exclude': ['java.io.File.listFiles()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Date.Date()'), (False, False), ('java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)')): [3, -7.646188255399466], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)'), (False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'DStop')): [22, -5.756855504587293], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)'), (False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)')): [12, -2.128107249736786], (('DSubTree', 'java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)'), (False, False, False, False, False), ('java.util.Date.Date()', 'java.util.Calendar.getInstance(java.util.TimeZone)', 'java.util.Calendar.setTime(java.util.Date)', 'java.util.Calendar.get(int)', 'DStop')): [13, -2.031944617629051]}

counter: 31
num skipped: 2
{'include': ['java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.close()'], 'exclude': ['java.util.ArrayList<java.lang.Integer>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)'), (False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.close()')): [12, -10.011508524417877], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()')): [13, -2.902029439806938], (('DSubTree', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()'), (False, False, False, False), ('java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.BufferedWriter.close()', 'DStop')): [25, -1.8248203285038471]}

counter: 32
num skipped: 2
{'include': ['java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)'], 'exclude': ['java.awt.FontMetrics.getDescent()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics.getClip()'), (False, False), ('java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)')): [7, -1.3918790817260742], (('DSubTree', 'java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'DStop')): [37, -2.2420337391085923], (('DSubTree', 'java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)'), (False, False, False), ('java.awt.Graphics.getClip()', 'java.awt.Graphics2D.clip(java.awt.Shape)', 'java.awt.Graphics.setClip(java.awt.Shape)')): [6, -2.0210925797000527]}

counter: 33
num skipped: 2
{'include': ['DBranch', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)'], 'exclude': ['$NOT$java.math.BigInteger.equals(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.lang.Throwable.getMessage()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.HashSet<Tau_E>.HashSet(java.util.Collection)', 'java.util.Set<java.lang.String>.contains(java.lang.Object)', 'DStop', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -5.767086743957407]}

counter: 34
num skipped: 2
{'include': ['DExcept', 'java.lang.StringBuilder.append(double)'], 'exclude': ['java.util.Iterator<>.hasNext()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuilder.append(double)', 'java.lang.Boolean.toString(boolean)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuilder.append(double)', 'java.lang.Boolean.toString(boolean)', 'DStop', 'DStop')): [43, -19.35475360815326], (('DSubTree', 'DExcept', 'java.lang.StringBuilder.append(double)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.StringBuilder.append(double)', 'java.lang.Boolean.toString(boolean)', 'DStop')): [7, -19.886235223559197]}

counter: 35
num skipped: 2
{'include': ['DExcept', 'java.io.IOException.IOException()'], 'exclude': ['java.io.DataInputStream.read(byte[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.IOException.IOException()', 'java.io.File.File(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.IOException.IOException()', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [22, -10.367250706901359], (('DSubTree', 'DExcept', 'java.io.IOException.IOException()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.io.IOException.IOException()', 'java.io.File.File(java.lang.String)', 'DStop')): [28, -4.56474642539979]}

counter: 36
num skipped: 2
{'include': ['java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()'], 'exclude': ['javax.swing.JComponent.getHeight()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.TreeSet<Tau_E>.TreeSet()'), (False, False), ('java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()')): [22, -7.097636520862579], (('DSubTree', 'java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()'), (False, False, False), ('java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()', 'java.awt.geom.Point2D.getX()')): [7, -10.1820729970932], (('DSubTree', 'java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()'), (False, False, False), ('java.util.TreeSet<Tau_E>.TreeSet()', 'java.util.Iterator.hasNext()', 'DStop')): [21, -5.373218156397343]}

counter: 37
num skipped: 2
{'include': ['DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()'], 'exclude': ['java.lang.String.valueOf(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Class<T>.isAssignableFrom(java.lang.Class)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.xml.parsers.DocumentBuilder.newDocument()', 'java.lang.Class<T>.isAssignableFrom(java.lang.Class)', 'DStop', 'DStop')): [50, -1.3785574808716774]}

counter: 38
num skipped: 2
{'include': ['java.math.BigInteger.BigInteger(java.lang.String)', 'java.lang.String.String(byte[])'], 'exclude': ['java.lang.StringBuilder.append(long)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)'), (False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.lang.String.String(byte[])')): [15, -0.8876214027404785], (('DSubTree', 'java.math.BigInteger.BigInteger(java.lang.String)', 'java.lang.String.String(byte[])'), (False, False, False), ('java.math.BigInteger.BigInteger(java.lang.String)', 'java.lang.String.String(byte[])', 'DStop')): [35, -1.362796887755394]}

counter: 39
num skipped: 2
{'include': ['java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.append(java.lang.Object)'], 'exclude': ['java.lang.Integer.valueOf(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.append(java.lang.Object)')): [5, -9.716546058654785], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.append(java.lang.Object)', 'DStop')): [25, -10.20474998978898], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'DStop')): [5, -11.420089561725035], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)'), (False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'DStop')): [2, -6.427751913666725], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.append(java.lang.String)'), (False, False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()', 'java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)', 'java.lang.StringBuffer.StringBuffer()', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.Object)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [13, -7.086194321513176]}

counter: 40
num skipped: 2
{'include': ['DBranch', 'java.awt.Color.getGreen()'], 'exclude': ['javax.swing.UIManager.getDefaults()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.Color.getGreen()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)', 'java.awt.Color.getGreen()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.Color.getGreen()', 'java.lang.System.setProperty(java.lang.String,java.lang.String)', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [50, -13.53493034462008]}
