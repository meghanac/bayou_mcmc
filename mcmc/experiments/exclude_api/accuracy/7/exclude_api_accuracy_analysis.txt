data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: accuracy
num test programs: 50


counter: 0
num skipped: 0
{'include': ['DExcept', 'java.sql.PreparedStatement.executeUpdate()'], 'exclude': ['java.util.Arrays.sort(T[],java.util.Comparator)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.PreparedStatement.executeUpdate()', 'java.sql.PreparedStatement.setString(int,java.lang.String)', 'DStop', 'DStop')): [50, -9.965775777585804]}

counter: 1
num skipped: 0
{'include': ['java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])'], 'exclude': ['java.awt.geom.RectangularShape.getWidth()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedReader.readLine()'), (False, False), ('java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])')): [4, -1.2391585856676102], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])'), (False, False, False), ('java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()')): [3, -1.0902428291738033], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.lang.String.length()', 'java.io.PrintWriter.println(char[])'), (False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.lang.String.length()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()')): [13, -6.667479015886784], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])'), (False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()')): [3, -1.9878929025144316], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])'), (False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()')): [5, -3.4520610757172108], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])'), (False, False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'DStop')): [9, -3.0387107990682125], (('DSubTree', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()'), (False, False, False, False), ('java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])', 'java.io.BufferedReader.readLine()', 'java.io.PrintWriter.println(char[])')): [13, -1.689011464593932]}

counter: 2
num skipped: 0
{'include': ['DBranch', 'java.lang.Math.signum(float)'], 'exclude': ['java.util.Arrays.equals(byte[],byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Math.signum(float)', 'java.lang.Math.min(int,int)', 'java.lang.Math.signum(float)', 'java.io.File.length()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Math.signum(float)', 'java.lang.Math.min(int,int)', 'DStop', 'java.io.File.length()', 'DStop', 'DStop')): [50, -15.560852885244685]}

counter: 4
num skipped: 1
{'include': ['java.io.File.getName()', 'java.io.Reader.read(char[])'], 'exclude': ['java.lang.String.replace(char,char)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getName()'), (False, False), ('java.io.File.getName()', 'java.io.Reader.read(char[])')): [44, -2.8194517344236374], (('DSubTree', 'java.io.File.getName()', 'java.io.Reader.read(char[])'), (False, False, False), ('java.io.File.getName()', 'java.io.Reader.read(char[])', 'DStop')): [6, -6.17292835470289]}

counter: 5
num skipped: 1
{'include': ['DExcept', 'javax.naming.Context.lookup(java.lang.String)'], 'exclude': ['java.util.logging.Logger.getGlobal()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.naming.Context.lookup(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.naming.Context.lookup(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'DStop', 'DStop')): [50, -8.99253922700882]}

counter: 6
num skipped: 1
{'include': ['java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)'], 'exclude': ['java.awt.geom.AffineTransform.AffineTransform(float,float,float,float,float,float)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)'), (False, False), ('java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)')): [8, -9.663105487823486], (('DSubTree', 'java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)'), (False, False, False), ('java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)', 'DStop')): [4, -10.409765580669045], (('DSubTree', 'java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.util.Random.nextInt(int)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)'), (False, False, False, False), ('java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.util.Random.nextInt(int)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)', 'DStop')): [16, -7.726401314139366], (('DSubTree', 'java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.util.Random.nextInt(int)'), (False, False, False), ('java.awt.geom.AffineTransform.AffineTransform(java.awt.geom.AffineTransform)', 'java.util.Random.nextInt(int)', 'java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)')): [22, -5.452951684594154]}

counter: 7
num skipped: 1
{'include': ['DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)'], 'exclude': ['$NOT$java.awt.GraphicsEnvironment.isHeadless()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.awt.datatransfer.DataFlavor.DataFlavor(java.lang.String)', 'java.nio.charset.Charset.forName(java.lang.String)', 'DStop', 'DStop')): [50, -7.108449573628604]}

counter: 8
num skipped: 1
{'include': ['java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)'], 'exclude': ['java.sql.ResultSet.getString(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.indexOf(java.lang.String)')): [1, -3.162346167024225], (('DSubTree', 'java.lang.String.valueOf(double)'), (False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)')): [25, -0.43781331356149167], (('DSubTree', 'java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)', 'DStop')): [22, -5.752354234457016], (('DSubTree', 'java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int,int)'), (False, False, False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int,int)', 'DStop')): [1, -3.9489126298576593], (('DSubTree', 'java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)'), (False, False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.indexOf(java.lang.String)', 'java.lang.String.substring(int,int)')): [1, -2.6137507520616055]}

counter: 9
num skipped: 1
{'include': ['DLoop', 'java.util.concurrent.TimeUnit.toNanos(long)'], 'exclude': ['java.util.ArrayList.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Thread.currentThread()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Thread.currentThread()', 'DStop', 'DStop')): [36, -7.141188383102417], (('DSubTree', 'DLoop', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Thread.start()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.concurrent.TimeUnit.toNanos(long)', 'java.lang.Thread.start()', 'DStop', 'DStop')): [14, -8.800954575184733]}

counter: 10
num skipped: 1
{'include': ['java.awt.Component.getX()', 'java.awt.Point.Point(int,int)'], 'exclude': ['java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Component.getX()'), (False, False), ('java.awt.Component.getX()', 'java.awt.Point.Point(int,int)')): [2, -16.180519104003906], (('DSubTree', 'java.awt.Point.Point(int,int)'), (False, False), ('java.awt.Point.Point(int,int)', 'java.awt.Component.getX()')): [1, -14.334638118743896], (('DSubTree', 'java.awt.Component.getX()', 'java.awt.Point.Point(int,int)'), (False, False, False), ('java.awt.Component.getX()', 'java.awt.Point.Point(int,int)', 'DStop')): [47, -6.1961124518857105]}

counter: 11
num skipped: 1
{'include': ['java.util.Arrays.fill(double[],double)', 'java.text.NumberFormat.getInstance()'], 'exclude': ['java.util.TreeMap<Tau_K,Tau_V>.TreeMap()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Arrays.fill(double[],double)', 'java.text.NumberFormat.getInstance()'), (False, False, False), ('java.util.Arrays.fill(double[],double)', 'java.text.NumberFormat.getInstance()', 'DStop')): [19, -8.666164868278429], (('DSubTree', 'java.util.Arrays.fill(double[],double)'), (False, False), ('java.util.Arrays.fill(double[],double)', 'java.text.NumberFormat.getInstance()')): [31, -4.151590585708618]}

counter: 12
num skipped: 1
{'include': ['java.util.UUID.randomUUID()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'], 'exclude': ['java.lang.Double.valueOf(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.UUID.randomUUID()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)'), (False, False, False), ('java.util.UUID.randomUUID()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)', 'DStop')): [48, -0.6699814270250499], (('DSubTree', 'java.util.UUID.randomUUID()'), (False, False), ('java.util.UUID.randomUUID()', 'java.io.File.createTempFile(java.lang.String,java.lang.String)')): [2, -0.3868170715868473]}

counter: 13
num skipped: 1
{'include': ['DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': ['java.lang.StringBuffer.append(char[],int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop', 'DStop')): [19, -4.864634037017822], (('DSubTree', 'DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'DLoop'), (False, True, True, False), ('DLoop', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop')): [31, -3.3299400806427]}

counter: 14
num skipped: 1
{'include': ['java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'], 'exclude': ['java.util.List<java.lang.String>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()'), (False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [1, -2.2586251489119604], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)'), (False, False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [2, -6.2220634133554995], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)'), (False, False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [45, -4.349267209880054], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)'), (False, False, False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [1, -6.305930723436177], (('DSubTree', 'java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)'), (False, False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()', 'java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)', 'java.util.ArrayList<java.lang.String>.ArrayList<String>()')): [1, -5.173990771174431]}

counter: 16
num skipped: 2
{'include': ['DBranch', 'java.util.List<java.lang.String>.clear()'], 'exclude': ['java.awt.Color.Color(int,int,int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.List<java.lang.String>.clear()', 'java.lang.String.toUpperCase()', 'java.util.List<java.lang.String>.clear()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.List<java.lang.String>.clear()', 'java.lang.String.toUpperCase()', 'DStop', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -3.5290623903274536]}

counter: 17
num skipped: 2
{'include': ['java.io.File.getCanonicalPath()', 'java.io.FileReader.FileReader(java.lang.String)'], 'exclude': ['javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.File.getCanonicalPath()'), (False, False), ('java.io.File.getCanonicalPath()', 'java.io.FileReader.FileReader(java.lang.String)')): [20, -5.857026658952236], (('DSubTree', 'java.io.File.getCanonicalPath()', 'java.io.FileReader.FileReader(java.lang.String)'), (False, False, False), ('java.io.File.getCanonicalPath()', 'java.io.FileReader.FileReader(java.lang.String)', 'DStop')): [30, -3.6425935169681907]}

counter: 18
num skipped: 2
{'include': ['java.util.Collections.unmodifiableSet(java.util.Set)', 'java.util.Collections.unmodifiableMap(java.util.Map)'], 'exclude': ['java.util.Set<java.lang.String>.contains(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Collections.unmodifiableSet(java.util.Set)'), (False, False), ('java.util.Collections.unmodifiableSet(java.util.Set)', 'java.util.Collections.unmodifiableMap(java.util.Map)')): [6, -5.217868035659194], (('DSubTree', 'java.util.Collections.unmodifiableMap(java.util.Map)'), (False, False), ('java.util.Collections.unmodifiableMap(java.util.Map)', 'java.util.Collections.unmodifiableSet(java.util.Set)')): [36, -1.7272635400295258], (('DSubTree', 'java.util.Collections.unmodifiableMap(java.util.Map)', 'java.util.Collections.unmodifiableSet(java.util.Set)'), (False, False, False), ('java.util.Collections.unmodifiableMap(java.util.Map)', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'DStop')): [8, -0.7423875883687288]}

counter: 19
num skipped: 2
{'include': ['java.net.InetAddress.getByName(java.lang.String)', 'java.net.InetAddress.isAnyLocalAddress()'], 'exclude': ['java.lang.Thread.setDaemon(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.net.InetAddress.getByName(java.lang.String)', 'java.net.InetAddress.isAnyLocalAddress()'), (False, False, False), ('java.net.InetAddress.getByName(java.lang.String)', 'java.net.InetAddress.isAnyLocalAddress()', 'DStop')): [16, -3.0650754737944226], (('DSubTree', 'java.net.InetAddress.getByName(java.lang.String)'), (False, False), ('java.net.InetAddress.getByName(java.lang.String)', 'java.net.InetAddress.isAnyLocalAddress()')): [34, -3.6888829730451107]}

counter: 20
num skipped: 2
{'include': ['DBranch', 'java.io.OutputStream.write(int)'], 'exclude': ['java.io.ObjectInputStream.defaultReadObject()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.OutputStream.write(int)', 'java.io.OutputStream.write(byte[],int,int)', 'java.io.OutputStream.write(int)', 'java.io.OutputStream.write(byte[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.OutputStream.write(int)', 'java.io.OutputStream.write(byte[],int,int)', 'DStop', 'java.io.OutputStream.write(byte[])', 'DStop', 'DStop')): [50, -7.007035255432129]}

counter: 21
num skipped: 2
{'include': ['java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'], 'exclude': ['java.lang.Float.floatValue()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)')): [16, -2.849197957664728], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'DStop')): [1, -4.440338275860995], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [1, -5.103702202439308], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [6, -2.7869161665439606], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)'), (False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [1, -8.637364903464913], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [2, -11.3559036757797], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [3, -11.504210724961013], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [3, -8.935231467476115], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)'), (False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()')): [16, -5.023653206386371], (('DSubTree', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()'), (False, False, False, False, False), ('java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.util.Set<java.lang.String>.add(java.lang.String)', 'java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)')): [1, -4.820261734887026]}

counter: 23
num skipped: 3
{'include': ['javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()'], 'exclude': ['java.io.FileOutputStream.write(byte[])'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()'), (False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()')): [13, -0.14006084948778152], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)')): [1, -2.1158368546166457], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'java.io.InputStreamReader.InputStreamReader(java.io.InputStream)')): [5, -7.5441752057522535], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'java.io.FileInputStream.FileInputStream(java.io.File)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'java.io.FileInputStream.FileInputStream(java.io.File)', 'DStop')): [5, -1.570833072066307], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()'), (False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'DStop')): [9, -1.0411790219368413], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [1, -3.253349896520376], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'), (False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'DStop')): [3, -10.450217972509563], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.InputStream.close()'), (False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.InputStream.close()', 'DStop')): [3, -10.645836539333686], (('DSubTree', 'javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.InputStream.close()'), (False, False, False, False, False, False, False), ('javax.xml.parsers.DocumentBuilderFactory.newInstance()', 'java.io.InputStream.read(byte[])', 'java.net.URL.openStream()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.io.InputStream.close()', 'DStop')): [10, -15.082093179225922]}

counter: 24
num skipped: 3
{'include': ['java.util.regex.Pattern.quote(java.lang.String)', '$NOT$java.io.File.exists()'], 'exclude': ['java.util.Properties.getProperty(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)'), (False, False), ('java.util.regex.Pattern.quote(java.lang.String)', '$NOT$java.io.File.exists()')): [2, -10.442278385162354], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)'), (False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()')): [9, -13.311141967773438], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()'), (False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()', 'DStop')): [5, -10.727524921298027], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()'), (False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()', 'DStop')): [17, -7.675490137189627], (('DSubTree', 'java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()', 'java.io.File.exists()'), (False, False, False, False, False, False), ('java.util.regex.Pattern.quote(java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', 'java.io.File.File(java.io.File,java.lang.String)', '$NOT$java.io.File.exists()', 'java.io.File.exists()', 'DStop')): [17, -11.20767790498212]}

counter: 25
num skipped: 3
{'include': ['javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setForeground(java.awt.Color)'], 'exclude': ['java.text.DecimalFormat.DecimalFormat(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False), ('javax.swing.JComponent.setOpaque(boolean)', 'javax.swing.JComponent.setForeground(java.awt.Color)')): [26, -1.143928449600935], (('DSubTree', 'javax.swing.JComponent.setForeground(java.awt.Color)'), (False, False), ('javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)')): [1, -0.8638446033000946], (('DSubTree', 'javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)'), (False, False, False), ('javax.swing.JComponent.setForeground(java.awt.Color)', 'javax.swing.JComponent.setOpaque(boolean)', 'DStop')): [23, -2.288584944966715]}

counter: 26
num skipped: 3
{'include': ['java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.toLowerCase()'], 'exclude': ['java.lang.Throwable.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()'), (False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.toLowerCase()')): [17, -1.6894459128379822], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.length()'), (False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.length()', 'java.lang.String.toLowerCase()')): [15, -5.006299085915089], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.length()', 'java.lang.String.toLowerCase()'), (False, False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.length()', 'java.lang.String.toLowerCase()', 'DStop')): [15, -5.055526167154312], (('DSubTree', 'java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.toLowerCase()'), (False, False, False), ('java.beans.PropertyChangeEvent.getPropertyName()', 'java.lang.String.toLowerCase()', 'java.lang.String.length()')): [3, -3.070741444826126]}

counter: 27
num skipped: 3
{'include': ['DBranch', 'java.io.DataOutputStream.writeByte(int)'], 'exclude': ['java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>.get(int)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.DataOutputStream.writeByte(int)', 'java.lang.System.exit(int)', 'java.io.DataOutputStream.writeByte(int)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.DataOutputStream.writeByte(int)', 'java.lang.System.exit(int)', 'DStop', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop', 'DStop')): [50, -4.4499945640563965]}

counter: 28
num skipped: 3
{'include': ['java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'], 'exclude': ['javax.swing.JComponent.getFontMetrics(java.awt.Font)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)'), (False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()')): [5, -0.3899402916431427], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()'), (False, False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'DStop')): [42, -0.5917714983224869], (('DSubTree', 'java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'java.awt.Dimension.Dimension(int,int)'), (False, False, False, False), ('java.awt.FontMetrics.stringWidth(java.lang.String)', 'java.awt.FontMetrics.getHeight()', 'java.awt.Dimension.Dimension(int,int)', 'DStop')): [3, -6.749896182867815]}
