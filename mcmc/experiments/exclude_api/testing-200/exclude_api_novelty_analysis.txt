data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: exclude_api
label: novelty
num test programs: 500


counter: 0
num skipped: 0
{'include': ['java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'], 'exclude': ['java.lang.Thread.setDaemon(boolean)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()'), (False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)')): [11, -26.88101040944457], (('DSubTree', 'java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)'), (False, False, False), ('java.util.concurrent.LinkedBlockingQueue<java.lang.Runnable>.LinkedBlockingQueue<Runnable>()', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DStop')): [39, -22.97125838464126]}

counter: 5
num skipped: 0
{'include': ['java.util.ArrayList.ArrayList()', 'java.util.Vector.iterator()'], 'exclude': ['java.util.List<java.lang.String>.size()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.ArrayList.ArrayList()'), (False, False), ('java.util.ArrayList.ArrayList()', 'java.util.Vector.iterator()')): [3, -17.90783452987671], (('DSubTree', 'java.util.ArrayList.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)'), (False, False, False), ('java.util.ArrayList.ArrayList()', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet(java.util.Collection)', 'java.util.Vector.iterator()')): [47, -16.7431583404541]}

counter: 10
num skipped: 0
{'include': ['DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)'], 'exclude': ['java.awt.Graphics2D.setPaint(java.awt.Paint)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.String.compareToIgnoreCase(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -7.374014377593994]}

counter: 15
num skipped: 0
{'include': ['java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(char[])'], 'exclude': ['java.util.Properties.getProperty(java.lang.String,java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False), ('java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(char[])')): [7, -10.866807460784912], (('DSubTree', 'java.io.Writer.write(char[])'), (False, False), ('java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)')): [5, -10.975598335266113], (('DSubTree', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)', 'DStop')): [2, -13.215327113866806], (('DSubTree', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)'), (False, False, False), ('java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)')): [1, -9.200737312436104], (('DSubTree', 'java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False), ('java.io.Writer.write(char[])', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()')): [11, -9.916631639003754], (('DSubTree', 'java.io.Writer.write(char[])', 'java.io.File.mkdir()', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False, False), ('java.io.Writer.write(char[])', 'java.io.File.mkdir()', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()')): [5, -11.72610068321228], (('DSubTree', 'java.io.Writer.write(char[])', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)'), (False, False, False, False, False), ('java.io.Writer.write(char[])', 'java.io.FileWriter.FileWriter(java.io.File)', 'java.io.BufferedWriter.BufferedWriter(java.io.Writer)', 'java.io.Writer.write(java.lang.String)', 'java.io.BufferedWriter.newLine()')): [19, -10.841209352016449]}

counter: 20
num skipped: 0
{'include': ['java.nio.ByteBuffer.getLong()', 'java.nio.ByteBuffer.getInt()'], 'exclude': ['java.nio.ByteBuffer.order(java.nio.ByteOrder)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.nio.ByteBuffer.getLong()'), (False, False), ('java.nio.ByteBuffer.getLong()', 'java.nio.ByteBuffer.getInt()')): [2, -24.410330295562744], (('DSubTree', 'java.nio.ByteBuffer.getInt()'), (False, False), ('java.nio.ByteBuffer.getInt()', 'java.nio.ByteBuffer.getLong()')): [9, -21.869430422782898], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.Boolean.valueOf(boolean)'), (False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.Boolean.valueOf(boolean)', 'java.nio.ByteBuffer.getLong()')): [3, -17.73600673675537], (('DSubTree', 'java.nio.ByteBuffer.getInt()', 'java.lang.Boolean.valueOf(boolean)', 'java.nio.ByteBuffer.getLong()'), (False, False, False, False), ('java.nio.ByteBuffer.getInt()', 'java.lang.Boolean.valueOf(boolean)', 'java.nio.ByteBuffer.getLong()', 'DStop')): [36, -21.41121295443736]}

counter: 30
num skipped: 1
{'include': ['java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch'], 'exclude': ['java.util.List<java.lang.Integer>.iterator()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [3, -15.358462810516357], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop', 'DStop')): [12, -12.672782589681447], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.util.regex.Matcher.find()', 'DBranch'), (False, False, False, True, True, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'DStop', 'DStop', 'DStop')): [19, -12.53376486664638], (('DSubTree', 'java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'java.util.regex.Matcher.find()', 'DBranch'), (False, False, False, True, True, False, False, False, False), ('java.util.regex.Pattern.compile(java.lang.String,int)', 'java.util.regex.Pattern.matcher(java.lang.CharSequence)', 'DBranch', 'java.util.regex.Matcher.find()', 'java.util.regex.Matcher.group(int)', 'java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)', 'DStop', 'DStop', 'DStop')): [16, -13.026542537845671]}

counter: 35
num skipped: 1
{'include': ['java.lang.String.substring(int,int)', 'java.lang.Boolean.parseBoolean(java.lang.String)'], 'exclude': ['java.lang.Throwable.toString()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.substring(int,int)'), (False, False), ('java.lang.String.substring(int,int)', 'java.lang.Boolean.parseBoolean(java.lang.String)')): [25, -10.109240531921387], (('DSubTree', 'java.lang.String.substring(int,int)', 'java.lang.Boolean.parseBoolean(java.lang.String)'), (False, False, False), ('java.lang.String.substring(int,int)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop')): [25, -7.849989256821573]}

counter: 40
num skipped: 1
{'include': ['java.lang.String.valueOf(double)', 'java.lang.String.valueOf(boolean)'], 'exclude': ['java.lang.Class.forName(java.lang.String)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.String.valueOf(double)'), (False, False), ('java.lang.String.valueOf(double)', 'java.lang.String.valueOf(boolean)')): [8, -9.773849487304688], (('DSubTree', 'java.lang.String.valueOf(boolean)'), (False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(double)')): [7, -11.430312156677246], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(double)'), (False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(char[])')): [3, -5.895471572875977], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(int)'), (False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(char[])')): [1, -10.40707927942276], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(int)'), (False, False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(char[])')): [1, -15.520760416984558], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(char[])'), (False, False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(int)')): [1, -14.435048192739487], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(char[])'), (False, False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'java.lang.String.valueOf(char[])', 'DStop')): [7, -7.598140433430672], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)'), (False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'DStop')): [5, -8.609061405062675], (('DSubTree', 'java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)'), (False, False, False, False, False), ('java.lang.String.valueOf(boolean)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(char[])', 'java.lang.String.valueOf(double)', 'DStop')): [17, -9.642328262329102]}

counter: 45
num skipped: 1
{'include': ['java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()'], 'exclude': ['$NOT$java.awt.geom.AffineTransform.equals(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.geom.AffineTransform.getTranslateX()'), (False, False), ('java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()')): [21, -33.92263889312744], (('DSubTree', 'java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()'), (False, False, False), ('java.awt.geom.AffineTransform.getTranslateX()', 'java.awt.geom.AffineTransform.getTranslateY()', 'DStop')): [29, -34.94483871385455]}

counter: 50
num skipped: 2
{'include': ['DLoop', 'java.lang.Number.intValue()'], 'exclude': ['$NOT$java.io.File.canRead()'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Number.intValue()', 'java.lang.String.equals(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Number.intValue()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -12.558633804321289]}

counter: 55
num skipped: 2
{'include': ['java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'], 'exclude': ['java.lang.Class<Tau_T>.isInstance(java.lang.Object)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'), (False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])')): [29, -6.233806252479553], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'DStop')): [3, -7.117450296878815], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)'), (False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])')): [13, -5.059240840375423], (('DSubTree', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])'), (False, False, False, False, False), ('java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'java.lang.Class<Tau_T>.getDeclaredMethod(java.lang.String,java.lang.Class[])', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)')): [5, -2.734712938312441]}

counter: 60
num skipped: 2
{'include': ['java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()'], 'exclude': ['$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)'], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()'), (False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Iterator.hasNext()')): [13, -12.538352712988853], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Collection.iterator()'), (False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Collection.iterator()', 'java.util.Iterator.hasNext()')): [36, -14.355563044548035], (('DSubTree', 'java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Collection.iterator()', 'java.util.Iterator.hasNext()'), (False, False, False, False), ('java.util.LinkedHashSet<Tau_E>.LinkedHashSet()', 'java.util.Collection.iterator()', 'java.util.Iterator.hasNext()', 'java.util.Iterator.hasNext()')): [1, -18.142316438257694]}
