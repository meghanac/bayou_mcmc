data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_cs
label: accuracy
num test programs: 54


counter: 0
num skipped: 0
{'include': ['DExcept', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'java.lang.Class<Tau_T>.getName()', 'DStop', 'DStop')): [32, -8.683778045568033], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.management.ManagementFactory.getPlatformMBeanServer()', 'DStop', 'DStop')): [18, -7.210760111105628]}

counter: 1
num skipped: 0
{'include': ['DExcept', 'java.lang.System.exit(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.System.exit(int)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.exit(int)', 'java.lang.Thread.Thread(java.lang.Runnable)', 'DStop', 'DStop')): [50, -3.265016564168036]}

counter: 4
num skipped: 2
{'include': ['DBranch', 'java.lang.String.valueOf(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'DStop', 'java.lang.String.valueOf(int)', 'DStop', 'DStop')): [32, -2.055864001333248], (('DSubTree', 'DBranch', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.lang.String.valueOf(int)', 'java.lang.String.valueOf(int)', 'DStop', 'DStop', 'DStop')): [18, -1.1930219446658157]}

counter: 5
num skipped: 2
{'include': ['DExcept', 'java.lang.Long.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Long.toString()', 'java.lang.Long.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Long.toString()', 'java.lang.Long.toString()', 'DStop', 'DStop')): [16, -2.544621503315284], (('DSubTree', 'DExcept', 'java.lang.System.nanoTime()', 'java.lang.Long.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.System.nanoTime()', 'java.lang.Long.toString()', 'DStop', 'DStop')): [34, -4.277495720773004]}

counter: 6
num skipped: 2
{'include': ['DExcept', 'java.awt.Graphics.drawLine(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.awt.Graphics.drawLine(int,int,int,int)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [50, -4.485724263126031]}

counter: 7
num skipped: 2
{'include': ['DExcept', 'java.lang.String.getBytes(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.String.getBytes(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.getBytes(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DStop', 'DStop')): [47, -9.766442909836769], (('DSubTree', 'DExcept', 'java.lang.String.getBytes(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.String.getBytes(java.lang.String)', 'java.lang.Float.parseFloat(java.lang.String)', 'DStop')): [3, -5.558356103720143]}

counter: 8
num skipped: 2
{'include': ['DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [6, -21.796162832644768], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.valueOf(int)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.valueOf(int)', 'DStop', 'DStop')): [7, -21.707951273274375], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [1, -21.732423932851816], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.deleteOnExit()', 'DExcept'), (False, True, True, False, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.deleteOnExit()', 'DStop', 'DStop')): [25, -22.340136281913146], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.deleteOnExit()', 'DStop')): [2, -20.2916789771989], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [7, -18.16678742878139], (('DSubTree', 'DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'DExcept'), (False, True, True, False, False, False, False), ('DExcept', 'java.util.Iterator<javax.imageio.ImageWriter>.next()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.io.File.File(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [2, -23.445185733551625]}

counter: 9
num skipped: 2
{'include': ['DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'DStop', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop', 'DStop')): [15, -11.721799484017538], (('DSubTree', 'DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop', 'DStop')): [9, -12.019248943193816], (('DSubTree', 'DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', 'DBranch'), (False, True, True, False, False), ('DBranch', 'java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)', '$NOT$java.util.Set<java.lang.String>.isEmpty()', 'java.lang.reflect.AccessibleObject.setAccessible(boolean)', 'DStop')): [26, -10.599365405272692]}

counter: 10
num skipped: 2
{'include': ['DLoop', 'java.lang.Integer.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Integer.valueOf(java.lang.String)', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop', 'DStop')): [32, -17.196591962128878], (('DSubTree', 'DLoop', 'java.lang.Integer.valueOf(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Integer.valueOf(java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [18, -10.327558716468047]}

counter: 12
num skipped: 3
{'include': ['DBranch', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.equalsIgnoreCase(java.lang.String)', 'DStop', 'DStop')): [50, -2.7382714599370956]}

counter: 13
num skipped: 3
{'include': ['DExcept', 'javax.swing.JLabel.JLabel(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'javax.swing.JLabel.JLabel(java.lang.String)', 'javax.swing.text.JTextComponent.getText()', 'DStop', 'DStop')): [24, -1.323659598827362], (('DSubTree', 'DExcept', 'java.lang.Throwable.getMessage()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.getMessage()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DStop', 'DStop')): [12, -1.2266719537492463], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DStop', 'DStop')): [4, -3.0902229613275267], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'javax.swing.JLabel.JLabel(java.lang.String)', 'DStop')): [10, -1.9820555355399847]}

counter: 16
num skipped: 5
{'include': ['DBranch', 'java.lang.Integer.Integer(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.intValue()', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.Integer(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Integer.Integer(int)', 'java.lang.Integer.intValue()', 'DStop', 'java.lang.Integer.Integer(int)', 'DStop', 'DStop')): [19, -8.576120109297335], (('DSubTree', 'DBranch', 'java.lang.Number.intValue()', 'java.lang.Number.intValue()', 'java.lang.Integer.Integer(int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.lang.Number.intValue()', 'DStop', 'java.lang.Integer.Integer(int)', 'DStop', 'DStop')): [31, -1.6601187346241204]}

counter: 17
num skipped: 5
{'include': ['DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.lang.String.toLowerCase(java.util.Locale)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Map<java.lang.String,java.lang.String>.isEmpty()', 'java.lang.String.toLowerCase(java.util.Locale)', 'DStop', 'DStop')): [50, -3.5886515370984853]}

counter: 18
num skipped: 5
{'include': ['DLoop', '$NOT$java.awt.event.InputEvent.isConsumed()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', '$NOT$java.awt.event.InputEvent.isConsumed()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', '$NOT$java.awt.event.InputEvent.isConsumed()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -4.612399101257324]}

counter: 19
num skipped: 5
{'include': ['DBranch', 'java.io.ByteArrayOutputStream.write(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.toByteArray()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.ByteArrayOutputStream.write(byte[],int,int)', 'java.io.ByteArrayOutputStream.close()', 'DStop', 'java.io.ByteArrayOutputStream.toByteArray()', 'DStop', 'DStop')): [50, -10.590986594557762]}

counter: 20
num skipped: 5
{'include': ['DLoop', 'java.lang.Math.abs(double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Math.abs(double)', 'java.lang.Thread.sleep(long)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Math.abs(double)', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -0.20117172466416378]}

counter: 21
num skipped: 5
{'include': ['DExcept', 'java.util.Map<java.lang.String,java.lang.String>.entrySet()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Map<java.lang.String,java.lang.String>.entrySet()', 'java.lang.Integer.parseInt(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Map<java.lang.String,java.lang.String>.entrySet()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -7.690757006406784]}

counter: 22
num skipped: 5
{'include': ['DExcept', 'java.awt.Toolkit.getDefaultToolkit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Toolkit.getDefaultToolkit()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.awt.Toolkit.getDefaultToolkit()', 'java.awt.Toolkit.getDefaultToolkit()', 'DStop', 'DStop')): [50, -4.156178347933746]}

counter: 23
num skipped: 5
{'include': ['DLoop', 'java.sql.Connection.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.sql.Connection.close()', 'java.lang.Throwable.getMessage()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.sql.Connection.close()', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -11.080028250944451]}

counter: 25
num skipped: 6
{'include': ['DBranch', 'java.util.Collections.unmodifiableSet(java.util.Set)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'java.lang.Double.intValue()', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'java.lang.Double.Double(double)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collections.unmodifiableSet(java.util.Set)', 'java.lang.Double.intValue()', 'DStop', 'java.lang.Double.Double(double)', 'DStop', 'DStop')): [50, -3.074452514760196]}

counter: 26
num skipped: 6
{'include': ['DExcept', 'java.lang.StringBuffer.append(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [7, -7.018371015787125], (('DSubTree', 'DExcept', 'java.lang.StringBuffer.append(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.StringBuffer.append(java.lang.String)', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [1, -5.625943862833083], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop')): [2, -5.245756011630874], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.StringBuffer.append(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.StringBuffer.append(java.lang.String)', 'DStop', 'DStop')): [40, -3.4086757795885205]}

counter: 28
num skipped: 7
{'include': ['DLoop', 'java.util.Properties.getProperty(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Properties.getProperty(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Properties.getProperty(java.lang.String)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -7.537340700975619]}

counter: 29
num skipped: 7
{'include': ['DBranch', 'java.awt.event.MouseEvent.getX()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.event.MouseEvent.getX()', 'java.lang.System.exit(int)', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getY()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.event.MouseEvent.getX()', 'java.lang.System.exit(int)', 'DStop', 'java.awt.event.MouseEvent.getY()', 'DStop', 'DStop')): [19, -12.042968843132257], (('DSubTree', 'DBranch', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getY()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.awt.event.MouseEvent.getX()', 'DStop', 'java.awt.event.MouseEvent.getY()', 'DStop', 'DStop')): [29, -6.714429792977171], (('DSubTree', 'DBranch', 'java.awt.event.MouseEvent.getX()', 'java.awt.event.MouseEvent.getX()', 'DBranch'), (False, True, True, False, False), ('DBranch', 'java.awt.event.MouseEvent.getX()', 'DStop', 'java.awt.event.MouseEvent.getY()', 'DStop')): [2, -9.333275580371264]}

counter: 31
num skipped: 8
{'include': ['DBranch', 'javax.swing.JFrame.JFrame()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.JFrame.JFrame()', 'java.lang.System.exit(int)', 'javax.swing.JFrame.JFrame()', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.JFrame.JFrame()', 'java.lang.System.exit(int)', 'DStop', 'javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)', 'DStop', 'DStop')): [50, -2.0857667326927185]}

counter: 32
num skipped: 8
{'include': ['DExcept', 'java.nio.ByteBuffer.allocateDirect(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.String.length()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.String.length()', 'DStop', 'DStop')): [1, -12.847316977924493], (('DSubTree', 'DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.nio.ByteBuffer.allocateDirect(int)', 'java.lang.String.length()', 'DStop')): [48, -10.189557502279058], (('DSubTree', 'DExcept', 'java.lang.String.length()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.String.length()', 'java.nio.ByteBuffer.allocateDirect(int)', 'DStop')): [1, -10.392407165840268]}

counter: 36
num skipped: 11
{'include': ['DLoop', 'java.math.BigInteger.intValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.math.BigInteger.intValue()', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.math.BigInteger.intValue()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [50, -3.942235565278679]}

counter: 37
num skipped: 11
{'include': ['java.io.DataInput.readUTF()', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataInput.readUTF()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.io.DataInput.readUTF()', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -6.205681681632996]}

counter: 38
num skipped: 11
{'include': ['DExcept', 'java.math.BigInteger.valueOf(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.valueOf(long)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.math.BigInteger.valueOf(long)', 'java.math.BigInteger.valueOf(long)', 'DStop', 'DStop')): [50, -0.8872705884277821]}

counter: 40
num skipped: 12
{'include': ['java.awt.Graphics2D.setComposite(java.awt.Composite)', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.awt.Graphics2D.setComposite(java.awt.Composite)', 'DBranch', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Component.postEvent(java.awt.Event)', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.io.OutputStream.close()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.awt.Graphics2D.setComposite(java.awt.Composite)', 'DBranch', 'java.awt.Graphics2D.setPaint(java.awt.Paint)', 'java.awt.Component.postEvent(java.awt.Event)', 'DStop', 'java.io.OutputStream.close()', 'DStop', 'DStop')): [50, -5.535447478294373]}

counter: 42
num skipped: 13
{'include': ['DLoop', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'javax.xml.bind.JAXBContext.newInstance(java.lang.String)', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -13.253121383488178]}

counter: 43
num skipped: 13
{'include': ['DExcept', 'java.util.ArrayList.add(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.ArrayList.add(java.lang.Object)', 'java.io.StringReader.StringReader(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ArrayList.add(java.lang.Object)', 'java.io.StringReader.StringReader(java.lang.String)', 'DStop', 'DStop')): [50, -3.99984666146338]}

counter: 44
num skipped: 13
{'include': ['DLoop', 'java.io.OutputStreamWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.io.OutputStreamWriter.flush()', 'java.lang.String.equals(java.lang.Object)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.io.OutputStreamWriter.flush()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -12.769516952335835]}

counter: 46
num skipped: 14
{'include': ['DLoop', 'java.io.InputStream.read()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.io.InputStream.read()', 'java.io.InputStream.read()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.io.InputStream.read()', 'java.io.InputStream.read()', 'DStop', 'DStop')): [50, -0.04522673739120364]}

counter: 47
num skipped: 14
{'include': ['DBranch', 'java.io.DataOutputStream.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DStop', 'java.io.DataOutputStream.writeByte(int)', 'DStop', 'DStop')): [31, -8.192807912826538], (('DSubTree', 'DBranch', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.io.DataOutputStream.writeInt(int)', 'java.io.DataOutputStream.writeByte(int)', 'java.io.DataOutputStream.writeByte(int)', 'DStop', 'DStop')): [19, -6.8439637844858225]}

counter: 49
num skipped: 15
{'include': ['DLoop', 'java.util.regex.Matcher.group(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.regex.Matcher.group(int)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [50, -7.117975828361523]}

counter: 50
num skipped: 15
{'include': ['DBranch', 'java.io.DataOutput.writeInt(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.DataOutput.writeInt(int)', 'java.util.List<E>.add(Tau_E)', 'java.io.DataOutput.writeInt(int)', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.DataOutput.writeInt(int)', 'java.util.List<E>.add(Tau_E)', 'DStop', 'java.util.ArrayList<Tau_E>.ArrayList()', 'DStop', 'DStop')): [50, -7.970845341644235]}

counter: 53
num skipped: 17
{'include': ['DBranch', 'java.lang.StringBuffer.setLength(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.toString()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.StringBuffer.setLength(int)', 'java.lang.StringBuffer.setLength(int)', 'DStop', 'java.lang.StringBuffer.toString()', 'DStop', 'DStop')): [50, -2.3768689036369324]}


final metrics: {'jaccard_test_set': 0.0, 'has_more_apis': 0.5925925925925921, 'relevant_additions': 0.5895061728395058, 'meets_constraints': 0.6851851851851846, 'in_set': 0.0, 'test_set_relevant_additions': 0.5895061728395058}
