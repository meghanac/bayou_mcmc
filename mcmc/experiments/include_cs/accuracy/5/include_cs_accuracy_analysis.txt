data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/seen_1k_min_2_small_config
num iterations: 50.0
category: include_cs
label: accuracy
num test programs: 50


counter: 1
num skipped: 1
{'include': ['DExcept', 'java.nio.ByteBuffer.allocate(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)', 'DStop', 'DStop')): [5, -4.313602447509766], (('DSubTree', 'DExcept', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'DExcept'), (False, True, True, False, False, False), ('DExcept', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.allocate(int)', 'java.nio.ByteBuffer.array()', 'DStop', 'DStop')): [7, -3.8672981514935145], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.nio.ByteBuffer.allocate(int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.nio.ByteBuffer.allocate(int)', 'DStop', 'DStop')): [38, -1.683428542134834]}

counter: 3
num skipped: 2
{'include': ['DExcept', 'java.io.IOException.IOException(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.IOException.IOException(java.lang.String)', '$NOT$java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.IOException.IOException(java.lang.String)', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -4.230285882949829]}

counter: 6
num skipped: 4
{'include': ['DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.log(double)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Observable.notifyObservers(java.lang.Object)', 'java.lang.Math.log(double)', 'DStop', 'DStop')): [50, -10.56214553117752]}

counter: 7
num skipped: 4
{'include': ['DExcept', 'java.lang.String.getBytes()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.String.getBytes()', 'java.lang.String.getBytes()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.String.getBytes()', 'java.lang.String.getBytes()', 'DStop', 'DStop')): [27, -6.120055675506592], (('DSubTree', 'DExcept', 'java.lang.String.getBytes()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.String.getBytes()', 'java.lang.String.getBytes()', 'DStop')): [23, -3.7431350774422754]}

counter: 8
num skipped: 4
{'include': ['DExcept', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.lang.Integer.Integer(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.HashMap.put(java.lang.Object,java.lang.Object)', 'java.lang.Integer.Integer(java.lang.String)', 'DStop', 'DStop')): [50, -5.496437460184097]}

counter: 9
num skipped: 4
{'include': ['java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.length()', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DBranch', 'java.lang.String.length()', 'java.lang.String.length()', 'DStop', 'DStop', 'DStop')): [19, -15.929098940221593], (('DSubTree', 'java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop', 'DStop')): [31, -5.132404099694668]}

counter: 10
num skipped: 4
{'include': ['DExcept', 'java.lang.StringBuilder.length()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.toString()', 'DStop', 'DStop')): [19, -7.144606113338341], (('DSubTree', 'DExcept', 'java.lang.StringBuilder.length()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.StringBuilder.length()', 'java.lang.StringBuilder.toString()', 'DStop')): [31, -4.5283372082412825]}

counter: 11
num skipped: 4
{'include': ['DBranch', 'java.util.UUID.fromString(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.UUID.fromString(java.lang.String)', 'java.util.UUID.fromString(java.lang.String)', 'java.util.UUID.fromString(java.lang.String)', 'java.util.Date.Date()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.UUID.fromString(java.lang.String)', 'java.util.UUID.fromString(java.lang.String)', 'DStop', 'java.util.Date.Date()', 'DStop', 'DStop')): [50, -5.26294935005717]}

counter: 12
num skipped: 4
{'include': ['DExcept', 'java.lang.Boolean.valueOf(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Double.valueOf(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Boolean.valueOf(java.lang.String)', 'java.lang.Double.valueOf(java.lang.String)', 'DStop', 'DStop')): [7, -9.124145184177905], (('DSubTree', 'DExcept', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'DStop', 'DStop')): [40, -9.846576854586601], (('DSubTree', 'DExcept', 'java.lang.Double.valueOf(java.lang.String)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Double.valueOf(java.lang.String)', 'java.lang.Boolean.valueOf(java.lang.String)', 'DStop')): [3, -8.712500216905028]}

counter: 13
num skipped: 4
{'include': ['DExcept', 'java.util.List<E>.add(Tau_E)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.List<E>.add(Tau_E)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.List<E>.add(Tau_E)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop', 'DStop')): [5, -4.244534652680159], (('DSubTree', 'DExcept', 'java.util.List<E>.add(Tau_E)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.List<E>.add(Tau_E)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'DStop')): [35, -10.362637014623033], (('DSubTree', 'DExcept', 'java.util.List<E>.add(Tau_E)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.List<E>.add(Tau_E)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Long.toString()')): [8, -17.149662971496582], (('DSubTree', 'DExcept', 'java.util.List<E>.add(Tau_E)', 'DExcept', 'java.lang.Long.toString()'), (False, True, True, False, False), ('DExcept', 'java.util.List<E>.add(Tau_E)', 'java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)', 'java.lang.Long.toString()', 'DStop')): [2, -14.254709404427558]}

counter: 14
num skipped: 4
{'include': ['DLoop', 'java.lang.reflect.Field.getName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [15, -9.373260736465454], (('DSubTree', 'DLoop', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DLoop', 'java.util.List<java.lang.String>.toArray(T[])'), (False, True, True, False, False, False), ('DLoop', 'java.lang.reflect.Field.getName()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [20, -8.60699310398195], (('DSubTree', 'DLoop', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getType()', 'DLoop', 'java.util.List<java.lang.String>.toArray(T[])'), (False, True, True, False, False, False), ('DLoop', 'java.lang.reflect.Field.getName()', 'java.lang.reflect.Field.getType()', 'DStop', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [11, -8.692123516637366], (('DSubTree', 'DLoop', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getName()', 'DLoop', 'java.util.List<java.lang.String>.toArray(T[])'), (False, True, True, False, False, False), ('DLoop', 'java.lang.reflect.Field.getAnnotation(java.lang.Class)', 'java.lang.reflect.Field.getName()', 'DStop', 'java.util.List<java.lang.String>.toArray(T[])', 'DStop')): [4, -14.240762707253452]}

counter: 15
num skipped: 4
{'include': ['DExcept', 'java.util.concurrent.Semaphore.Semaphore(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.Date.Date()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.concurrent.Semaphore.Semaphore(int)', 'java.util.Date.Date()', 'DStop', 'DStop')): [50, -16.5708887912333]}

counter: 16
num skipped: 4
{'include': ['DExcept', 'java.sql.ResultSet.next()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.sql.ResultSet.next()', 'java.sql.ResultSet.getString(java.lang.String)', 'DStop', 'DStop')): [50, -8.214148900238797]}

counter: 17
num skipped: 4
{'include': ['DBranch', 'javax.swing.text.Element.getAttributes()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.text.Element.getAttributes()', 'javax.swing.text.Element.getAttributes()', 'javax.swing.text.Element.getAttributes()', 'java.lang.String.charAt(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.text.Element.getAttributes()', 'javax.swing.text.Element.getAttributes()', 'DStop', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [50, -7.059428507229313]}

counter: 18
num skipped: 4
{'include': ['DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.isDirectory()', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.getParentFile()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<java.io.File>.add(java.io.File)', 'java.io.File.isDirectory()', 'DStop', 'java.io.File.getParentFile()', 'DStop', 'DStop')): [50, -3.548248440027237]}

counter: 19
num skipped: 4
{'include': ['DBranch', 'javax.naming.Context.lookup(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.naming.Context.lookup(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'javax.naming.Context.lookup(java.lang.String)', 'java.io.InputStream.read()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.naming.Context.lookup(java.lang.String)', 'java.lang.Throwable.initCause(java.lang.Throwable)', 'DStop', 'java.io.InputStream.read()', 'DStop', 'DStop')): [50, -8.829097509384155]}

counter: 20
num skipped: 4
{'include': ['DBranch', 'java.io.InputStream.read(byte[],int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.read(byte[],int,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'java.io.InputStream.read(byte[],int,int)', 'java.lang.Math.min(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.read(byte[],int,int)', 'java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)', 'DStop', 'java.lang.Math.min(int,int)', 'DStop', 'DStop')): [50, -1.229018546640873]}

counter: 21
num skipped: 4
{'include': ['DExcept', 'java.nio.Buffer.limit()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.Buffer.limit()', 'java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.Buffer.limit()', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -5.078985685417138]}

counter: 22
num skipped: 4
{'include': ['DBranch', 'java.util.Date.Date()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Date.Date()', 'java.util.ArrayList<java.lang.String>.size()', 'java.util.Date.Date()', 'java.util.ArrayList<java.lang.String>.size()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Date.Date()', 'java.util.ArrayList<java.lang.String>.size()', 'DStop', 'java.util.ArrayList<java.lang.String>.size()', 'DStop', 'DStop')): [50, -17.63453462140751]}

counter: 23
num skipped: 4
{'include': ['DBranch', 'javax.swing.JTextField.JTextField()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.JTextField.JTextField()', 'java.lang.String.indexOf(java.lang.String)', 'javax.swing.JTextField.JTextField()', 'java.lang.String.length()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.JTextField.JTextField()', 'java.lang.String.indexOf(java.lang.String)', 'DStop', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -23.8762128536182]}

counter: 24
num skipped: 4
{'include': ['DBranch', 'javax.swing.UIManager.getSystemLookAndFeelClassName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.UIManager.getSystemLookAndFeelClassName()', 'java.lang.Class<Tau_T>.getSimpleName()', 'DStop', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop', 'DStop')): [50, -9.875412192661315]}

counter: 25
num skipped: 4
{'include': ['DBranch', 'javax.swing.table.TableColumnModel.getColumnCount()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.swing.table.TableColumnModel.getColumnCount()', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop', 'javax.swing.table.TableColumnModel.getColumn(int)', 'DStop', 'DStop')): [50, -5.738429303281009]}

counter: 27
num skipped: 5
{'include': ['DExcept', 'java.lang.Long.toString()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Long.toString()', 'java.lang.Long.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Long.toString()', 'java.lang.Long.toString()', 'DStop', 'DStop')): [6, -2.6269856582948705], (('DSubTree', 'DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Long.toString()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Class<Tau_T>.getName()', 'java.lang.Long.toString()', 'DStop', 'DStop')): [44, -2.67522192616525]}

counter: 28
num skipped: 5
{'include': ['DExcept', 'java.util.zip.ZipEntry.getName()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.zip.ZipEntry.getName()', 'DExcept'), (False, True, True, False), ('DExcept', 'java.util.zip.ZipEntry.getName()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DStop')): [23, -6.782826476264745], (('DSubTree', 'DExcept', 'java.util.zip.ZipEntry.getName()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.zip.ZipEntry.getName()', 'java.io.ObjectOutputStream.writeObject(java.lang.Object)', 'DStop', 'DStop')): [27, -6.485149930274929]}

counter: 29
num skipped: 5
{'include': ['DBranch', 'java.io.InputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.close()', 'java.io.FileOutputStream.close()', 'java.io.InputStream.close()', 'java.io.File.getPath()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.close()', 'java.io.FileOutputStream.close()', 'DStop', 'java.io.File.getPath()', 'DStop', 'DStop')): [21, -13.707522732205689], (('DSubTree', 'DBranch', 'java.io.InputStream.close()', 'java.io.FileOutputStream.close()', 'java.io.InputStream.close()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.io.InputStream.close()', 'java.io.FileOutputStream.close()', 'DStop', 'DStop', 'DStop')): [29, -8.4950349428982]}

counter: 30
num skipped: 5
{'include': ['DBranch', 'java.util.Collection<V>.addAll(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Collection<V>.addAll(java.util.Collection)', 'java.lang.Throwable.getMessage()', 'java.util.Collection<V>.addAll(java.util.Collection)', 'java.lang.Thread.sleep(long)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Collection<V>.addAll(java.util.Collection)', 'java.lang.Throwable.getMessage()', 'DStop', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -6.755751378834248]}

counter: 32
num skipped: 6
{'include': ['DExcept', 'java.net.URL.URL(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.net.URL.URL(java.lang.String)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.net.URL.URL(java.lang.String)', 'java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)', 'DStop', 'DStop')): [12, -9.103483122940816], (('DSubTree', 'DExcept', 'java.net.URL.URL(java.lang.String)', 'java.io.InputStreamReader.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.net.URL.URL(java.lang.String)', 'java.io.InputStreamReader.close()', 'DStop', 'DStop')): [38, -6.738308747604606]}

counter: 34
num skipped: 7
{'include': ['java.util.Iterator<java.lang.String>.next()', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'DStop', 'java.lang.Integer.toString(int)', 'DStop', 'DStop')): [7, -7.331173211336136], (('DSubTree', 'java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'DBranch'), (False, False, True, True, False, False, False), ('java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.toString(int)', 'DStop', 'DStop')): [26, -5.9583602380007505], (('DSubTree', 'java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.valueOf(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, True, True, False, False, False), ('java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.Integer.valueOf(int)', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'DStop', 'DStop', 'DStop')): [16, -8.30837817016436], (('DSubTree', 'java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.String.trim()', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'java.lang.String.length()', 'DBranch'), (False, False, True, True, True, True, False, False, False), ('java.util.Iterator<java.lang.String>.next()', 'DBranch', 'java.lang.String.length()', 'java.lang.Integer.toString(int)', 'java.lang.String.trim()', 'java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.add(java.util.Map<java.lang.String,java.lang.Object>)', 'DStop', 'DStop', 'DStop')): [1, -7.697749513088638]}

counter: 35
num skipped: 7
{'include': ['DBranch', 'java.io.DataInputStream.readInt()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.DataInputStream.readInt()', 'java.awt.geom.RectangularShape.getHeight()', 'java.io.DataInputStream.readInt()', 'java.lang.Double.doubleValue()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.DataInputStream.readInt()', 'java.awt.geom.RectangularShape.getHeight()', 'DStop', 'java.lang.Double.doubleValue()', 'DStop', 'DStop')): [50, -6.491640340536833]}

counter: 36
num skipped: 7
{'include': ['DLoop', 'java.awt.Rectangle.Rectangle(int,int,int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.io.File.File(java.lang.String)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.awt.Rectangle.Rectangle(int,int,int,int)', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -10.69124698638916]}

counter: 37
num skipped: 7
{'include': ['DBranch', 'java.io.FileInputStream.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.FileInputStream.close()', 'java.lang.String.trim()', 'java.io.FileInputStream.close()', 'java.lang.String.equals(java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.FileInputStream.close()', 'java.lang.String.trim()', 'DStop', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -7.44686058931984]}

counter: 38
num skipped: 7
{'include': ['DBranch', 'java.lang.Thread.sleep(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Thread.sleep(long)', 'java.lang.String.equals(java.lang.Object)', 'java.lang.Thread.sleep(long)', 'java.lang.System.exit(int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Thread.sleep(long)', 'java.lang.String.equals(java.lang.Object)', 'DStop', 'java.lang.System.exit(int)', 'DStop', 'DStop')): [50, -3.2397415041923523]}

counter: 39
num skipped: 7
{'include': ['DLoop', 'java.lang.Character.toString(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.lang.Character.toString(char)', 'java.lang.String.charAt(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.lang.Character.toString(char)', 'java.lang.String.charAt(int)', 'DStop', 'DStop')): [50, -8.109980019333307]}

counter: 40
num skipped: 7
{'include': ['DBranch', 'java.util.concurrent.atomic.AtomicInteger.get()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.concurrent.atomic.AtomicInteger.get()', 'java.util.Vector.addElement(java.lang.Object)', 'java.util.concurrent.atomic.AtomicInteger.get()', 'java.lang.Math.max(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.concurrent.atomic.AtomicInteger.get()', 'java.util.Vector.addElement(java.lang.Object)', 'DStop', 'java.lang.Math.max(int,int)', 'DStop', 'DStop')): [50, -24.834093907084025]}

counter: 41
num skipped: 7
{'include': ['DLoop', 'java.util.Collections.enumeration(java.util.Collection)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.List<>.get(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'java.util.List<>.get(int)', 'DStop', 'DStop')): [21, -5.087459651229437], (('DSubTree', 'DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Integer.toString()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Integer.toString()', 'DStop', 'DStop')): [27, -6.564476887462661], (('DSubTree', 'DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'DLoop'), (False, True, True, False), ('DLoop', 'java.util.Collections.enumeration(java.util.Collection)', 'java.lang.Integer.toString()', 'DStop')): [2, -6.806202602572739]}

counter: 43
num skipped: 8
{'include': ['DBranch', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.Arrays.asList(T[])', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.lang.String.contains(java.lang.CharSequence)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.LinkedList<java.lang.String>.LinkedList<String>()', 'java.util.Arrays.asList(T[])', 'DStop', 'java.lang.String.contains(java.lang.CharSequence)', 'DStop', 'DStop')): [50, -6.811854526400566]}

counter: 44
num skipped: 8
{'include': ['java.lang.StringBuilder.append(int)', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.lang.StringBuilder.append(int)', 'DBranch', 'java.lang.String.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.length()', 'java.lang.StringBuilder.toString()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.lang.StringBuilder.append(int)', 'DBranch', 'java.lang.String.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop', 'java.lang.StringBuilder.toString()', 'DStop', 'DStop')): [29, -15.442406244575977], (('DSubTree', 'java.lang.StringBuilder.append(int)', 'DBranch', 'java.lang.String.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'java.lang.String.length()', 'java.lang.String.substring(int,int)', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.lang.StringBuilder.append(int)', 'DBranch', 'java.lang.String.length()', 'java.lang.StringBuilder.append(java.lang.String)', 'DStop', 'java.lang.String.substring(int,int)', 'DStop', 'DStop')): [21, -9.578184270299971]}

counter: 45
num skipped: 8
{'include': ['DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.io.FileOutputStream.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.io.FileOutputStream.close()', 'DStop', 'DStop')): [16, -2.6644112672656775], (('DSubTree', 'DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'java.nio.channels.spi.AbstractInterruptibleChannel.close()', 'DStop', 'DStop')): [34, -3.2462057391276176]}

counter: 46
num skipped: 8
{'include': ['DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.io.BufferedWriter.newLine()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'java.io.BufferedWriter.newLine()', 'DStop', 'DStop')): [1, -16.899834490588546], (('DSubTree', 'DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop', 'DStop')): [6, -6.3714171264764445], (('DSubTree', 'DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.reflect.Method.getAnnotation(java.lang.Class)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop')): [43, -1.0268183881416917]}
