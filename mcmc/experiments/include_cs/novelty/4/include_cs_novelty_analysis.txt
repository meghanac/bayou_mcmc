data dir name: new_all_data_1k_vocab_no_duplicates
model dir path: ../trainer_vae/save/final_novel_1k_min_2_small_config
num iterations: 50.0
category: include_cs
label: novelty
num test programs: 50


counter: 1
num skipped: 1
{'include': ['DBranch', 'java.lang.Double.compare(double,double)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.lang.Double.compare(double,double)', 'java.lang.Math.max(int,int)', 'java.lang.Double.compare(double,double)', 'java.lang.Math.max(int,int)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.lang.Double.compare(double,double)', 'java.lang.Math.max(int,int)', 'DStop', 'java.lang.Math.max(int,int)', 'DStop', 'DStop')): [50, -12.370018243789673]}

counter: 3
num skipped: 2
{'include': ['DBranch', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.StringBuilder.append(char)', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.Integer.parseInt(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.StringBuilder.append(char)', 'DStop', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [28, -22.316809125244617], (('DSubTree', 'DBranch', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.StringBuilder.append(char)', 'java.lang.String.length()', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.Integer.parseInt(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False, False), ('DBranch', 'javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)', 'java.lang.StringBuilder.append(char)', 'java.lang.String.length()', 'DStop', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'DStop')): [22, -26.177634904626757]}

counter: 4
num skipped: 2
{'include': ['DExcept', 'java.lang.Character.toString(char)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Character.toString(char)', 'java.lang.Throwable.printStackTrace()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Character.toString(char)', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [16, -19.132036209106445], (('DSubTree', 'DExcept', 'java.lang.Character.toString(char)', 'java.lang.Integer.intValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Character.toString(char)', 'java.lang.Integer.intValue()', 'DStop', 'DStop')): [2, -15.502552328340244], (('DSubTree', 'DExcept', 'java.lang.Character.toString(char)', 'java.lang.System.currentTimeMillis()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Character.toString(char)', 'java.lang.System.currentTimeMillis()', 'DStop', 'DStop')): [4, -16.936444205523003], (('DSubTree', 'DExcept', 'java.lang.Character.toString(char)', 'DExcept'), (False, True, True, False), ('DExcept', 'java.lang.Character.toString(char)', 'java.lang.System.currentTimeMillis()', 'DStop')): [28, -13.05465443013236]}

counter: 5
num skipped: 2
{'include': ['DLoop', 'java.awt.Point.Point(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DStop', 'DStop')): [7, -11.69625997543335], (('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DStop', 'java.lang.String.replace(char,char)')): [8, -13.474012453109026], (('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DLoop', 'java.lang.String.replace(char,char)'), (False, True, True, False, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.Integer(int)', 'DStop', 'java.lang.String.replace(char,char)', 'DStop')): [11, -13.502708613872528], (('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop', 'java.lang.String.replace(char,char)'), (False, True, True, False, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'java.lang.String.replace(char,char)', 'DStop')): [1, -17.73592585325241], (('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DLoop', 'java.lang.String.replace(char,char)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, True, True, False, False, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'java.lang.String.replace(char,char)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [19, -15.286123178899288], (('DSubTree', 'DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.String.startsWith(java.lang.String)', 'DLoop', 'java.lang.String.replace(char,char)', 'java.lang.Integer.parseInt(java.lang.String)'), (False, True, True, False, False, False, False), ('DLoop', 'java.awt.Point.Point(int,int)', 'java.lang.String.startsWith(java.lang.String)', 'DStop', 'java.lang.String.replace(char,char)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop')): [4, -15.00541764497757]}

counter: 6
num skipped: 2
{'include': ['DExcept', 'java.lang.StringBuilder.substring(int,int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.StringBuilder.substring(int,int)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.StringBuilder.substring(int,int)', 'javax.swing.UIManager.setLookAndFeel(java.lang.String)', 'DStop', 'DStop')): [50, -14.665559649467468]}

counter: 9
num skipped: 4
{'include': ['DLoop', 'java.util.Calendar.getTime()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Calendar.getTime()', 'java.lang.Throwable.printStackTrace()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Calendar.getTime()', 'java.lang.Throwable.printStackTrace()', 'DStop', 'DStop')): [50, -6.957917809486389]}

counter: 11
num skipped: 5
{'include': ['DExcept', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.lang.Boolean.booleanValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.lang.Boolean.booleanValue()', 'DStop', 'DStop')): [30, -12.845923475921154], (('DSubTree', 'DExcept', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [20, -15.128633213505964]}

counter: 13
num skipped: 6
{'include': ['java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DStop', 'java.io.File.getName()', 'DStop', 'DStop')): [11, -13.030065298080444], (('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DBranch'), (False, False, False, True, True, False, False, False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DStop', 'java.io.File.getName()', 'DStop', 'DStop')): [4, -15.501898801885545], (('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DBranch'), (False, False, False, False, True, True, False, False, False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DStop', 'java.io.File.getName()', 'DStop', 'DStop')): [22, -16.1483277376974], (('DSubTree', 'java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'java.io.File.isDirectory()', '$NOT$java.io.File.exists()', 'DBranch'), (False, False, False, False, True, True, False, False, False, False), ('java.util.HashMap<java.lang.String,java.io.Serializable>.HashMap<String,Serializable>()', '$NOT$java.io.File.exists()', '$NOT$java.io.File.exists()', 'DBranch', 'java.io.File.isDirectory()', 'java.io.File.getName()', 'DStop', '$NOT$java.io.File.exists()', 'DStop', 'DStop')): [13, -17.896809846395627]}

counter: 14
num skipped: 6
{'include': ['DExcept', 'java.lang.Float.floatValue()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Float.floatValue()', 'java.lang.Integer.intValue()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Float.floatValue()', 'java.lang.Integer.intValue()', 'DStop', 'DStop')): [50, -8.179110278346343]}

counter: 16
num skipped: 7
{'include': ['DBranch', 'java.util.TimeZone.getDefault()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.TimeZone.getDefault()', 'java.sql.PreparedStatement.executeUpdate()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'java.sql.PreparedStatement.executeUpdate()', 'DStop', 'DStop')): [50, -9.729675248265266]}

counter: 18
num skipped: 8
{'include': ['DBranch', 'java.io.InputStream.available()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStream.available()', 'java.lang.System.currentTimeMillis()', 'java.io.InputStream.available()', 'java.io.InputStream.read(byte[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStream.available()', 'java.lang.System.currentTimeMillis()', 'DStop', 'java.io.InputStream.read(byte[])', 'DStop', 'DStop')): [50, -6.47655177116394]}

counter: 19
num skipped: 8
{'include': ['DBranch', 'java.math.BigDecimal.BigDecimal(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.Long.Long(java.lang.String)', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.System.currentTimeMillis()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.Long.Long(java.lang.String)', 'DStop', 'java.lang.System.currentTimeMillis()', 'DStop', 'DStop')): [45, -13.705633774399757], (('DSubTree', 'DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.Long.Long(java.lang.String)', 'java.math.BigDecimal.BigDecimal(int)', 'java.util.Map.put(java.lang.Object,java.lang.Object)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.Long.Long(java.lang.String)', 'DStop', 'java.util.Map.put(java.lang.Object,java.lang.Object)', 'DStop', 'DStop')): [5, -18.024473855271935]}

counter: 21
num skipped: 9
{'include': ['DExcept', 'java.util.Calendar.setTimeInMillis(long)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.Calendar.setTimeInMillis(long)', 'java.io.File.toPath()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.Calendar.setTimeInMillis(long)', 'java.io.File.toPath()', 'DStop', 'DStop')): [50, -18.106929302215576]}

counter: 22
num skipped: 9
{'include': ['DBranch', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop')): [1, -17.081161975860596], (('DSubTree', 'DBranch', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)', 'java.lang.String.format(java.lang.String,java.lang.Object[])', 'DStop', 'DStop', 'DStop')): [49, -15.065112631767988]}

counter: 24
num skipped: 10
{'include': ['DLoop', 'java.util.UUID.fromString(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.UUID.fromString(java.lang.String)', 'java.lang.String.length()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.UUID.fromString(java.lang.String)', 'java.lang.String.length()', 'DStop', 'DStop')): [50, -10.917139738798141]}

counter: 25
num skipped: 10
{'include': ['DBranch', 'java.math.BigDecimal.BigDecimal(int)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.String.valueOf(char[])', 'java.math.BigDecimal.BigDecimal(int)', 'java.util.Calendar.getInstance()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.math.BigDecimal.BigDecimal(int)', 'java.lang.String.valueOf(char[])', 'DStop', 'java.util.Calendar.getInstance()', 'DStop', 'DStop')): [50, -9.025029927492142]}

counter: 26
num skipped: 10
{'include': ['DBranch', 'java.awt.image.BufferedImage.createGraphics()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.awt.image.BufferedImage.createGraphics()', 'java.lang.Thread.currentThread()', 'java.awt.image.BufferedImage.createGraphics()', 'java.awt.Graphics.dispose()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.awt.image.BufferedImage.createGraphics()', 'java.lang.Thread.currentThread()', 'DStop', 'java.awt.Graphics.dispose()', 'DStop', 'DStop')): [50, -12.076001536333933]}

counter: 27
num skipped: 10
{'include': ['DExcept', 'java.io.PrintWriter.flush()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.io.PrintWriter.flush()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.io.PrintWriter.flush()', '$NOT$java.lang.String.equals(java.lang.Object)', 'DStop', 'DStop')): [50, -2.5507842749357224]}

counter: 28
num skipped: 10
{'include': ['DBranch', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.Properties.getProperty(java.lang.String,java.lang.String)', 'java.lang.Integer.parseInt(java.lang.String)', 'DStop', 'java.lang.Boolean.parseBoolean(java.lang.String)', 'DStop', 'DStop')): [50, -15.513345937477425]}

counter: 30
num skipped: 11
{'include': ['DExcept', 'java.lang.Throwable.fillInStackTrace()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.lang.Throwable.fillInStackTrace()', 'java.sql.Connection.close()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.lang.Throwable.fillInStackTrace()', 'java.sql.Connection.close()', 'DStop', 'DStop')): [50, -12.21325632929802]}

counter: 31
num skipped: 11
{'include': ['DExcept', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.lang.Throwable.getMessage()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.ArrayList<java.lang.Integer>.add(int,java.lang.Integer)', 'java.lang.Throwable.getMessage()', 'DStop', 'DStop')): [50, -25.178543090820312]}

counter: 32
num skipped: 11
{'include': ['DLoop', 'java.util.Vector<java.lang.Object>.size()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.util.Vector<java.lang.Object>.size()', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.util.Vector<java.lang.Object>.size()', 'javax.xml.stream.XMLStreamWriter.getNamespaceContext()', 'DStop', 'DStop')): [50, -19.0148738771677]}

counter: 33
num skipped: 11
{'include': ['java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()', 'java.lang.String.equals(java.lang.Object)', 'java.lang.String.getBytes()', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.io.ByteArrayOutputStream.ByteArrayOutputStream(int)', 'DBranch', 'java.lang.String.equals(java.lang.Object)', 'java.io.ByteArrayOutputStream.toByteArray()', 'DStop', 'java.lang.String.getBytes()', 'DStop', 'DStop')): [50, -6.902852654457092]}

counter: 35
num skipped: 12
{'include': ['DLoop', 'java.net.URI.create(java.lang.String)'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DLoop', 'java.net.URI.create(java.lang.String)', 'java.lang.Thread.sleep(long)', 'DLoop'), (False, True, True, False, False), ('DLoop', 'java.net.URI.create(java.lang.String)', 'java.lang.Thread.sleep(long)', 'DStop', 'DStop')): [50, -9.524913223460317]}

counter: 36
num skipped: 12
{'include': ['java.io.DataOutputStream.writeByte(int)', 'DBranch'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'java.io.DataOutputStream.writeByte(int)', 'DBranch', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'DBranch'), (False, False, True, True, False, False, False, False), ('java.io.DataOutputStream.writeByte(int)', 'DBranch', 'java.util.Arrays.equals(byte[],byte[])', 'java.util.Arrays.equals(byte[],byte[])', 'DStop', 'java.util.Arrays.equals(byte[],byte[])', 'DStop', 'DStop')): [50, -20.314026355743408]}

counter: 39
num skipped: 14
{'include': ['DBranch', 'java.util.TimeZone.getDefault()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Long.parseLong(java.lang.String)', 'java.util.TimeZone.getDefault()', 'java.sql.ResultSet.next()', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Long.parseLong(java.lang.String)', 'DStop', 'java.sql.ResultSet.next()', 'DStop', 'DStop')): [33, -20.498413562774658], (('DSubTree', 'DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Long.parseLong(java.lang.String)', 'java.util.TimeZone.getDefault()', 'DBranch'), (False, True, True, False, False, False), ('DBranch', 'java.util.TimeZone.getDefault()', 'java.lang.Long.parseLong(java.lang.String)', 'DStop', 'java.sql.ResultSet.next()', 'DStop')): [17, -19.669727553613484]}

counter: 40
num skipped: 14
{'include': ['DExcept', 'java.util.regex.Matcher.start()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DExcept', 'java.util.regex.Matcher.start()', 'java.util.Calendar.getTime()', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.regex.Matcher.start()', 'java.util.Calendar.getTime()', 'DStop', 'DStop')): [26, -17.089917596429586], (('DSubTree', 'DExcept', 'java.util.regex.Matcher.start()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DExcept'), (False, True, True, False, False), ('DExcept', 'java.util.regex.Matcher.start()', 'java.util.List<java.lang.String>.add(java.lang.String)', 'DStop', 'DStop')): [24, -18.497727424255572]}

counter: 42
num skipped: 15
{'include': ['DBranch', 'java.io.InputStreamReader.close()'], 'exclude': [], 'min_length': 1, 'max_length': inf}
{(('DSubTree', 'DBranch', 'java.io.InputStreamReader.close()', 'java.lang.String.length()', 'java.io.InputStreamReader.close()', 'java.io.File.File(java.lang.String)', 'DBranch'), (False, True, True, False, False, False, False), ('DBranch', 'java.io.InputStreamReader.close()', 'java.lang.String.length()', 'DStop', 'java.io.File.File(java.lang.String)', 'DStop', 'DStop')): [50, -15.464699324220419]}
